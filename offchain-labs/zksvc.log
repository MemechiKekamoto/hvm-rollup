Creating new ZKVerifier with verifying key: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }
Processing transaction: Transaction { sender: "62mG1ApdTXGh5o4ERMpc3RxkUtoq9djLLyQ1JQaotUHr", recipient: "62mG1ApdTXGh5o4ERMpc3RxkUtoq9djLLyQ1JQaotUHr", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "62mG1ApdTXGh5o4ERMpc3RxkUtoq9djLLyQ1JQaotUHr", recipient: "62mG1ApdTXGh5o4ERMpc3RxkUtoq9djLLyQ1JQaotUHr", amount: 0, nonce: 1 }], programs: [], timestamp: 1728897578, batch_id: 2 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "62mG1ApdTXGh5o4ERMpc3RxkUtoq9djLLyQ1JQaotUHr", recipient: "62mG1ApdTXGh5o4ERMpc3RxkUtoq9djLLyQ1JQaotUHr", amount: 0, nonce: 1 }], programs: [], timestamp: 1728897578, batch_id: 2 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (21663148608111590260960645023779144137970621465051677928785093352682045202481, 14033876114122301602136955066910910932563243147296450042591448616002233664786), b: (QuadExtField(12392086637789680213954700860077400435620143923417296861276586485153589602240 + 14358704419830932022532107805830778627125239315037724715029773631173998887713 * u), QuadExtField(13598658088084931051119491465233547462376557835000959331487591554669847538433 + 11874946909447359634618928183500362068342700702060183079865447389714385390099 * u)), c: (7970333804703483567448149535101395731696138193448958649791300006126388936661, 18144932386042803566418061958601868653730309797727069249430859893159871945616) }
Serialized proof bytes: [49, 96, 198, 150, 93, 105, 93, 161, 16, 49, 85, 123, 88, 20, 115, 254, 73, 163, 101, 207, 254, 85, 143, 21, 79, 35, 201, 154, 88, 232, 228, 47, 18, 133, 205, 133, 104, 147, 113, 145, 218, 201, 57, 98, 30, 116, 155, 161, 229, 178, 70, 71, 199, 164, 112, 100, 111, 163, 63, 1, 116, 228, 6, 159, 192, 167, 175, 213, 180, 27, 125, 198, 146, 169, 89, 47, 25, 163, 36, 211, 31, 181, 181, 81, 167, 61, 83, 11, 208, 232, 116, 196, 39, 172, 101, 27, 33, 67, 147, 140, 46, 140, 202, 91, 181, 21, 105, 253, 129, 245, 220, 237, 97, 101, 84, 125, 42, 224, 234, 211, 24, 99, 216, 127, 27, 189, 190, 31, 1, 107, 152, 176, 239, 42, 16, 66, 69, 79, 5, 79, 154, 37, 83, 186, 138, 195, 200, 171, 68, 109, 251, 174, 236, 186, 213, 54, 86, 145, 16, 30, 19, 202, 94, 109, 227, 172, 108, 49, 0, 167, 55, 117, 140, 152, 64, 63, 68, 217, 7, 41, 117, 71, 128, 50, 171, 86, 245, 39, 85, 251, 64, 154, 213, 127, 118, 217, 139, 1, 159, 253, 251, 194, 148, 87, 87, 119, 104, 88, 152, 191, 122, 162, 228, 44, 248, 151, 244, 161, 225, 182, 143, 12, 159, 17, 144, 155, 140, 19, 253, 193, 10, 52, 127, 50, 173, 82, 77, 138, 61, 144, 106, 198, 67, 85, 118, 251, 183, 63, 159, 130, 230, 25, 244, 170, 29, 168]
Proof generated: Proof { data: [49, 96, 198, 150, 93, 105, 93, 161, 16, 49, 85, 123, 88, 20, 115, 254, 73, 163, 101, 207, 254, 85, 143, 21, 79, 35, 201, 154, 88, 232, 228, 47, 18, 133, 205, 133, 104, 147, 113, 145, 218, 201, 57, 98, 30, 116, 155, 161, 229, 178, 70, 71, 199, 164, 112, 100, 111, 163, 63, 1, 116, 228, 6, 159, 192, 167, 175, 213, 180, 27, 125, 198, 146, 169, 89, 47, 25, 163, 36, 211, 31, 181, 181, 81, 167, 61, 83, 11, 208, 232, 116, 196, 39, 172, 101, 27, 33, 67, 147, 140, 46, 140, 202, 91, 181, 21, 105, 253, 129, 245, 220, 237, 97, 101, 84, 125, 42, 224, 234, 211, 24, 99, 216, 127, 27, 189, 190, 31, 1, 107, 152, 176, 239, 42, 16, 66, 69, 79, 5, 79, 154, 37, 83, 186, 138, 195, 200, 171, 68, 109, 251, 174, 236, 186, 213, 54, 86, 145, 16, 30, 19, 202, 94, 109, 227, 172, 108, 49, 0, 167, 55, 117, 140, 152, 64, 63, 68, 217, 7, 41, 117, 71, 128, 50, 171, 86, 245, 39, 85, 251, 64, 154, 213, 127, 118, 217, 139, 1, 159, 253, 251, 194, 148, 87, 87, 119, 104, 88, 152, 191, 122, 162, 228, 44, 248, 151, 244, 161, 225, 182, 143, 12, 159, 17, 144, 155, 140, 19, 253, 193, 10, 52, 127, 50, 173, 82, 77, 138, 61, 144, 106, 198, 67, 85, 118, 251, 183, 63, 159, 130, 230, 25, 244, 170, 29, 168] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [49, 96, 198, 150, 93, 105, 93, 161, 16, 49, 85, 123, 88, 20, 115, 254, 73, 163, 101, 207, 254, 85, 143, 21, 79, 35, 201, 154, 88, 232, 228, 47, 18, 133, 205, 133, 104, 147, 113, 145, 218, 201, 57, 98, 30, 116, 155, 161, 229, 178, 70, 71, 199, 164, 112, 100, 111, 163, 63, 1, 116, 228, 6, 159, 192, 167, 175, 213, 180, 27, 125, 198, 146, 169, 89, 47, 25, 163, 36, 211, 31, 181, 181, 81, 167, 61, 83, 11, 208, 232, 116, 196, 39, 172, 101, 27, 33, 67, 147, 140, 46, 140, 202, 91, 181, 21, 105, 253, 129, 245, 220, 237, 97, 101, 84, 125, 42, 224, 234, 211, 24, 99, 216, 127, 27, 189, 190, 31, 1, 107, 152, 176, 239, 42, 16, 66, 69, 79, 5, 79, 154, 37, 83, 186, 138, 195, 200, 171, 68, 109, 251, 174, 236, 186, 213, 54, 86, 145, 16, 30, 19, 202, 94, 109, 227, 172, 108, 49, 0, 167, 55, 117, 140, 152, 64, 63, 68, 217, 7, 41, 117, 71, 128, 50, 171, 86, 245, 39, 85, 251, 64, 154, 213, 127, 118, 217, 139, 1, 159, 253, 251, 194, 148, 87, 87, 119, 104, 88, 152, 191, 122, 162, 228, 44, 248, 151, 244, 161, 225, 182, 143, 12, 159, 17, 144, 155, 140, 19, 253, 193, 10, 52, 127, 50, 173, 82, 77, 138, 61, 144, 106, 198, 67, 85, 118, 251, 183, 63, 159, 130, 230, 25, 244, 170, 29, 168] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [49, 96, 198, 150, 93, 105, 93, 161, 16, 49, 85, 123, 88, 20, 115, 254, 73, 163, 101, 207, 254, 85, 143, 21, 79, 35, 201, 154, 88, 232, 228, 47, 18, 133, 205, 133, 104, 147, 113, 145, 218, 201, 57, 98, 30, 116, 155, 161, 229, 178, 70, 71, 199, 164, 112, 100, 111, 163, 63, 1, 116, 228, 6, 159, 192, 167, 175, 213, 180, 27, 125, 198, 146, 169, 89, 47, 25, 163, 36, 211, 31, 181, 181, 81, 167, 61, 83, 11, 208, 232, 116, 196, 39, 172, 101, 27, 33, 67, 147, 140, 46, 140, 202, 91, 181, 21, 105, 253, 129, 245, 220, 237, 97, 101, 84, 125, 42, 224, 234, 211, 24, 99, 216, 127, 27, 189, 190, 31, 1, 107, 152, 176, 239, 42, 16, 66, 69, 79, 5, 79, 154, 37, 83, 186, 138, 195, 200, 171, 68, 109, 251, 174, 236, 186, 213, 54, 86, 145, 16, 30, 19, 202, 94, 109, 227, 172, 108, 49, 0, 167, 55, 117, 140, 152, 64, 63, 68, 217, 7, 41, 117, 71, 128, 50, 171, 86, 245, 39, 85, 251, 64, 154, 213, 127, 118, 217, 139, 1, 159, 253, 251, 194, 148, 87, 87, 119, 104, 88, 152, 191, 122, 162, 228, 44, 248, 151, 244, 161, 225, 182, 143, 12, 159, 17, 144, 155, 140, 19, 253, 193, 10, 52, 127, 50, 173, 82, 77, 138, 61, 144, 106, 198, 67, 85, 118, 251, 183, 63, 159, 130, 230, 25, 244, 170, 29, 168] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "ER7sEGPTVLfuBbjMaUYWcRPxe2wfrmSDNZYvsn9MD5Bt", recipient: "ER7sEGPTVLfuBbjMaUYWcRPxe2wfrmSDNZYvsn9MD5Bt", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "ER7sEGPTVLfuBbjMaUYWcRPxe2wfrmSDNZYvsn9MD5Bt", recipient: "ER7sEGPTVLfuBbjMaUYWcRPxe2wfrmSDNZYvsn9MD5Bt", amount: 0, nonce: 1 }], programs: [], timestamp: 1728897623, batch_id: 4 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "ER7sEGPTVLfuBbjMaUYWcRPxe2wfrmSDNZYvsn9MD5Bt", recipient: "ER7sEGPTVLfuBbjMaUYWcRPxe2wfrmSDNZYvsn9MD5Bt", amount: 0, nonce: 1 }], programs: [], timestamp: 1728897623, batch_id: 4 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (11005579271515715868960104680477376285522168048093279004682546958303278420781, 15191437148175318729969077114777936204316501603121657269262190237265781328942), b: (QuadExtField(19266968185024396007850580919357592953488221403683580302088552332829865082206 + 3315815394058256114334694958253773500123108974897858256113510883411135905342 * u), QuadExtField(14993969657384899282405461359880405632267990455963712275227432952919412830163 + 18677880348231961199644869361839246904798611091220483368100164717482129760000 * u)), c: (19735697113333123832967836507973817581259883379680946441664988147712394101336, 7173093084238526093628905139463598728810781456408927242331355399574962162989) }
Serialized proof bytes: [45, 83, 196, 247, 23, 140, 203, 79, 147, 54, 236, 180, 85, 167, 39, 244, 20, 76, 52, 201, 61, 158, 145, 121, 105, 219, 1, 66, 231, 239, 84, 24, 46, 12, 104, 225, 75, 18, 123, 209, 209, 186, 86, 80, 61, 85, 140, 8, 187, 170, 239, 204, 215, 20, 139, 4, 32, 102, 243, 19, 121, 12, 150, 161, 94, 253, 4, 241, 58, 58, 166, 181, 42, 1, 76, 251, 160, 76, 153, 37, 90, 62, 188, 204, 253, 6, 29, 136, 226, 64, 76, 248, 176, 183, 152, 42, 62, 62, 137, 247, 234, 38, 43, 181, 186, 6, 165, 161, 85, 4, 29, 151, 135, 231, 33, 65, 71, 92, 46, 196, 249, 160, 182, 138, 92, 175, 84, 7, 211, 239, 157, 185, 246, 64, 238, 80, 59, 239, 14, 77, 115, 170, 98, 172, 86, 114, 179, 166, 4, 192, 54, 81, 172, 173, 144, 195, 60, 73, 38, 33, 0, 31, 180, 174, 251, 207, 1, 147, 98, 64, 134, 26, 255, 128, 194, 2, 27, 166, 113, 50, 77, 17, 5, 26, 160, 11, 213, 177, 62, 78, 75, 169, 88, 130, 221, 133, 210, 253, 160, 221, 0, 88, 47, 238, 249, 95, 215, 220, 156, 90, 58, 151, 178, 147, 188, 206, 48, 102, 115, 53, 59, 2, 162, 43, 45, 205, 125, 107, 77, 86, 240, 99, 74, 239, 142, 34, 102, 202, 41, 219, 21, 31, 82, 14, 252, 117, 193, 170, 138, 44, 7, 224, 169, 211, 219, 15]
Proof generated: Proof { data: [45, 83, 196, 247, 23, 140, 203, 79, 147, 54, 236, 180, 85, 167, 39, 244, 20, 76, 52, 201, 61, 158, 145, 121, 105, 219, 1, 66, 231, 239, 84, 24, 46, 12, 104, 225, 75, 18, 123, 209, 209, 186, 86, 80, 61, 85, 140, 8, 187, 170, 239, 204, 215, 20, 139, 4, 32, 102, 243, 19, 121, 12, 150, 161, 94, 253, 4, 241, 58, 58, 166, 181, 42, 1, 76, 251, 160, 76, 153, 37, 90, 62, 188, 204, 253, 6, 29, 136, 226, 64, 76, 248, 176, 183, 152, 42, 62, 62, 137, 247, 234, 38, 43, 181, 186, 6, 165, 161, 85, 4, 29, 151, 135, 231, 33, 65, 71, 92, 46, 196, 249, 160, 182, 138, 92, 175, 84, 7, 211, 239, 157, 185, 246, 64, 238, 80, 59, 239, 14, 77, 115, 170, 98, 172, 86, 114, 179, 166, 4, 192, 54, 81, 172, 173, 144, 195, 60, 73, 38, 33, 0, 31, 180, 174, 251, 207, 1, 147, 98, 64, 134, 26, 255, 128, 194, 2, 27, 166, 113, 50, 77, 17, 5, 26, 160, 11, 213, 177, 62, 78, 75, 169, 88, 130, 221, 133, 210, 253, 160, 221, 0, 88, 47, 238, 249, 95, 215, 220, 156, 90, 58, 151, 178, 147, 188, 206, 48, 102, 115, 53, 59, 2, 162, 43, 45, 205, 125, 107, 77, 86, 240, 99, 74, 239, 142, 34, 102, 202, 41, 219, 21, 31, 82, 14, 252, 117, 193, 170, 138, 44, 7, 224, 169, 211, 219, 15] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [45, 83, 196, 247, 23, 140, 203, 79, 147, 54, 236, 180, 85, 167, 39, 244, 20, 76, 52, 201, 61, 158, 145, 121, 105, 219, 1, 66, 231, 239, 84, 24, 46, 12, 104, 225, 75, 18, 123, 209, 209, 186, 86, 80, 61, 85, 140, 8, 187, 170, 239, 204, 215, 20, 139, 4, 32, 102, 243, 19, 121, 12, 150, 161, 94, 253, 4, 241, 58, 58, 166, 181, 42, 1, 76, 251, 160, 76, 153, 37, 90, 62, 188, 204, 253, 6, 29, 136, 226, 64, 76, 248, 176, 183, 152, 42, 62, 62, 137, 247, 234, 38, 43, 181, 186, 6, 165, 161, 85, 4, 29, 151, 135, 231, 33, 65, 71, 92, 46, 196, 249, 160, 182, 138, 92, 175, 84, 7, 211, 239, 157, 185, 246, 64, 238, 80, 59, 239, 14, 77, 115, 170, 98, 172, 86, 114, 179, 166, 4, 192, 54, 81, 172, 173, 144, 195, 60, 73, 38, 33, 0, 31, 180, 174, 251, 207, 1, 147, 98, 64, 134, 26, 255, 128, 194, 2, 27, 166, 113, 50, 77, 17, 5, 26, 160, 11, 213, 177, 62, 78, 75, 169, 88, 130, 221, 133, 210, 253, 160, 221, 0, 88, 47, 238, 249, 95, 215, 220, 156, 90, 58, 151, 178, 147, 188, 206, 48, 102, 115, 53, 59, 2, 162, 43, 45, 205, 125, 107, 77, 86, 240, 99, 74, 239, 142, 34, 102, 202, 41, 219, 21, 31, 82, 14, 252, 117, 193, 170, 138, 44, 7, 224, 169, 211, 219, 15] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [45, 83, 196, 247, 23, 140, 203, 79, 147, 54, 236, 180, 85, 167, 39, 244, 20, 76, 52, 201, 61, 158, 145, 121, 105, 219, 1, 66, 231, 239, 84, 24, 46, 12, 104, 225, 75, 18, 123, 209, 209, 186, 86, 80, 61, 85, 140, 8, 187, 170, 239, 204, 215, 20, 139, 4, 32, 102, 243, 19, 121, 12, 150, 161, 94, 253, 4, 241, 58, 58, 166, 181, 42, 1, 76, 251, 160, 76, 153, 37, 90, 62, 188, 204, 253, 6, 29, 136, 226, 64, 76, 248, 176, 183, 152, 42, 62, 62, 137, 247, 234, 38, 43, 181, 186, 6, 165, 161, 85, 4, 29, 151, 135, 231, 33, 65, 71, 92, 46, 196, 249, 160, 182, 138, 92, 175, 84, 7, 211, 239, 157, 185, 246, 64, 238, 80, 59, 239, 14, 77, 115, 170, 98, 172, 86, 114, 179, 166, 4, 192, 54, 81, 172, 173, 144, 195, 60, 73, 38, 33, 0, 31, 180, 174, 251, 207, 1, 147, 98, 64, 134, 26, 255, 128, 194, 2, 27, 166, 113, 50, 77, 17, 5, 26, 160, 11, 213, 177, 62, 78, 75, 169, 88, 130, 221, 133, 210, 253, 160, 221, 0, 88, 47, 238, 249, 95, 215, 220, 156, 90, 58, 151, 178, 147, 188, 206, 48, 102, 115, 53, 59, 2, 162, 43, 45, 205, 125, 107, 77, 86, 240, 99, 74, 239, 142, 34, 102, 202, 41, 219, 21, 31, 82, 14, 252, 117, 193, 170, 138, 44, 7, 224, 169, 211, 219, 15] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "4qfeGEu58HJqgbXy2HeXUaUT52i4QH6vt7NUdsHRxTYk", recipient: "4qfeGEu58HJqgbXy2HeXUaUT52i4QH6vt7NUdsHRxTYk", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "4qfeGEu58HJqgbXy2HeXUaUT52i4QH6vt7NUdsHRxTYk", recipient: "4qfeGEu58HJqgbXy2HeXUaUT52i4QH6vt7NUdsHRxTYk", amount: 0, nonce: 1 }], programs: [], timestamp: 1728898310, batch_id: 6 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "4qfeGEu58HJqgbXy2HeXUaUT52i4QH6vt7NUdsHRxTYk", recipient: "4qfeGEu58HJqgbXy2HeXUaUT52i4QH6vt7NUdsHRxTYk", amount: 0, nonce: 1 }], programs: [], timestamp: 1728898310, batch_id: 6 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (12074735865824285236652770965136500321980527977678593797156846863062712039653, 4035150382926528484719257282536697050926000103571380376459657870685536846203), b: (QuadExtField(20637248413815608525700281646808876582677118647254599157729293989041571336696 + 686399440760935001870634431165557504186238499971099744594585712844802610002 * u), QuadExtField(6780798374520580029928886638576294867960606681854229939678239705696034232239 + 6185721673902194750738182945402529578876081830372085480433512099946277021806 * u)), c: (15519227367139254325339386430225131769909837037198544209484813262607355596021, 16209775043241426014230850042038632830744657099410634195879136583099855638369) }
Serialized proof bytes: [229, 184, 105, 180, 12, 104, 114, 94, 76, 243, 25, 54, 47, 91, 185, 39, 47, 209, 161, 146, 199, 96, 42, 200, 201, 16, 23, 106, 237, 14, 178, 26, 123, 1, 221, 118, 87, 255, 164, 112, 59, 223, 203, 204, 178, 185, 180, 29, 30, 239, 76, 203, 144, 157, 220, 68, 77, 78, 104, 49, 110, 208, 235, 8, 248, 145, 155, 161, 208, 199, 255, 142, 116, 26, 40, 139, 134, 149, 138, 199, 229, 238, 64, 204, 40, 84, 133, 47, 129, 198, 117, 127, 199, 68, 160, 45, 82, 211, 223, 8, 20, 238, 128, 149, 10, 217, 228, 118, 123, 180, 137, 27, 204, 232, 76, 189, 250, 0, 5, 132, 56, 168, 101, 70, 2, 125, 132, 1, 175, 23, 122, 155, 179, 168, 93, 64, 163, 166, 144, 95, 137, 39, 229, 40, 23, 231, 189, 6, 72, 72, 67, 89, 137, 28, 153, 95, 190, 203, 253, 14, 110, 168, 122, 188, 220, 187, 213, 10, 204, 177, 220, 140, 83, 43, 111, 67, 15, 107, 153, 145, 123, 251, 16, 85, 78, 247, 243, 202, 144, 254, 172, 13, 245, 204, 57, 94, 42, 53, 46, 60, 145, 171, 150, 235, 180, 43, 131, 177, 107, 192, 111, 114, 239, 86, 173, 224, 35, 48, 133, 10, 72, 146, 79, 34, 97, 143, 115, 107, 252, 211, 124, 16, 140, 117, 186, 158, 23, 217, 92, 233, 106, 250, 127, 71, 130, 175, 69, 204, 77, 28, 160, 234, 84, 104, 214, 163]
Proof generated: Proof { data: [229, 184, 105, 180, 12, 104, 114, 94, 76, 243, 25, 54, 47, 91, 185, 39, 47, 209, 161, 146, 199, 96, 42, 200, 201, 16, 23, 106, 237, 14, 178, 26, 123, 1, 221, 118, 87, 255, 164, 112, 59, 223, 203, 204, 178, 185, 180, 29, 30, 239, 76, 203, 144, 157, 220, 68, 77, 78, 104, 49, 110, 208, 235, 8, 248, 145, 155, 161, 208, 199, 255, 142, 116, 26, 40, 139, 134, 149, 138, 199, 229, 238, 64, 204, 40, 84, 133, 47, 129, 198, 117, 127, 199, 68, 160, 45, 82, 211, 223, 8, 20, 238, 128, 149, 10, 217, 228, 118, 123, 180, 137, 27, 204, 232, 76, 189, 250, 0, 5, 132, 56, 168, 101, 70, 2, 125, 132, 1, 175, 23, 122, 155, 179, 168, 93, 64, 163, 166, 144, 95, 137, 39, 229, 40, 23, 231, 189, 6, 72, 72, 67, 89, 137, 28, 153, 95, 190, 203, 253, 14, 110, 168, 122, 188, 220, 187, 213, 10, 204, 177, 220, 140, 83, 43, 111, 67, 15, 107, 153, 145, 123, 251, 16, 85, 78, 247, 243, 202, 144, 254, 172, 13, 245, 204, 57, 94, 42, 53, 46, 60, 145, 171, 150, 235, 180, 43, 131, 177, 107, 192, 111, 114, 239, 86, 173, 224, 35, 48, 133, 10, 72, 146, 79, 34, 97, 143, 115, 107, 252, 211, 124, 16, 140, 117, 186, 158, 23, 217, 92, 233, 106, 250, 127, 71, 130, 175, 69, 204, 77, 28, 160, 234, 84, 104, 214, 163] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [229, 184, 105, 180, 12, 104, 114, 94, 76, 243, 25, 54, 47, 91, 185, 39, 47, 209, 161, 146, 199, 96, 42, 200, 201, 16, 23, 106, 237, 14, 178, 26, 123, 1, 221, 118, 87, 255, 164, 112, 59, 223, 203, 204, 178, 185, 180, 29, 30, 239, 76, 203, 144, 157, 220, 68, 77, 78, 104, 49, 110, 208, 235, 8, 248, 145, 155, 161, 208, 199, 255, 142, 116, 26, 40, 139, 134, 149, 138, 199, 229, 238, 64, 204, 40, 84, 133, 47, 129, 198, 117, 127, 199, 68, 160, 45, 82, 211, 223, 8, 20, 238, 128, 149, 10, 217, 228, 118, 123, 180, 137, 27, 204, 232, 76, 189, 250, 0, 5, 132, 56, 168, 101, 70, 2, 125, 132, 1, 175, 23, 122, 155, 179, 168, 93, 64, 163, 166, 144, 95, 137, 39, 229, 40, 23, 231, 189, 6, 72, 72, 67, 89, 137, 28, 153, 95, 190, 203, 253, 14, 110, 168, 122, 188, 220, 187, 213, 10, 204, 177, 220, 140, 83, 43, 111, 67, 15, 107, 153, 145, 123, 251, 16, 85, 78, 247, 243, 202, 144, 254, 172, 13, 245, 204, 57, 94, 42, 53, 46, 60, 145, 171, 150, 235, 180, 43, 131, 177, 107, 192, 111, 114, 239, 86, 173, 224, 35, 48, 133, 10, 72, 146, 79, 34, 97, 143, 115, 107, 252, 211, 124, 16, 140, 117, 186, 158, 23, 217, 92, 233, 106, 250, 127, 71, 130, 175, 69, 204, 77, 28, 160, 234, 84, 104, 214, 163] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [229, 184, 105, 180, 12, 104, 114, 94, 76, 243, 25, 54, 47, 91, 185, 39, 47, 209, 161, 146, 199, 96, 42, 200, 201, 16, 23, 106, 237, 14, 178, 26, 123, 1, 221, 118, 87, 255, 164, 112, 59, 223, 203, 204, 178, 185, 180, 29, 30, 239, 76, 203, 144, 157, 220, 68, 77, 78, 104, 49, 110, 208, 235, 8, 248, 145, 155, 161, 208, 199, 255, 142, 116, 26, 40, 139, 134, 149, 138, 199, 229, 238, 64, 204, 40, 84, 133, 47, 129, 198, 117, 127, 199, 68, 160, 45, 82, 211, 223, 8, 20, 238, 128, 149, 10, 217, 228, 118, 123, 180, 137, 27, 204, 232, 76, 189, 250, 0, 5, 132, 56, 168, 101, 70, 2, 125, 132, 1, 175, 23, 122, 155, 179, 168, 93, 64, 163, 166, 144, 95, 137, 39, 229, 40, 23, 231, 189, 6, 72, 72, 67, 89, 137, 28, 153, 95, 190, 203, 253, 14, 110, 168, 122, 188, 220, 187, 213, 10, 204, 177, 220, 140, 83, 43, 111, 67, 15, 107, 153, 145, 123, 251, 16, 85, 78, 247, 243, 202, 144, 254, 172, 13, 245, 204, 57, 94, 42, 53, 46, 60, 145, 171, 150, 235, 180, 43, 131, 177, 107, 192, 111, 114, 239, 86, 173, 224, 35, 48, 133, 10, 72, 146, 79, 34, 97, 143, 115, 107, 252, 211, 124, 16, 140, 117, 186, 158, 23, 217, 92, 233, 106, 250, 127, 71, 130, 175, 69, 204, 77, 28, 160, 234, 84, 104, 214, 163] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "5tiTRgd3ibsH5WUg71oyA6fbhrik3gnYtvUKy7vPuoqb", recipient: "5tiTRgd3ibsH5WUg71oyA6fbhrik3gnYtvUKy7vPuoqb", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "5tiTRgd3ibsH5WUg71oyA6fbhrik3gnYtvUKy7vPuoqb", recipient: "5tiTRgd3ibsH5WUg71oyA6fbhrik3gnYtvUKy7vPuoqb", amount: 0, nonce: 1 }], programs: [], timestamp: 1728919618, batch_id: 8 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "5tiTRgd3ibsH5WUg71oyA6fbhrik3gnYtvUKy7vPuoqb", recipient: "5tiTRgd3ibsH5WUg71oyA6fbhrik3gnYtvUKy7vPuoqb", amount: 0, nonce: 1 }], programs: [], timestamp: 1728919618, batch_id: 8 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (4014762174636820474733529943467232087615424220028400712404097464654093073176, 13618714899718348862429975393400070231062990100141391981350158915655976858237), b: (QuadExtField(21249668213451898671712317309687745459316322836011784128447346379993225071141 + 11803635703562226677717753432828070427565667999164806117239488540624639688109 * u), QuadExtField(4047983366680367762377254136476313243705291531219935523281911396831536903165 + 7218284137511491990922427186769401852984604112419768109818918807640455321601 * u)), c: (2234319856032865150201731481320807603540569983926828353462409416258223427028, 10156442499023534126964192297761214614284233606865812227986236669342285866864) }
Serialized proof bytes: [24, 187, 47, 108, 49, 98, 98, 249, 201, 174, 206, 109, 179, 41, 131, 141, 209, 100, 223, 73, 117, 4, 31, 72, 125, 187, 96, 132, 93, 70, 224, 8, 125, 178, 151, 28, 217, 209, 114, 24, 129, 115, 114, 55, 165, 132, 95, 245, 28, 239, 84, 88, 140, 207, 3, 248, 34, 197, 118, 180, 98, 235, 27, 158, 37, 138, 23, 101, 141, 94, 38, 202, 181, 57, 119, 65, 36, 11, 20, 173, 218, 241, 45, 232, 246, 189, 101, 63, 202, 71, 192, 95, 208, 226, 250, 46, 173, 253, 122, 97, 111, 203, 85, 147, 228, 90, 95, 69, 110, 212, 32, 237, 57, 134, 74, 129, 247, 123, 93, 40, 75, 186, 113, 133, 253, 158, 24, 26, 253, 115, 208, 181, 217, 12, 136, 96, 213, 171, 9, 214, 97, 60, 226, 84, 192, 13, 125, 185, 57, 255, 109, 231, 221, 178, 5, 4, 208, 19, 243, 8, 1, 24, 233, 177, 33, 164, 156, 222, 29, 202, 200, 36, 216, 138, 136, 178, 241, 167, 108, 111, 184, 224, 175, 13, 229, 58, 226, 51, 111, 103, 245, 15, 212, 77, 197, 169, 212, 117, 85, 47, 46, 245, 152, 46, 42, 143, 175, 76, 64, 175, 81, 246, 179, 97, 39, 89, 165, 6, 168, 134, 137, 148, 240, 4, 112, 167, 52, 127, 206, 24, 69, 169, 79, 30, 180, 223, 40, 93, 8, 65, 117, 30, 190, 182, 64, 176, 70, 46, 171, 84, 100, 221, 189, 87, 116, 22]
Proof generated: Proof { data: [24, 187, 47, 108, 49, 98, 98, 249, 201, 174, 206, 109, 179, 41, 131, 141, 209, 100, 223, 73, 117, 4, 31, 72, 125, 187, 96, 132, 93, 70, 224, 8, 125, 178, 151, 28, 217, 209, 114, 24, 129, 115, 114, 55, 165, 132, 95, 245, 28, 239, 84, 88, 140, 207, 3, 248, 34, 197, 118, 180, 98, 235, 27, 158, 37, 138, 23, 101, 141, 94, 38, 202, 181, 57, 119, 65, 36, 11, 20, 173, 218, 241, 45, 232, 246, 189, 101, 63, 202, 71, 192, 95, 208, 226, 250, 46, 173, 253, 122, 97, 111, 203, 85, 147, 228, 90, 95, 69, 110, 212, 32, 237, 57, 134, 74, 129, 247, 123, 93, 40, 75, 186, 113, 133, 253, 158, 24, 26, 253, 115, 208, 181, 217, 12, 136, 96, 213, 171, 9, 214, 97, 60, 226, 84, 192, 13, 125, 185, 57, 255, 109, 231, 221, 178, 5, 4, 208, 19, 243, 8, 1, 24, 233, 177, 33, 164, 156, 222, 29, 202, 200, 36, 216, 138, 136, 178, 241, 167, 108, 111, 184, 224, 175, 13, 229, 58, 226, 51, 111, 103, 245, 15, 212, 77, 197, 169, 212, 117, 85, 47, 46, 245, 152, 46, 42, 143, 175, 76, 64, 175, 81, 246, 179, 97, 39, 89, 165, 6, 168, 134, 137, 148, 240, 4, 112, 167, 52, 127, 206, 24, 69, 169, 79, 30, 180, 223, 40, 93, 8, 65, 117, 30, 190, 182, 64, 176, 70, 46, 171, 84, 100, 221, 189, 87, 116, 22] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [24, 187, 47, 108, 49, 98, 98, 249, 201, 174, 206, 109, 179, 41, 131, 141, 209, 100, 223, 73, 117, 4, 31, 72, 125, 187, 96, 132, 93, 70, 224, 8, 125, 178, 151, 28, 217, 209, 114, 24, 129, 115, 114, 55, 165, 132, 95, 245, 28, 239, 84, 88, 140, 207, 3, 248, 34, 197, 118, 180, 98, 235, 27, 158, 37, 138, 23, 101, 141, 94, 38, 202, 181, 57, 119, 65, 36, 11, 20, 173, 218, 241, 45, 232, 246, 189, 101, 63, 202, 71, 192, 95, 208, 226, 250, 46, 173, 253, 122, 97, 111, 203, 85, 147, 228, 90, 95, 69, 110, 212, 32, 237, 57, 134, 74, 129, 247, 123, 93, 40, 75, 186, 113, 133, 253, 158, 24, 26, 253, 115, 208, 181, 217, 12, 136, 96, 213, 171, 9, 214, 97, 60, 226, 84, 192, 13, 125, 185, 57, 255, 109, 231, 221, 178, 5, 4, 208, 19, 243, 8, 1, 24, 233, 177, 33, 164, 156, 222, 29, 202, 200, 36, 216, 138, 136, 178, 241, 167, 108, 111, 184, 224, 175, 13, 229, 58, 226, 51, 111, 103, 245, 15, 212, 77, 197, 169, 212, 117, 85, 47, 46, 245, 152, 46, 42, 143, 175, 76, 64, 175, 81, 246, 179, 97, 39, 89, 165, 6, 168, 134, 137, 148, 240, 4, 112, 167, 52, 127, 206, 24, 69, 169, 79, 30, 180, 223, 40, 93, 8, 65, 117, 30, 190, 182, 64, 176, 70, 46, 171, 84, 100, 221, 189, 87, 116, 22] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [24, 187, 47, 108, 49, 98, 98, 249, 201, 174, 206, 109, 179, 41, 131, 141, 209, 100, 223, 73, 117, 4, 31, 72, 125, 187, 96, 132, 93, 70, 224, 8, 125, 178, 151, 28, 217, 209, 114, 24, 129, 115, 114, 55, 165, 132, 95, 245, 28, 239, 84, 88, 140, 207, 3, 248, 34, 197, 118, 180, 98, 235, 27, 158, 37, 138, 23, 101, 141, 94, 38, 202, 181, 57, 119, 65, 36, 11, 20, 173, 218, 241, 45, 232, 246, 189, 101, 63, 202, 71, 192, 95, 208, 226, 250, 46, 173, 253, 122, 97, 111, 203, 85, 147, 228, 90, 95, 69, 110, 212, 32, 237, 57, 134, 74, 129, 247, 123, 93, 40, 75, 186, 113, 133, 253, 158, 24, 26, 253, 115, 208, 181, 217, 12, 136, 96, 213, 171, 9, 214, 97, 60, 226, 84, 192, 13, 125, 185, 57, 255, 109, 231, 221, 178, 5, 4, 208, 19, 243, 8, 1, 24, 233, 177, 33, 164, 156, 222, 29, 202, 200, 36, 216, 138, 136, 178, 241, 167, 108, 111, 184, 224, 175, 13, 229, 58, 226, 51, 111, 103, 245, 15, 212, 77, 197, 169, 212, 117, 85, 47, 46, 245, 152, 46, 42, 143, 175, 76, 64, 175, 81, 246, 179, 97, 39, 89, 165, 6, 168, 134, 137, 148, 240, 4, 112, 167, 52, 127, 206, 24, 69, 169, 79, 30, 180, 223, 40, 93, 8, 65, 117, 30, 190, 182, 64, 176, 70, 46, 171, 84, 100, 221, 189, 87, 116, 22] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "G7Rp8FvgfoZhF6K6b517p5QSPWemXtPkK5BkHGSLetMu", recipient: "G7Rp8FvgfoZhF6K6b517p5QSPWemXtPkK5BkHGSLetMu", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "G7Rp8FvgfoZhF6K6b517p5QSPWemXtPkK5BkHGSLetMu", recipient: "G7Rp8FvgfoZhF6K6b517p5QSPWemXtPkK5BkHGSLetMu", amount: 0, nonce: 1 }], programs: [], timestamp: 1728925250, batch_id: 10 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "G7Rp8FvgfoZhF6K6b517p5QSPWemXtPkK5BkHGSLetMu", recipient: "G7Rp8FvgfoZhF6K6b517p5QSPWemXtPkK5BkHGSLetMu", amount: 0, nonce: 1 }], programs: [], timestamp: 1728925250, batch_id: 10 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (18420728493560784484191911496967827473011018087315296215445381298291995490062, 6440376616119332415915449049921782168090091905945336508807808608985938376949), b: (QuadExtField(3238534388442871548841946919406005800309040327898015530759254718320844787004 + 4065185298587550762059452772485560322973059873872233521066400968347115084797 * u), QuadExtField(3526561839825143621843086935981854233021267349465185187473408842115191551089 + 18194357214457998231336271850034497407795230866257307996558746208365309913219 * u)), c: (16239261484547219988284106689361453225443548214282288980714556533673522901365, 17952608141174776147444164429936005646285570990434117703782482652120073062042) }
Serialized proof bytes: [14, 183, 14, 17, 114, 191, 187, 236, 244, 235, 207, 105, 146, 107, 148, 57, 33, 37, 103, 29, 99, 105, 85, 53, 142, 177, 218, 72, 74, 195, 185, 40, 245, 184, 199, 18, 147, 20, 84, 37, 79, 177, 135, 163, 20, 231, 49, 236, 162, 143, 43, 212, 52, 34, 60, 6, 179, 128, 145, 146, 189, 31, 61, 14, 60, 205, 120, 199, 236, 220, 105, 17, 99, 174, 246, 192, 148, 167, 209, 111, 221, 146, 24, 139, 192, 202, 224, 103, 228, 155, 110, 186, 12, 242, 40, 7, 253, 91, 96, 156, 73, 40, 49, 87, 224, 251, 145, 186, 225, 153, 177, 129, 138, 131, 49, 212, 51, 33, 60, 94, 141, 11, 206, 33, 55, 208, 252, 8, 113, 52, 218, 188, 40, 210, 129, 15, 208, 194, 149, 213, 75, 254, 189, 144, 196, 188, 188, 249, 26, 98, 248, 105, 134, 196, 171, 171, 152, 246, 203, 7, 131, 232, 48, 124, 176, 221, 96, 8, 67, 104, 252, 71, 58, 168, 121, 237, 236, 208, 216, 97, 234, 49, 98, 95, 207, 128, 112, 224, 40, 164, 57, 168, 117, 49, 72, 181, 204, 235, 207, 179, 103, 9, 10, 47, 172, 157, 80, 224, 17, 221, 223, 56, 55, 180, 70, 45, 122, 63, 160, 207, 165, 24, 231, 35, 154, 70, 227, 216, 134, 168, 246, 199, 30, 96, 50, 163, 207, 243, 232, 89, 164, 203, 191, 163, 49, 255, 166, 118, 110, 158, 154, 97, 237, 208, 176, 167]
Proof generated: Proof { data: [14, 183, 14, 17, 114, 191, 187, 236, 244, 235, 207, 105, 146, 107, 148, 57, 33, 37, 103, 29, 99, 105, 85, 53, 142, 177, 218, 72, 74, 195, 185, 40, 245, 184, 199, 18, 147, 20, 84, 37, 79, 177, 135, 163, 20, 231, 49, 236, 162, 143, 43, 212, 52, 34, 60, 6, 179, 128, 145, 146, 189, 31, 61, 14, 60, 205, 120, 199, 236, 220, 105, 17, 99, 174, 246, 192, 148, 167, 209, 111, 221, 146, 24, 139, 192, 202, 224, 103, 228, 155, 110, 186, 12, 242, 40, 7, 253, 91, 96, 156, 73, 40, 49, 87, 224, 251, 145, 186, 225, 153, 177, 129, 138, 131, 49, 212, 51, 33, 60, 94, 141, 11, 206, 33, 55, 208, 252, 8, 113, 52, 218, 188, 40, 210, 129, 15, 208, 194, 149, 213, 75, 254, 189, 144, 196, 188, 188, 249, 26, 98, 248, 105, 134, 196, 171, 171, 152, 246, 203, 7, 131, 232, 48, 124, 176, 221, 96, 8, 67, 104, 252, 71, 58, 168, 121, 237, 236, 208, 216, 97, 234, 49, 98, 95, 207, 128, 112, 224, 40, 164, 57, 168, 117, 49, 72, 181, 204, 235, 207, 179, 103, 9, 10, 47, 172, 157, 80, 224, 17, 221, 223, 56, 55, 180, 70, 45, 122, 63, 160, 207, 165, 24, 231, 35, 154, 70, 227, 216, 134, 168, 246, 199, 30, 96, 50, 163, 207, 243, 232, 89, 164, 203, 191, 163, 49, 255, 166, 118, 110, 158, 154, 97, 237, 208, 176, 167] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [14, 183, 14, 17, 114, 191, 187, 236, 244, 235, 207, 105, 146, 107, 148, 57, 33, 37, 103, 29, 99, 105, 85, 53, 142, 177, 218, 72, 74, 195, 185, 40, 245, 184, 199, 18, 147, 20, 84, 37, 79, 177, 135, 163, 20, 231, 49, 236, 162, 143, 43, 212, 52, 34, 60, 6, 179, 128, 145, 146, 189, 31, 61, 14, 60, 205, 120, 199, 236, 220, 105, 17, 99, 174, 246, 192, 148, 167, 209, 111, 221, 146, 24, 139, 192, 202, 224, 103, 228, 155, 110, 186, 12, 242, 40, 7, 253, 91, 96, 156, 73, 40, 49, 87, 224, 251, 145, 186, 225, 153, 177, 129, 138, 131, 49, 212, 51, 33, 60, 94, 141, 11, 206, 33, 55, 208, 252, 8, 113, 52, 218, 188, 40, 210, 129, 15, 208, 194, 149, 213, 75, 254, 189, 144, 196, 188, 188, 249, 26, 98, 248, 105, 134, 196, 171, 171, 152, 246, 203, 7, 131, 232, 48, 124, 176, 221, 96, 8, 67, 104, 252, 71, 58, 168, 121, 237, 236, 208, 216, 97, 234, 49, 98, 95, 207, 128, 112, 224, 40, 164, 57, 168, 117, 49, 72, 181, 204, 235, 207, 179, 103, 9, 10, 47, 172, 157, 80, 224, 17, 221, 223, 56, 55, 180, 70, 45, 122, 63, 160, 207, 165, 24, 231, 35, 154, 70, 227, 216, 134, 168, 246, 199, 30, 96, 50, 163, 207, 243, 232, 89, 164, 203, 191, 163, 49, 255, 166, 118, 110, 158, 154, 97, 237, 208, 176, 167] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [14, 183, 14, 17, 114, 191, 187, 236, 244, 235, 207, 105, 146, 107, 148, 57, 33, 37, 103, 29, 99, 105, 85, 53, 142, 177, 218, 72, 74, 195, 185, 40, 245, 184, 199, 18, 147, 20, 84, 37, 79, 177, 135, 163, 20, 231, 49, 236, 162, 143, 43, 212, 52, 34, 60, 6, 179, 128, 145, 146, 189, 31, 61, 14, 60, 205, 120, 199, 236, 220, 105, 17, 99, 174, 246, 192, 148, 167, 209, 111, 221, 146, 24, 139, 192, 202, 224, 103, 228, 155, 110, 186, 12, 242, 40, 7, 253, 91, 96, 156, 73, 40, 49, 87, 224, 251, 145, 186, 225, 153, 177, 129, 138, 131, 49, 212, 51, 33, 60, 94, 141, 11, 206, 33, 55, 208, 252, 8, 113, 52, 218, 188, 40, 210, 129, 15, 208, 194, 149, 213, 75, 254, 189, 144, 196, 188, 188, 249, 26, 98, 248, 105, 134, 196, 171, 171, 152, 246, 203, 7, 131, 232, 48, 124, 176, 221, 96, 8, 67, 104, 252, 71, 58, 168, 121, 237, 236, 208, 216, 97, 234, 49, 98, 95, 207, 128, 112, 224, 40, 164, 57, 168, 117, 49, 72, 181, 204, 235, 207, 179, 103, 9, 10, 47, 172, 157, 80, 224, 17, 221, 223, 56, 55, 180, 70, 45, 122, 63, 160, 207, 165, 24, 231, 35, 154, 70, 227, 216, 134, 168, 246, 199, 30, 96, 50, 163, 207, 243, 232, 89, 164, 203, 191, 163, 49, 255, 166, 118, 110, 158, 154, 97, 237, 208, 176, 167] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "Ae5LHyyEv1xC3UYwhUHE6T3SMNGxBW1oh7BR7PdSkneP", recipient: "Ae5LHyyEv1xC3UYwhUHE6T3SMNGxBW1oh7BR7PdSkneP", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "Ae5LHyyEv1xC3UYwhUHE6T3SMNGxBW1oh7BR7PdSkneP", recipient: "Ae5LHyyEv1xC3UYwhUHE6T3SMNGxBW1oh7BR7PdSkneP", amount: 0, nonce: 1 }], programs: [], timestamp: 1728925287, batch_id: 12 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "Ae5LHyyEv1xC3UYwhUHE6T3SMNGxBW1oh7BR7PdSkneP", recipient: "Ae5LHyyEv1xC3UYwhUHE6T3SMNGxBW1oh7BR7PdSkneP", amount: 0, nonce: 1 }], programs: [], timestamp: 1728925287, batch_id: 12 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (12494843155161704728287502970183597338669346778973422420054384660171504885562, 8591651979775784259149896673437743010923116771110933425094044595948508647199), b: (QuadExtField(20268629839362240090395748026254525211322945275321999829282413211026819827862 + 1732304776369667198171559371681981505272518283588084993486260801918881698006 * u), QuadExtField(19100370118808766887213557484773532926203868974080743528194475578630830533175 + 2256775523957235875799751813187339666167041921596888514264006919741312732293 * u)), c: (1272799752630810687749543031798060583390198952592442058407219422095135011822, 8447003495118529055513502153392597934574369023218363773691879814869608815862) }
Serialized proof bytes: [58, 31, 98, 141, 89, 123, 241, 224, 31, 164, 144, 249, 22, 155, 101, 155, 178, 208, 242, 165, 99, 169, 154, 169, 12, 40, 123, 212, 162, 212, 159, 27, 31, 143, 159, 168, 43, 128, 61, 193, 104, 116, 154, 223, 93, 108, 138, 61, 186, 68, 79, 199, 53, 218, 102, 130, 8, 199, 243, 173, 227, 179, 254, 18, 150, 200, 38, 150, 192, 212, 61, 106, 59, 79, 232, 99, 245, 66, 232, 120, 70, 177, 128, 232, 215, 228, 1, 34, 218, 135, 100, 169, 80, 163, 207, 44, 214, 16, 39, 106, 25, 109, 165, 122, 15, 157, 89, 185, 242, 212, 155, 68, 88, 113, 225, 228, 104, 155, 119, 33, 191, 74, 82, 80, 35, 115, 212, 3, 55, 170, 51, 4, 13, 33, 126, 53, 138, 113, 8, 58, 40, 54, 60, 159, 156, 21, 31, 243, 58, 12, 210, 210, 171, 26, 60, 64, 39, 109, 58, 42, 133, 12, 66, 71, 226, 104, 185, 159, 175, 229, 186, 68, 184, 228, 4, 10, 152, 44, 22, 49, 197, 72, 255, 13, 48, 96, 181, 138, 40, 74, 253, 4, 238, 243, 160, 174, 137, 105, 202, 61, 163, 6, 176, 142, 231, 115, 178, 27, 94, 227, 165, 104, 129, 192, 121, 37, 174, 101, 228, 181, 14, 97, 208, 2, 246, 220, 47, 10, 131, 235, 50, 215, 217, 217, 3, 197, 100, 79, 95, 222, 123, 210, 185, 106, 37, 246, 215, 39, 211, 90, 145, 48, 165, 213, 172, 18]
Proof generated: Proof { data: [58, 31, 98, 141, 89, 123, 241, 224, 31, 164, 144, 249, 22, 155, 101, 155, 178, 208, 242, 165, 99, 169, 154, 169, 12, 40, 123, 212, 162, 212, 159, 27, 31, 143, 159, 168, 43, 128, 61, 193, 104, 116, 154, 223, 93, 108, 138, 61, 186, 68, 79, 199, 53, 218, 102, 130, 8, 199, 243, 173, 227, 179, 254, 18, 150, 200, 38, 150, 192, 212, 61, 106, 59, 79, 232, 99, 245, 66, 232, 120, 70, 177, 128, 232, 215, 228, 1, 34, 218, 135, 100, 169, 80, 163, 207, 44, 214, 16, 39, 106, 25, 109, 165, 122, 15, 157, 89, 185, 242, 212, 155, 68, 88, 113, 225, 228, 104, 155, 119, 33, 191, 74, 82, 80, 35, 115, 212, 3, 55, 170, 51, 4, 13, 33, 126, 53, 138, 113, 8, 58, 40, 54, 60, 159, 156, 21, 31, 243, 58, 12, 210, 210, 171, 26, 60, 64, 39, 109, 58, 42, 133, 12, 66, 71, 226, 104, 185, 159, 175, 229, 186, 68, 184, 228, 4, 10, 152, 44, 22, 49, 197, 72, 255, 13, 48, 96, 181, 138, 40, 74, 253, 4, 238, 243, 160, 174, 137, 105, 202, 61, 163, 6, 176, 142, 231, 115, 178, 27, 94, 227, 165, 104, 129, 192, 121, 37, 174, 101, 228, 181, 14, 97, 208, 2, 246, 220, 47, 10, 131, 235, 50, 215, 217, 217, 3, 197, 100, 79, 95, 222, 123, 210, 185, 106, 37, 246, 215, 39, 211, 90, 145, 48, 165, 213, 172, 18] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [58, 31, 98, 141, 89, 123, 241, 224, 31, 164, 144, 249, 22, 155, 101, 155, 178, 208, 242, 165, 99, 169, 154, 169, 12, 40, 123, 212, 162, 212, 159, 27, 31, 143, 159, 168, 43, 128, 61, 193, 104, 116, 154, 223, 93, 108, 138, 61, 186, 68, 79, 199, 53, 218, 102, 130, 8, 199, 243, 173, 227, 179, 254, 18, 150, 200, 38, 150, 192, 212, 61, 106, 59, 79, 232, 99, 245, 66, 232, 120, 70, 177, 128, 232, 215, 228, 1, 34, 218, 135, 100, 169, 80, 163, 207, 44, 214, 16, 39, 106, 25, 109, 165, 122, 15, 157, 89, 185, 242, 212, 155, 68, 88, 113, 225, 228, 104, 155, 119, 33, 191, 74, 82, 80, 35, 115, 212, 3, 55, 170, 51, 4, 13, 33, 126, 53, 138, 113, 8, 58, 40, 54, 60, 159, 156, 21, 31, 243, 58, 12, 210, 210, 171, 26, 60, 64, 39, 109, 58, 42, 133, 12, 66, 71, 226, 104, 185, 159, 175, 229, 186, 68, 184, 228, 4, 10, 152, 44, 22, 49, 197, 72, 255, 13, 48, 96, 181, 138, 40, 74, 253, 4, 238, 243, 160, 174, 137, 105, 202, 61, 163, 6, 176, 142, 231, 115, 178, 27, 94, 227, 165, 104, 129, 192, 121, 37, 174, 101, 228, 181, 14, 97, 208, 2, 246, 220, 47, 10, 131, 235, 50, 215, 217, 217, 3, 197, 100, 79, 95, 222, 123, 210, 185, 106, 37, 246, 215, 39, 211, 90, 145, 48, 165, 213, 172, 18] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [58, 31, 98, 141, 89, 123, 241, 224, 31, 164, 144, 249, 22, 155, 101, 155, 178, 208, 242, 165, 99, 169, 154, 169, 12, 40, 123, 212, 162, 212, 159, 27, 31, 143, 159, 168, 43, 128, 61, 193, 104, 116, 154, 223, 93, 108, 138, 61, 186, 68, 79, 199, 53, 218, 102, 130, 8, 199, 243, 173, 227, 179, 254, 18, 150, 200, 38, 150, 192, 212, 61, 106, 59, 79, 232, 99, 245, 66, 232, 120, 70, 177, 128, 232, 215, 228, 1, 34, 218, 135, 100, 169, 80, 163, 207, 44, 214, 16, 39, 106, 25, 109, 165, 122, 15, 157, 89, 185, 242, 212, 155, 68, 88, 113, 225, 228, 104, 155, 119, 33, 191, 74, 82, 80, 35, 115, 212, 3, 55, 170, 51, 4, 13, 33, 126, 53, 138, 113, 8, 58, 40, 54, 60, 159, 156, 21, 31, 243, 58, 12, 210, 210, 171, 26, 60, 64, 39, 109, 58, 42, 133, 12, 66, 71, 226, 104, 185, 159, 175, 229, 186, 68, 184, 228, 4, 10, 152, 44, 22, 49, 197, 72, 255, 13, 48, 96, 181, 138, 40, 74, 253, 4, 238, 243, 160, 174, 137, 105, 202, 61, 163, 6, 176, 142, 231, 115, 178, 27, 94, 227, 165, 104, 129, 192, 121, 37, 174, 101, 228, 181, 14, 97, 208, 2, 246, 220, 47, 10, 131, 235, 50, 215, 217, 217, 3, 197, 100, 79, 95, 222, 123, 210, 185, 106, 37, 246, 215, 39, 211, 90, 145, 48, 165, 213, 172, 18] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "FLgAF6uNBAqt4HBfaEJTaD3ey1n2tMsCfvNLHSqQTvDw", recipient: "FLgAF6uNBAqt4HBfaEJTaD3ey1n2tMsCfvNLHSqQTvDw", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "FLgAF6uNBAqt4HBfaEJTaD3ey1n2tMsCfvNLHSqQTvDw", recipient: "FLgAF6uNBAqt4HBfaEJTaD3ey1n2tMsCfvNLHSqQTvDw", amount: 0, nonce: 1 }], programs: [], timestamp: 1728926290, batch_id: 14 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "FLgAF6uNBAqt4HBfaEJTaD3ey1n2tMsCfvNLHSqQTvDw", recipient: "FLgAF6uNBAqt4HBfaEJTaD3ey1n2tMsCfvNLHSqQTvDw", amount: 0, nonce: 1 }], programs: [], timestamp: 1728926290, batch_id: 14 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (19806804768175323843237712820520472191174949652027221080312166888850556582538, 16049158027156577806263753329638381824124652765571237111375572215781269626090), b: (QuadExtField(18051094975755308515325206140454770810818592457341585902063954223677399339926 + 14415400898750008788325004024941838476312102487850308454630917260578078459740 * u), QuadExtField(7597653591419317038082098869597109889053110682083076775230080747128288262124 + 8102685217397303711469410949264449656520896469604518125190391492341203002726 * u)), c: (15591113532461451280950863859751170653939489466710411260622862528636404233655, 9964346935529686063317359636498130818649588143530020436078670183939599873877) }
Serialized proof bytes: [138, 250, 69, 135, 237, 195, 21, 125, 179, 136, 185, 125, 209, 128, 190, 193, 130, 250, 171, 247, 142, 201, 249, 170, 239, 58, 63, 183, 20, 65, 202, 43, 234, 220, 78, 41, 63, 3, 3, 195, 221, 91, 51, 76, 255, 141, 102, 171, 112, 26, 196, 52, 14, 223, 145, 222, 99, 28, 69, 173, 100, 128, 123, 163, 150, 147, 3, 202, 87, 39, 219, 66, 158, 142, 71, 242, 179, 241, 129, 74, 99, 180, 184, 174, 68, 89, 5, 89, 6, 202, 109, 27, 197, 142, 232, 39, 92, 7, 174, 78, 229, 238, 14, 187, 131, 126, 1, 214, 34, 243, 24, 156, 29, 27, 71, 164, 239, 217, 175, 132, 200, 13, 94, 200, 232, 211, 222, 31, 236, 55, 121, 184, 248, 245, 48, 23, 160, 166, 125, 167, 84, 170, 192, 225, 91, 236, 139, 180, 83, 79, 203, 19, 62, 42, 35, 82, 154, 30, 204, 16, 102, 229, 8, 32, 88, 173, 243, 219, 44, 147, 251, 163, 99, 198, 88, 132, 175, 98, 142, 92, 112, 221, 241, 77, 188, 208, 92, 116, 18, 245, 233, 17, 183, 245, 241, 207, 207, 55, 21, 151, 57, 3, 57, 46, 91, 24, 218, 252, 198, 179, 224, 115, 167, 133, 30, 97, 124, 240, 81, 27, 238, 65, 120, 34, 85, 183, 253, 210, 132, 198, 25, 104, 254, 16, 180, 181, 206, 159, 243, 117, 153, 239, 127, 203, 61, 250, 14, 219, 132, 128, 147, 104, 217, 158, 7, 22]
Proof generated: Proof { data: [138, 250, 69, 135, 237, 195, 21, 125, 179, 136, 185, 125, 209, 128, 190, 193, 130, 250, 171, 247, 142, 201, 249, 170, 239, 58, 63, 183, 20, 65, 202, 43, 234, 220, 78, 41, 63, 3, 3, 195, 221, 91, 51, 76, 255, 141, 102, 171, 112, 26, 196, 52, 14, 223, 145, 222, 99, 28, 69, 173, 100, 128, 123, 163, 150, 147, 3, 202, 87, 39, 219, 66, 158, 142, 71, 242, 179, 241, 129, 74, 99, 180, 184, 174, 68, 89, 5, 89, 6, 202, 109, 27, 197, 142, 232, 39, 92, 7, 174, 78, 229, 238, 14, 187, 131, 126, 1, 214, 34, 243, 24, 156, 29, 27, 71, 164, 239, 217, 175, 132, 200, 13, 94, 200, 232, 211, 222, 31, 236, 55, 121, 184, 248, 245, 48, 23, 160, 166, 125, 167, 84, 170, 192, 225, 91, 236, 139, 180, 83, 79, 203, 19, 62, 42, 35, 82, 154, 30, 204, 16, 102, 229, 8, 32, 88, 173, 243, 219, 44, 147, 251, 163, 99, 198, 88, 132, 175, 98, 142, 92, 112, 221, 241, 77, 188, 208, 92, 116, 18, 245, 233, 17, 183, 245, 241, 207, 207, 55, 21, 151, 57, 3, 57, 46, 91, 24, 218, 252, 198, 179, 224, 115, 167, 133, 30, 97, 124, 240, 81, 27, 238, 65, 120, 34, 85, 183, 253, 210, 132, 198, 25, 104, 254, 16, 180, 181, 206, 159, 243, 117, 153, 239, 127, 203, 61, 250, 14, 219, 132, 128, 147, 104, 217, 158, 7, 22] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [138, 250, 69, 135, 237, 195, 21, 125, 179, 136, 185, 125, 209, 128, 190, 193, 130, 250, 171, 247, 142, 201, 249, 170, 239, 58, 63, 183, 20, 65, 202, 43, 234, 220, 78, 41, 63, 3, 3, 195, 221, 91, 51, 76, 255, 141, 102, 171, 112, 26, 196, 52, 14, 223, 145, 222, 99, 28, 69, 173, 100, 128, 123, 163, 150, 147, 3, 202, 87, 39, 219, 66, 158, 142, 71, 242, 179, 241, 129, 74, 99, 180, 184, 174, 68, 89, 5, 89, 6, 202, 109, 27, 197, 142, 232, 39, 92, 7, 174, 78, 229, 238, 14, 187, 131, 126, 1, 214, 34, 243, 24, 156, 29, 27, 71, 164, 239, 217, 175, 132, 200, 13, 94, 200, 232, 211, 222, 31, 236, 55, 121, 184, 248, 245, 48, 23, 160, 166, 125, 167, 84, 170, 192, 225, 91, 236, 139, 180, 83, 79, 203, 19, 62, 42, 35, 82, 154, 30, 204, 16, 102, 229, 8, 32, 88, 173, 243, 219, 44, 147, 251, 163, 99, 198, 88, 132, 175, 98, 142, 92, 112, 221, 241, 77, 188, 208, 92, 116, 18, 245, 233, 17, 183, 245, 241, 207, 207, 55, 21, 151, 57, 3, 57, 46, 91, 24, 218, 252, 198, 179, 224, 115, 167, 133, 30, 97, 124, 240, 81, 27, 238, 65, 120, 34, 85, 183, 253, 210, 132, 198, 25, 104, 254, 16, 180, 181, 206, 159, 243, 117, 153, 239, 127, 203, 61, 250, 14, 219, 132, 128, 147, 104, 217, 158, 7, 22] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [138, 250, 69, 135, 237, 195, 21, 125, 179, 136, 185, 125, 209, 128, 190, 193, 130, 250, 171, 247, 142, 201, 249, 170, 239, 58, 63, 183, 20, 65, 202, 43, 234, 220, 78, 41, 63, 3, 3, 195, 221, 91, 51, 76, 255, 141, 102, 171, 112, 26, 196, 52, 14, 223, 145, 222, 99, 28, 69, 173, 100, 128, 123, 163, 150, 147, 3, 202, 87, 39, 219, 66, 158, 142, 71, 242, 179, 241, 129, 74, 99, 180, 184, 174, 68, 89, 5, 89, 6, 202, 109, 27, 197, 142, 232, 39, 92, 7, 174, 78, 229, 238, 14, 187, 131, 126, 1, 214, 34, 243, 24, 156, 29, 27, 71, 164, 239, 217, 175, 132, 200, 13, 94, 200, 232, 211, 222, 31, 236, 55, 121, 184, 248, 245, 48, 23, 160, 166, 125, 167, 84, 170, 192, 225, 91, 236, 139, 180, 83, 79, 203, 19, 62, 42, 35, 82, 154, 30, 204, 16, 102, 229, 8, 32, 88, 173, 243, 219, 44, 147, 251, 163, 99, 198, 88, 132, 175, 98, 142, 92, 112, 221, 241, 77, 188, 208, 92, 116, 18, 245, 233, 17, 183, 245, 241, 207, 207, 55, 21, 151, 57, 3, 57, 46, 91, 24, 218, 252, 198, 179, 224, 115, 167, 133, 30, 97, 124, 240, 81, 27, 238, 65, 120, 34, 85, 183, 253, 210, 132, 198, 25, 104, 254, 16, 180, 181, 206, 159, 243, 117, 153, 239, 127, 203, 61, 250, 14, 219, 132, 128, 147, 104, 217, 158, 7, 22] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "DgGYuu4VMviuM1uXznoiGsoChqgAvq151tKgHMbKn9JD", recipient: "DgGYuu4VMviuM1uXznoiGsoChqgAvq151tKgHMbKn9JD", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "DgGYuu4VMviuM1uXznoiGsoChqgAvq151tKgHMbKn9JD", recipient: "DgGYuu4VMviuM1uXznoiGsoChqgAvq151tKgHMbKn9JD", amount: 0, nonce: 1 }], programs: [], timestamp: 1728931662, batch_id: 16 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "DgGYuu4VMviuM1uXznoiGsoChqgAvq151tKgHMbKn9JD", recipient: "DgGYuu4VMviuM1uXznoiGsoChqgAvq151tKgHMbKn9JD", amount: 0, nonce: 1 }], programs: [], timestamp: 1728931662, batch_id: 16 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (2413412585508392842197432359559589011388102521169398321004679353132853547129, 7312001731209694239996003895393866172284972246584970184981210827358277835351), b: (QuadExtField(9088217937050257635476296689704919508137687251857805235489888797434677158529 + 18738392695750475025263178255372309991455406120778445583604561519355233877327 * u), QuadExtField(11171652827573108627663212939815159531148883287307212515857831931940566314754 + 14642585016195822159687142652391433233054954855746043876674329304692101281681 * u)), c: (19352385291326062526056841679633451064805166868527322934782378326656679871308, 4430923007608978883656644973658528895871332834795652934942763519175584640593) }
Serialized proof bytes: [121, 208, 248, 170, 27, 197, 200, 111, 41, 176, 217, 118, 7, 205, 187, 166, 37, 26, 147, 236, 14, 17, 5, 48, 197, 12, 42, 16, 112, 241, 85, 5, 87, 154, 73, 198, 44, 211, 231, 121, 83, 249, 238, 14, 255, 35, 201, 210, 155, 123, 73, 2, 196, 196, 241, 190, 117, 136, 208, 243, 65, 114, 42, 16, 129, 226, 25, 147, 143, 175, 175, 54, 71, 131, 1, 133, 170, 223, 191, 206, 55, 125, 246, 100, 182, 235, 171, 241, 27, 118, 125, 181, 194, 191, 23, 20, 79, 189, 136, 194, 33, 213, 171, 99, 83, 84, 252, 118, 255, 131, 232, 184, 16, 41, 63, 14, 80, 53, 188, 193, 13, 51, 38, 105, 238, 141, 109, 41, 2, 175, 101, 184, 218, 105, 156, 11, 143, 126, 226, 231, 96, 169, 8, 7, 228, 64, 93, 37, 75, 219, 177, 26, 205, 87, 84, 208, 113, 238, 178, 24, 145, 247, 88, 199, 217, 216, 79, 41, 212, 195, 151, 85, 103, 175, 75, 148, 133, 104, 44, 9, 250, 10, 90, 40, 112, 179, 85, 10, 208, 104, 95, 160, 76, 3, 175, 165, 29, 191, 213, 143, 175, 42, 19, 148, 63, 96, 2, 87, 26, 147, 212, 81, 73, 154, 218, 38, 225, 4, 213, 135, 217, 15, 201, 42, 81, 238, 163, 73, 8, 67, 208, 157, 246, 8, 21, 248, 247, 200, 97, 19, 9, 170, 210, 143, 110, 107, 217, 56, 139, 47, 255, 186, 68, 208, 203, 9]
Proof generated: Proof { data: [121, 208, 248, 170, 27, 197, 200, 111, 41, 176, 217, 118, 7, 205, 187, 166, 37, 26, 147, 236, 14, 17, 5, 48, 197, 12, 42, 16, 112, 241, 85, 5, 87, 154, 73, 198, 44, 211, 231, 121, 83, 249, 238, 14, 255, 35, 201, 210, 155, 123, 73, 2, 196, 196, 241, 190, 117, 136, 208, 243, 65, 114, 42, 16, 129, 226, 25, 147, 143, 175, 175, 54, 71, 131, 1, 133, 170, 223, 191, 206, 55, 125, 246, 100, 182, 235, 171, 241, 27, 118, 125, 181, 194, 191, 23, 20, 79, 189, 136, 194, 33, 213, 171, 99, 83, 84, 252, 118, 255, 131, 232, 184, 16, 41, 63, 14, 80, 53, 188, 193, 13, 51, 38, 105, 238, 141, 109, 41, 2, 175, 101, 184, 218, 105, 156, 11, 143, 126, 226, 231, 96, 169, 8, 7, 228, 64, 93, 37, 75, 219, 177, 26, 205, 87, 84, 208, 113, 238, 178, 24, 145, 247, 88, 199, 217, 216, 79, 41, 212, 195, 151, 85, 103, 175, 75, 148, 133, 104, 44, 9, 250, 10, 90, 40, 112, 179, 85, 10, 208, 104, 95, 160, 76, 3, 175, 165, 29, 191, 213, 143, 175, 42, 19, 148, 63, 96, 2, 87, 26, 147, 212, 81, 73, 154, 218, 38, 225, 4, 213, 135, 217, 15, 201, 42, 81, 238, 163, 73, 8, 67, 208, 157, 246, 8, 21, 248, 247, 200, 97, 19, 9, 170, 210, 143, 110, 107, 217, 56, 139, 47, 255, 186, 68, 208, 203, 9] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [121, 208, 248, 170, 27, 197, 200, 111, 41, 176, 217, 118, 7, 205, 187, 166, 37, 26, 147, 236, 14, 17, 5, 48, 197, 12, 42, 16, 112, 241, 85, 5, 87, 154, 73, 198, 44, 211, 231, 121, 83, 249, 238, 14, 255, 35, 201, 210, 155, 123, 73, 2, 196, 196, 241, 190, 117, 136, 208, 243, 65, 114, 42, 16, 129, 226, 25, 147, 143, 175, 175, 54, 71, 131, 1, 133, 170, 223, 191, 206, 55, 125, 246, 100, 182, 235, 171, 241, 27, 118, 125, 181, 194, 191, 23, 20, 79, 189, 136, 194, 33, 213, 171, 99, 83, 84, 252, 118, 255, 131, 232, 184, 16, 41, 63, 14, 80, 53, 188, 193, 13, 51, 38, 105, 238, 141, 109, 41, 2, 175, 101, 184, 218, 105, 156, 11, 143, 126, 226, 231, 96, 169, 8, 7, 228, 64, 93, 37, 75, 219, 177, 26, 205, 87, 84, 208, 113, 238, 178, 24, 145, 247, 88, 199, 217, 216, 79, 41, 212, 195, 151, 85, 103, 175, 75, 148, 133, 104, 44, 9, 250, 10, 90, 40, 112, 179, 85, 10, 208, 104, 95, 160, 76, 3, 175, 165, 29, 191, 213, 143, 175, 42, 19, 148, 63, 96, 2, 87, 26, 147, 212, 81, 73, 154, 218, 38, 225, 4, 213, 135, 217, 15, 201, 42, 81, 238, 163, 73, 8, 67, 208, 157, 246, 8, 21, 248, 247, 200, 97, 19, 9, 170, 210, 143, 110, 107, 217, 56, 139, 47, 255, 186, 68, 208, 203, 9] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [121, 208, 248, 170, 27, 197, 200, 111, 41, 176, 217, 118, 7, 205, 187, 166, 37, 26, 147, 236, 14, 17, 5, 48, 197, 12, 42, 16, 112, 241, 85, 5, 87, 154, 73, 198, 44, 211, 231, 121, 83, 249, 238, 14, 255, 35, 201, 210, 155, 123, 73, 2, 196, 196, 241, 190, 117, 136, 208, 243, 65, 114, 42, 16, 129, 226, 25, 147, 143, 175, 175, 54, 71, 131, 1, 133, 170, 223, 191, 206, 55, 125, 246, 100, 182, 235, 171, 241, 27, 118, 125, 181, 194, 191, 23, 20, 79, 189, 136, 194, 33, 213, 171, 99, 83, 84, 252, 118, 255, 131, 232, 184, 16, 41, 63, 14, 80, 53, 188, 193, 13, 51, 38, 105, 238, 141, 109, 41, 2, 175, 101, 184, 218, 105, 156, 11, 143, 126, 226, 231, 96, 169, 8, 7, 228, 64, 93, 37, 75, 219, 177, 26, 205, 87, 84, 208, 113, 238, 178, 24, 145, 247, 88, 199, 217, 216, 79, 41, 212, 195, 151, 85, 103, 175, 75, 148, 133, 104, 44, 9, 250, 10, 90, 40, 112, 179, 85, 10, 208, 104, 95, 160, 76, 3, 175, 165, 29, 191, 213, 143, 175, 42, 19, 148, 63, 96, 2, 87, 26, 147, 212, 81, 73, 154, 218, 38, 225, 4, 213, 135, 217, 15, 201, 42, 81, 238, 163, 73, 8, 67, 208, 157, 246, 8, 21, 248, 247, 200, 97, 19, 9, 170, 210, 143, 110, 107, 217, 56, 139, 47, 255, 186, 68, 208, 203, 9] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "9mrTFzn5DEnHe4ramEiSEtyY6Mjr1rP7qPctuzUi8jKH", recipient: "9mrTFzn5DEnHe4ramEiSEtyY6Mjr1rP7qPctuzUi8jKH", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "9mrTFzn5DEnHe4ramEiSEtyY6Mjr1rP7qPctuzUi8jKH", recipient: "9mrTFzn5DEnHe4ramEiSEtyY6Mjr1rP7qPctuzUi8jKH", amount: 0, nonce: 1 }], programs: [], timestamp: 1728958894, batch_id: 18 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "9mrTFzn5DEnHe4ramEiSEtyY6Mjr1rP7qPctuzUi8jKH", recipient: "9mrTFzn5DEnHe4ramEiSEtyY6Mjr1rP7qPctuzUi8jKH", amount: 0, nonce: 1 }], programs: [], timestamp: 1728958894, batch_id: 18 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (16910635444656952321590631312952270061971793389681359715434769021248878864620, 7659355211040101046672203815202180150859899925755139951103970336586838691547), b: (QuadExtField(15626421072665712743290482592303573261071206926414815218699154326003512848881 + 18391895877197707506870754770932842820642712366776031411967944916911687218015 * u), QuadExtField(16311705420127543650174639451879357216229100182561271483664440392523336190422 + 3988774868550902924135160442049224070401659808702296398780308210096401731228 * u)), c: (11583953780768625399191686506063444879556776899120379015792515085519359760046, 868090844106472483696734188990362713940594958886687488533734808973046996745) }
Serialized proof bytes: [236, 232, 142, 27, 86, 161, 76, 62, 66, 237, 157, 237, 252, 252, 88, 89, 126, 158, 247, 199, 94, 112, 172, 104, 148, 67, 150, 8, 154, 20, 99, 37, 219, 206, 177, 83, 48, 46, 88, 73, 76, 64, 4, 4, 137, 181, 6, 148, 247, 192, 40, 18, 119, 40, 50, 60, 207, 5, 69, 151, 154, 10, 239, 16, 241, 49, 73, 156, 10, 194, 39, 22, 117, 82, 34, 179, 188, 237, 82, 255, 155, 206, 168, 228, 125, 105, 146, 32, 11, 10, 68, 143, 171, 61, 140, 34, 95, 51, 252, 179, 115, 100, 0, 32, 24, 163, 250, 27, 110, 196, 253, 156, 236, 196, 95, 85, 68, 59, 171, 121, 214, 35, 228, 26, 181, 113, 169, 40, 214, 9, 113, 53, 191, 151, 245, 158, 82, 55, 223, 153, 50, 238, 38, 179, 100, 174, 174, 248, 103, 63, 84, 64, 186, 201, 178, 185, 28, 25, 16, 36, 156, 206, 166, 153, 99, 159, 148, 58, 143, 83, 255, 212, 29, 154, 190, 35, 238, 4, 31, 200, 1, 248, 121, 104, 157, 195, 232, 194, 10, 145, 209, 8, 174, 214, 34, 198, 123, 154, 85, 71, 4, 174, 159, 3, 21, 91, 239, 90, 78, 209, 9, 57, 244, 187, 81, 33, 10, 241, 9, 33, 22, 73, 156, 25, 9, 95, 112, 139, 167, 171, 38, 89, 212, 223, 164, 26, 128, 58, 161, 123, 187, 176, 87, 40, 109, 241, 146, 140, 74, 211, 175, 251, 110, 82, 235, 1]
Proof generated: Proof { data: [236, 232, 142, 27, 86, 161, 76, 62, 66, 237, 157, 237, 252, 252, 88, 89, 126, 158, 247, 199, 94, 112, 172, 104, 148, 67, 150, 8, 154, 20, 99, 37, 219, 206, 177, 83, 48, 46, 88, 73, 76, 64, 4, 4, 137, 181, 6, 148, 247, 192, 40, 18, 119, 40, 50, 60, 207, 5, 69, 151, 154, 10, 239, 16, 241, 49, 73, 156, 10, 194, 39, 22, 117, 82, 34, 179, 188, 237, 82, 255, 155, 206, 168, 228, 125, 105, 146, 32, 11, 10, 68, 143, 171, 61, 140, 34, 95, 51, 252, 179, 115, 100, 0, 32, 24, 163, 250, 27, 110, 196, 253, 156, 236, 196, 95, 85, 68, 59, 171, 121, 214, 35, 228, 26, 181, 113, 169, 40, 214, 9, 113, 53, 191, 151, 245, 158, 82, 55, 223, 153, 50, 238, 38, 179, 100, 174, 174, 248, 103, 63, 84, 64, 186, 201, 178, 185, 28, 25, 16, 36, 156, 206, 166, 153, 99, 159, 148, 58, 143, 83, 255, 212, 29, 154, 190, 35, 238, 4, 31, 200, 1, 248, 121, 104, 157, 195, 232, 194, 10, 145, 209, 8, 174, 214, 34, 198, 123, 154, 85, 71, 4, 174, 159, 3, 21, 91, 239, 90, 78, 209, 9, 57, 244, 187, 81, 33, 10, 241, 9, 33, 22, 73, 156, 25, 9, 95, 112, 139, 167, 171, 38, 89, 212, 223, 164, 26, 128, 58, 161, 123, 187, 176, 87, 40, 109, 241, 146, 140, 74, 211, 175, 251, 110, 82, 235, 1] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [236, 232, 142, 27, 86, 161, 76, 62, 66, 237, 157, 237, 252, 252, 88, 89, 126, 158, 247, 199, 94, 112, 172, 104, 148, 67, 150, 8, 154, 20, 99, 37, 219, 206, 177, 83, 48, 46, 88, 73, 76, 64, 4, 4, 137, 181, 6, 148, 247, 192, 40, 18, 119, 40, 50, 60, 207, 5, 69, 151, 154, 10, 239, 16, 241, 49, 73, 156, 10, 194, 39, 22, 117, 82, 34, 179, 188, 237, 82, 255, 155, 206, 168, 228, 125, 105, 146, 32, 11, 10, 68, 143, 171, 61, 140, 34, 95, 51, 252, 179, 115, 100, 0, 32, 24, 163, 250, 27, 110, 196, 253, 156, 236, 196, 95, 85, 68, 59, 171, 121, 214, 35, 228, 26, 181, 113, 169, 40, 214, 9, 113, 53, 191, 151, 245, 158, 82, 55, 223, 153, 50, 238, 38, 179, 100, 174, 174, 248, 103, 63, 84, 64, 186, 201, 178, 185, 28, 25, 16, 36, 156, 206, 166, 153, 99, 159, 148, 58, 143, 83, 255, 212, 29, 154, 190, 35, 238, 4, 31, 200, 1, 248, 121, 104, 157, 195, 232, 194, 10, 145, 209, 8, 174, 214, 34, 198, 123, 154, 85, 71, 4, 174, 159, 3, 21, 91, 239, 90, 78, 209, 9, 57, 244, 187, 81, 33, 10, 241, 9, 33, 22, 73, 156, 25, 9, 95, 112, 139, 167, 171, 38, 89, 212, 223, 164, 26, 128, 58, 161, 123, 187, 176, 87, 40, 109, 241, 146, 140, 74, 211, 175, 251, 110, 82, 235, 1] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [236, 232, 142, 27, 86, 161, 76, 62, 66, 237, 157, 237, 252, 252, 88, 89, 126, 158, 247, 199, 94, 112, 172, 104, 148, 67, 150, 8, 154, 20, 99, 37, 219, 206, 177, 83, 48, 46, 88, 73, 76, 64, 4, 4, 137, 181, 6, 148, 247, 192, 40, 18, 119, 40, 50, 60, 207, 5, 69, 151, 154, 10, 239, 16, 241, 49, 73, 156, 10, 194, 39, 22, 117, 82, 34, 179, 188, 237, 82, 255, 155, 206, 168, 228, 125, 105, 146, 32, 11, 10, 68, 143, 171, 61, 140, 34, 95, 51, 252, 179, 115, 100, 0, 32, 24, 163, 250, 27, 110, 196, 253, 156, 236, 196, 95, 85, 68, 59, 171, 121, 214, 35, 228, 26, 181, 113, 169, 40, 214, 9, 113, 53, 191, 151, 245, 158, 82, 55, 223, 153, 50, 238, 38, 179, 100, 174, 174, 248, 103, 63, 84, 64, 186, 201, 178, 185, 28, 25, 16, 36, 156, 206, 166, 153, 99, 159, 148, 58, 143, 83, 255, 212, 29, 154, 190, 35, 238, 4, 31, 200, 1, 248, 121, 104, 157, 195, 232, 194, 10, 145, 209, 8, 174, 214, 34, 198, 123, 154, 85, 71, 4, 174, 159, 3, 21, 91, 239, 90, 78, 209, 9, 57, 244, 187, 81, 33, 10, 241, 9, 33, 22, 73, 156, 25, 9, 95, 112, 139, 167, 171, 38, 89, 212, 223, 164, 26, 128, 58, 161, 123, 187, 176, 87, 40, 109, 241, 146, 140, 74, 211, 175, 251, 110, 82, 235, 1] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728959658, batch_id: 20 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728959658, batch_id: 20 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (11918634798106868400811794091289601701779664118047542018745814564426204246669, 5827804829123642215078733227467280772930415983332141047166043917164874829910), b: (QuadExtField(11654961168462987479596058768683692534194267655716994466377916927591352154972 + 14610356210020144457625139963933696604680296349896419449664198688966763544769 * u), QuadExtField(2563142216705261002840339629022479822138868547165318118186063316795159127444 + 7592464534372540870140660114492861777607920488182715497020063329446564914102 * u)), c: (7852219605217347746954795218768995638501139585759365273213296692467452279179, 5776360499880883995849881235791744960369955218233274443798315264195439029493) }
Serialized proof bytes: [141, 242, 214, 101, 38, 207, 155, 135, 136, 76, 194, 244, 235, 163, 137, 7, 88, 202, 115, 108, 188, 91, 145, 24, 160, 216, 100, 2, 79, 181, 89, 26, 86, 16, 32, 123, 240, 169, 77, 114, 98, 165, 1, 218, 75, 226, 12, 180, 148, 20, 230, 162, 243, 228, 197, 35, 149, 120, 2, 44, 175, 107, 226, 12, 92, 187, 208, 202, 117, 41, 88, 168, 179, 202, 233, 126, 83, 76, 149, 193, 156, 138, 247, 10, 245, 89, 95, 53, 124, 15, 87, 133, 104, 121, 196, 25, 193, 0, 187, 105, 25, 255, 207, 2, 99, 28, 117, 143, 119, 93, 115, 46, 140, 157, 95, 196, 61, 67, 73, 18, 167, 188, 237, 45, 39, 43, 77, 32, 148, 165, 46, 174, 132, 227, 145, 219, 209, 66, 204, 79, 100, 182, 225, 105, 40, 178, 42, 174, 1, 210, 162, 197, 63, 227, 189, 192, 228, 175, 170, 5, 182, 227, 194, 177, 225, 223, 226, 146, 157, 246, 254, 134, 229, 101, 1, 113, 126, 74, 213, 202, 215, 184, 92, 168, 33, 192, 105, 127, 193, 46, 201, 16, 139, 249, 218, 125, 35, 235, 253, 83, 172, 190, 45, 155, 118, 209, 35, 14, 53, 110, 154, 175, 44, 84, 34, 230, 197, 177, 236, 143, 228, 50, 92, 17, 245, 236, 34, 142, 39, 48, 105, 25, 105, 253, 116, 117, 81, 188, 228, 25, 138, 114, 209, 108, 88, 107, 191, 216, 69, 196, 140, 242, 222, 77, 197, 12]
Proof generated: Proof { data: [141, 242, 214, 101, 38, 207, 155, 135, 136, 76, 194, 244, 235, 163, 137, 7, 88, 202, 115, 108, 188, 91, 145, 24, 160, 216, 100, 2, 79, 181, 89, 26, 86, 16, 32, 123, 240, 169, 77, 114, 98, 165, 1, 218, 75, 226, 12, 180, 148, 20, 230, 162, 243, 228, 197, 35, 149, 120, 2, 44, 175, 107, 226, 12, 92, 187, 208, 202, 117, 41, 88, 168, 179, 202, 233, 126, 83, 76, 149, 193, 156, 138, 247, 10, 245, 89, 95, 53, 124, 15, 87, 133, 104, 121, 196, 25, 193, 0, 187, 105, 25, 255, 207, 2, 99, 28, 117, 143, 119, 93, 115, 46, 140, 157, 95, 196, 61, 67, 73, 18, 167, 188, 237, 45, 39, 43, 77, 32, 148, 165, 46, 174, 132, 227, 145, 219, 209, 66, 204, 79, 100, 182, 225, 105, 40, 178, 42, 174, 1, 210, 162, 197, 63, 227, 189, 192, 228, 175, 170, 5, 182, 227, 194, 177, 225, 223, 226, 146, 157, 246, 254, 134, 229, 101, 1, 113, 126, 74, 213, 202, 215, 184, 92, 168, 33, 192, 105, 127, 193, 46, 201, 16, 139, 249, 218, 125, 35, 235, 253, 83, 172, 190, 45, 155, 118, 209, 35, 14, 53, 110, 154, 175, 44, 84, 34, 230, 197, 177, 236, 143, 228, 50, 92, 17, 245, 236, 34, 142, 39, 48, 105, 25, 105, 253, 116, 117, 81, 188, 228, 25, 138, 114, 209, 108, 88, 107, 191, 216, 69, 196, 140, 242, 222, 77, 197, 12] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [141, 242, 214, 101, 38, 207, 155, 135, 136, 76, 194, 244, 235, 163, 137, 7, 88, 202, 115, 108, 188, 91, 145, 24, 160, 216, 100, 2, 79, 181, 89, 26, 86, 16, 32, 123, 240, 169, 77, 114, 98, 165, 1, 218, 75, 226, 12, 180, 148, 20, 230, 162, 243, 228, 197, 35, 149, 120, 2, 44, 175, 107, 226, 12, 92, 187, 208, 202, 117, 41, 88, 168, 179, 202, 233, 126, 83, 76, 149, 193, 156, 138, 247, 10, 245, 89, 95, 53, 124, 15, 87, 133, 104, 121, 196, 25, 193, 0, 187, 105, 25, 255, 207, 2, 99, 28, 117, 143, 119, 93, 115, 46, 140, 157, 95, 196, 61, 67, 73, 18, 167, 188, 237, 45, 39, 43, 77, 32, 148, 165, 46, 174, 132, 227, 145, 219, 209, 66, 204, 79, 100, 182, 225, 105, 40, 178, 42, 174, 1, 210, 162, 197, 63, 227, 189, 192, 228, 175, 170, 5, 182, 227, 194, 177, 225, 223, 226, 146, 157, 246, 254, 134, 229, 101, 1, 113, 126, 74, 213, 202, 215, 184, 92, 168, 33, 192, 105, 127, 193, 46, 201, 16, 139, 249, 218, 125, 35, 235, 253, 83, 172, 190, 45, 155, 118, 209, 35, 14, 53, 110, 154, 175, 44, 84, 34, 230, 197, 177, 236, 143, 228, 50, 92, 17, 245, 236, 34, 142, 39, 48, 105, 25, 105, 253, 116, 117, 81, 188, 228, 25, 138, 114, 209, 108, 88, 107, 191, 216, 69, 196, 140, 242, 222, 77, 197, 12] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [141, 242, 214, 101, 38, 207, 155, 135, 136, 76, 194, 244, 235, 163, 137, 7, 88, 202, 115, 108, 188, 91, 145, 24, 160, 216, 100, 2, 79, 181, 89, 26, 86, 16, 32, 123, 240, 169, 77, 114, 98, 165, 1, 218, 75, 226, 12, 180, 148, 20, 230, 162, 243, 228, 197, 35, 149, 120, 2, 44, 175, 107, 226, 12, 92, 187, 208, 202, 117, 41, 88, 168, 179, 202, 233, 126, 83, 76, 149, 193, 156, 138, 247, 10, 245, 89, 95, 53, 124, 15, 87, 133, 104, 121, 196, 25, 193, 0, 187, 105, 25, 255, 207, 2, 99, 28, 117, 143, 119, 93, 115, 46, 140, 157, 95, 196, 61, 67, 73, 18, 167, 188, 237, 45, 39, 43, 77, 32, 148, 165, 46, 174, 132, 227, 145, 219, 209, 66, 204, 79, 100, 182, 225, 105, 40, 178, 42, 174, 1, 210, 162, 197, 63, 227, 189, 192, 228, 175, 170, 5, 182, 227, 194, 177, 225, 223, 226, 146, 157, 246, 254, 134, 229, 101, 1, 113, 126, 74, 213, 202, 215, 184, 92, 168, 33, 192, 105, 127, 193, 46, 201, 16, 139, 249, 218, 125, 35, 235, 253, 83, 172, 190, 45, 155, 118, 209, 35, 14, 53, 110, 154, 175, 44, 84, 34, 230, 197, 177, 236, 143, 228, 50, 92, 17, 245, 236, 34, 142, 39, 48, 105, 25, 105, 253, 116, 117, 81, 188, 228, 25, 138, 114, 209, 108, 88, 107, 191, 216, 69, 196, 140, 242, 222, 77, 197, 12] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "Dt4goM46dYcQD5LF6LrwQPD3J4HEWzRWEaL8co4MARnU", recipient: "Dt4goM46dYcQD5LF6LrwQPD3J4HEWzRWEaL8co4MARnU", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "Dt4goM46dYcQD5LF6LrwQPD3J4HEWzRWEaL8co4MARnU", recipient: "Dt4goM46dYcQD5LF6LrwQPD3J4HEWzRWEaL8co4MARnU", amount: 0, nonce: 1 }], programs: [], timestamp: 1728959741, batch_id: 22 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "Dt4goM46dYcQD5LF6LrwQPD3J4HEWzRWEaL8co4MARnU", recipient: "Dt4goM46dYcQD5LF6LrwQPD3J4HEWzRWEaL8co4MARnU", amount: 0, nonce: 1 }], programs: [], timestamp: 1728959741, batch_id: 22 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (3235831404259552908073798355400466143329401384705440418592746245048147248299, 13439274829315154643196786332294246283901479283651454943218372855068986025739), b: (QuadExtField(19573945551736272775908185868949069295904639862483859833726547189670935800842 + 11141687081444254734341567235173057885936222083628898456393525269413035084945 * u), QuadExtField(19503695394611906394044137930218667477745636066772114822002599301349346301688 + 20109265507574787754287267125546466923305090133437116674150581707092269892899 * u)), c: (8475688876215326231524385640096548246529541433835299253083686358801905069011, 832292071610522329029520031715934823855979379847949118258692908150355078484) }
Serialized proof bytes: [171, 4, 182, 26, 181, 13, 78, 191, 64, 253, 92, 131, 79, 85, 191, 9, 102, 88, 0, 15, 68, 255, 142, 253, 255, 238, 0, 121, 105, 106, 39, 7, 11, 167, 37, 140, 89, 131, 95, 194, 44, 68, 250, 99, 103, 141, 214, 211, 165, 147, 196, 73, 184, 210, 126, 116, 124, 129, 165, 147, 40, 92, 182, 157, 10, 44, 28, 216, 111, 115, 181, 181, 190, 73, 67, 25, 1, 246, 240, 202, 44, 138, 158, 12, 163, 134, 231, 85, 6, 80, 83, 86, 232, 117, 70, 43, 145, 140, 217, 174, 150, 39, 122, 83, 113, 254, 15, 218, 11, 15, 43, 240, 85, 162, 10, 210, 2, 51, 189, 219, 47, 35, 233, 131, 174, 248, 161, 24, 248, 214, 186, 223, 240, 102, 99, 108, 231, 61, 214, 157, 188, 22, 193, 64, 109, 177, 177, 99, 30, 224, 13, 157, 64, 100, 51, 48, 77, 179, 30, 43, 35, 133, 234, 39, 41, 61, 121, 101, 139, 178, 197, 43, 204, 251, 116, 51, 147, 178, 248, 117, 91, 147, 176, 121, 16, 175, 165, 16, 225, 112, 117, 172, 211, 171, 143, 236, 25, 181, 38, 185, 38, 130, 11, 150, 120, 85, 207, 208, 97, 129, 198, 4, 218, 240, 151, 120, 160, 218, 21, 28, 229, 17, 189, 18, 84, 45, 107, 33, 242, 81, 112, 158, 96, 86, 49, 248, 61, 184, 152, 51, 146, 34, 192, 98, 113, 183, 110, 125, 252, 137, 60, 182, 132, 15, 215, 1]
Proof generated: Proof { data: [171, 4, 182, 26, 181, 13, 78, 191, 64, 253, 92, 131, 79, 85, 191, 9, 102, 88, 0, 15, 68, 255, 142, 253, 255, 238, 0, 121, 105, 106, 39, 7, 11, 167, 37, 140, 89, 131, 95, 194, 44, 68, 250, 99, 103, 141, 214, 211, 165, 147, 196, 73, 184, 210, 126, 116, 124, 129, 165, 147, 40, 92, 182, 157, 10, 44, 28, 216, 111, 115, 181, 181, 190, 73, 67, 25, 1, 246, 240, 202, 44, 138, 158, 12, 163, 134, 231, 85, 6, 80, 83, 86, 232, 117, 70, 43, 145, 140, 217, 174, 150, 39, 122, 83, 113, 254, 15, 218, 11, 15, 43, 240, 85, 162, 10, 210, 2, 51, 189, 219, 47, 35, 233, 131, 174, 248, 161, 24, 248, 214, 186, 223, 240, 102, 99, 108, 231, 61, 214, 157, 188, 22, 193, 64, 109, 177, 177, 99, 30, 224, 13, 157, 64, 100, 51, 48, 77, 179, 30, 43, 35, 133, 234, 39, 41, 61, 121, 101, 139, 178, 197, 43, 204, 251, 116, 51, 147, 178, 248, 117, 91, 147, 176, 121, 16, 175, 165, 16, 225, 112, 117, 172, 211, 171, 143, 236, 25, 181, 38, 185, 38, 130, 11, 150, 120, 85, 207, 208, 97, 129, 198, 4, 218, 240, 151, 120, 160, 218, 21, 28, 229, 17, 189, 18, 84, 45, 107, 33, 242, 81, 112, 158, 96, 86, 49, 248, 61, 184, 152, 51, 146, 34, 192, 98, 113, 183, 110, 125, 252, 137, 60, 182, 132, 15, 215, 1] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [171, 4, 182, 26, 181, 13, 78, 191, 64, 253, 92, 131, 79, 85, 191, 9, 102, 88, 0, 15, 68, 255, 142, 253, 255, 238, 0, 121, 105, 106, 39, 7, 11, 167, 37, 140, 89, 131, 95, 194, 44, 68, 250, 99, 103, 141, 214, 211, 165, 147, 196, 73, 184, 210, 126, 116, 124, 129, 165, 147, 40, 92, 182, 157, 10, 44, 28, 216, 111, 115, 181, 181, 190, 73, 67, 25, 1, 246, 240, 202, 44, 138, 158, 12, 163, 134, 231, 85, 6, 80, 83, 86, 232, 117, 70, 43, 145, 140, 217, 174, 150, 39, 122, 83, 113, 254, 15, 218, 11, 15, 43, 240, 85, 162, 10, 210, 2, 51, 189, 219, 47, 35, 233, 131, 174, 248, 161, 24, 248, 214, 186, 223, 240, 102, 99, 108, 231, 61, 214, 157, 188, 22, 193, 64, 109, 177, 177, 99, 30, 224, 13, 157, 64, 100, 51, 48, 77, 179, 30, 43, 35, 133, 234, 39, 41, 61, 121, 101, 139, 178, 197, 43, 204, 251, 116, 51, 147, 178, 248, 117, 91, 147, 176, 121, 16, 175, 165, 16, 225, 112, 117, 172, 211, 171, 143, 236, 25, 181, 38, 185, 38, 130, 11, 150, 120, 85, 207, 208, 97, 129, 198, 4, 218, 240, 151, 120, 160, 218, 21, 28, 229, 17, 189, 18, 84, 45, 107, 33, 242, 81, 112, 158, 96, 86, 49, 248, 61, 184, 152, 51, 146, 34, 192, 98, 113, 183, 110, 125, 252, 137, 60, 182, 132, 15, 215, 1] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [171, 4, 182, 26, 181, 13, 78, 191, 64, 253, 92, 131, 79, 85, 191, 9, 102, 88, 0, 15, 68, 255, 142, 253, 255, 238, 0, 121, 105, 106, 39, 7, 11, 167, 37, 140, 89, 131, 95, 194, 44, 68, 250, 99, 103, 141, 214, 211, 165, 147, 196, 73, 184, 210, 126, 116, 124, 129, 165, 147, 40, 92, 182, 157, 10, 44, 28, 216, 111, 115, 181, 181, 190, 73, 67, 25, 1, 246, 240, 202, 44, 138, 158, 12, 163, 134, 231, 85, 6, 80, 83, 86, 232, 117, 70, 43, 145, 140, 217, 174, 150, 39, 122, 83, 113, 254, 15, 218, 11, 15, 43, 240, 85, 162, 10, 210, 2, 51, 189, 219, 47, 35, 233, 131, 174, 248, 161, 24, 248, 214, 186, 223, 240, 102, 99, 108, 231, 61, 214, 157, 188, 22, 193, 64, 109, 177, 177, 99, 30, 224, 13, 157, 64, 100, 51, 48, 77, 179, 30, 43, 35, 133, 234, 39, 41, 61, 121, 101, 139, 178, 197, 43, 204, 251, 116, 51, 147, 178, 248, 117, 91, 147, 176, 121, 16, 175, 165, 16, 225, 112, 117, 172, 211, 171, 143, 236, 25, 181, 38, 185, 38, 130, 11, 150, 120, 85, 207, 208, 97, 129, 198, 4, 218, 240, 151, 120, 160, 218, 21, 28, 229, 17, 189, 18, 84, 45, 107, 33, 242, 81, 112, 158, 96, 86, 49, 248, 61, 184, 152, 51, 146, 34, 192, 98, 113, 183, 110, 125, 252, 137, 60, 182, 132, 15, 215, 1] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "9oDKywReFUGRK2crSJreUnNmfs7ZmwgxaKAwNhAjjZRU", recipient: "9oDKywReFUGRK2crSJreUnNmfs7ZmwgxaKAwNhAjjZRU", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "9oDKywReFUGRK2crSJreUnNmfs7ZmwgxaKAwNhAjjZRU", recipient: "9oDKywReFUGRK2crSJreUnNmfs7ZmwgxaKAwNhAjjZRU", amount: 0, nonce: 1 }], programs: [], timestamp: 1728959844, batch_id: 24 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "9oDKywReFUGRK2crSJreUnNmfs7ZmwgxaKAwNhAjjZRU", recipient: "9oDKywReFUGRK2crSJreUnNmfs7ZmwgxaKAwNhAjjZRU", amount: 0, nonce: 1 }], programs: [], timestamp: 1728959844, batch_id: 24 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (1255502175156702220120361345914069772923231848248888833875645139920880857900, 17820852502008647380902251843062540048748490646830717162887512523101891264063), b: (QuadExtField(9353749987736841589446329632306782405403158047245859743216939807595627828826 + 16109245630514236492626799837798686405097558832166849239407775056552012222018 * u), QuadExtField(11016265622084998754589945142370453257030257882903057690641085817987890225808 + 8219980765287326974423909691799410920233023530921637946780826717423189201779 * u)), c: (13114926473254559765400976867912425072522110739473780117819224427136555301930, 3815569760233005300820231928399670907576904555016509047663488441083225267839) }
Serialized proof bytes: [44, 243, 242, 199, 46, 70, 189, 209, 144, 87, 246, 220, 55, 209, 236, 17, 159, 221, 45, 17, 233, 174, 83, 159, 78, 53, 38, 231, 203, 150, 198, 2, 63, 254, 36, 45, 193, 220, 169, 204, 17, 141, 239, 230, 54, 222, 213, 73, 131, 210, 1, 124, 225, 85, 146, 180, 132, 32, 4, 28, 189, 62, 102, 167, 90, 86, 92, 200, 104, 143, 181, 2, 57, 86, 207, 166, 220, 232, 194, 210, 208, 169, 47, 77, 114, 251, 58, 191, 53, 127, 116, 221, 237, 8, 174, 20, 66, 14, 227, 55, 107, 135, 181, 135, 212, 82, 86, 13, 67, 208, 100, 251, 246, 194, 85, 41, 159, 223, 33, 44, 111, 9, 162, 193, 137, 130, 157, 35, 144, 34, 45, 57, 99, 246, 210, 113, 197, 48, 214, 172, 235, 251, 152, 221, 33, 99, 228, 179, 70, 5, 100, 163, 41, 246, 202, 7, 66, 252, 90, 24, 115, 147, 193, 55, 135, 20, 149, 190, 62, 1, 149, 7, 228, 87, 215, 97, 219, 199, 241, 129, 242, 176, 134, 83, 136, 215, 160, 33, 32, 88, 44, 18, 42, 60, 98, 224, 43, 172, 146, 247, 115, 253, 209, 133, 255, 59, 74, 136, 176, 255, 126, 254, 67, 13, 186, 14, 192, 130, 114, 103, 11, 201, 254, 28, 127, 94, 181, 139, 30, 143, 167, 235, 222, 205, 142, 83, 103, 132, 14, 210, 54, 19, 88, 69, 174, 239, 69, 73, 136, 8, 247, 58, 52, 137, 111, 8]
Proof generated: Proof { data: [44, 243, 242, 199, 46, 70, 189, 209, 144, 87, 246, 220, 55, 209, 236, 17, 159, 221, 45, 17, 233, 174, 83, 159, 78, 53, 38, 231, 203, 150, 198, 2, 63, 254, 36, 45, 193, 220, 169, 204, 17, 141, 239, 230, 54, 222, 213, 73, 131, 210, 1, 124, 225, 85, 146, 180, 132, 32, 4, 28, 189, 62, 102, 167, 90, 86, 92, 200, 104, 143, 181, 2, 57, 86, 207, 166, 220, 232, 194, 210, 208, 169, 47, 77, 114, 251, 58, 191, 53, 127, 116, 221, 237, 8, 174, 20, 66, 14, 227, 55, 107, 135, 181, 135, 212, 82, 86, 13, 67, 208, 100, 251, 246, 194, 85, 41, 159, 223, 33, 44, 111, 9, 162, 193, 137, 130, 157, 35, 144, 34, 45, 57, 99, 246, 210, 113, 197, 48, 214, 172, 235, 251, 152, 221, 33, 99, 228, 179, 70, 5, 100, 163, 41, 246, 202, 7, 66, 252, 90, 24, 115, 147, 193, 55, 135, 20, 149, 190, 62, 1, 149, 7, 228, 87, 215, 97, 219, 199, 241, 129, 242, 176, 134, 83, 136, 215, 160, 33, 32, 88, 44, 18, 42, 60, 98, 224, 43, 172, 146, 247, 115, 253, 209, 133, 255, 59, 74, 136, 176, 255, 126, 254, 67, 13, 186, 14, 192, 130, 114, 103, 11, 201, 254, 28, 127, 94, 181, 139, 30, 143, 167, 235, 222, 205, 142, 83, 103, 132, 14, 210, 54, 19, 88, 69, 174, 239, 69, 73, 136, 8, 247, 58, 52, 137, 111, 8] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [44, 243, 242, 199, 46, 70, 189, 209, 144, 87, 246, 220, 55, 209, 236, 17, 159, 221, 45, 17, 233, 174, 83, 159, 78, 53, 38, 231, 203, 150, 198, 2, 63, 254, 36, 45, 193, 220, 169, 204, 17, 141, 239, 230, 54, 222, 213, 73, 131, 210, 1, 124, 225, 85, 146, 180, 132, 32, 4, 28, 189, 62, 102, 167, 90, 86, 92, 200, 104, 143, 181, 2, 57, 86, 207, 166, 220, 232, 194, 210, 208, 169, 47, 77, 114, 251, 58, 191, 53, 127, 116, 221, 237, 8, 174, 20, 66, 14, 227, 55, 107, 135, 181, 135, 212, 82, 86, 13, 67, 208, 100, 251, 246, 194, 85, 41, 159, 223, 33, 44, 111, 9, 162, 193, 137, 130, 157, 35, 144, 34, 45, 57, 99, 246, 210, 113, 197, 48, 214, 172, 235, 251, 152, 221, 33, 99, 228, 179, 70, 5, 100, 163, 41, 246, 202, 7, 66, 252, 90, 24, 115, 147, 193, 55, 135, 20, 149, 190, 62, 1, 149, 7, 228, 87, 215, 97, 219, 199, 241, 129, 242, 176, 134, 83, 136, 215, 160, 33, 32, 88, 44, 18, 42, 60, 98, 224, 43, 172, 146, 247, 115, 253, 209, 133, 255, 59, 74, 136, 176, 255, 126, 254, 67, 13, 186, 14, 192, 130, 114, 103, 11, 201, 254, 28, 127, 94, 181, 139, 30, 143, 167, 235, 222, 205, 142, 83, 103, 132, 14, 210, 54, 19, 88, 69, 174, 239, 69, 73, 136, 8, 247, 58, 52, 137, 111, 8] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [44, 243, 242, 199, 46, 70, 189, 209, 144, 87, 246, 220, 55, 209, 236, 17, 159, 221, 45, 17, 233, 174, 83, 159, 78, 53, 38, 231, 203, 150, 198, 2, 63, 254, 36, 45, 193, 220, 169, 204, 17, 141, 239, 230, 54, 222, 213, 73, 131, 210, 1, 124, 225, 85, 146, 180, 132, 32, 4, 28, 189, 62, 102, 167, 90, 86, 92, 200, 104, 143, 181, 2, 57, 86, 207, 166, 220, 232, 194, 210, 208, 169, 47, 77, 114, 251, 58, 191, 53, 127, 116, 221, 237, 8, 174, 20, 66, 14, 227, 55, 107, 135, 181, 135, 212, 82, 86, 13, 67, 208, 100, 251, 246, 194, 85, 41, 159, 223, 33, 44, 111, 9, 162, 193, 137, 130, 157, 35, 144, 34, 45, 57, 99, 246, 210, 113, 197, 48, 214, 172, 235, 251, 152, 221, 33, 99, 228, 179, 70, 5, 100, 163, 41, 246, 202, 7, 66, 252, 90, 24, 115, 147, 193, 55, 135, 20, 149, 190, 62, 1, 149, 7, 228, 87, 215, 97, 219, 199, 241, 129, 242, 176, 134, 83, 136, 215, 160, 33, 32, 88, 44, 18, 42, 60, 98, 224, 43, 172, 146, 247, 115, 253, 209, 133, 255, 59, 74, 136, 176, 255, 126, 254, 67, 13, 186, 14, 192, 130, 114, 103, 11, 201, 254, 28, 127, 94, 181, 139, 30, 143, 167, 235, 222, 205, 142, 83, 103, 132, 14, 210, 54, 19, 88, 69, 174, 239, 69, 73, 136, 8, 247, 58, 52, 137, 111, 8] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "5EnjcxSd41b4dxfx9ULuMCaMmKqPpRnCF999CDk4B7qj", recipient: "5EnjcxSd41b4dxfx9ULuMCaMmKqPpRnCF999CDk4B7qj", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "5EnjcxSd41b4dxfx9ULuMCaMmKqPpRnCF999CDk4B7qj", recipient: "5EnjcxSd41b4dxfx9ULuMCaMmKqPpRnCF999CDk4B7qj", amount: 0, nonce: 1 }], programs: [], timestamp: 1728959870, batch_id: 26 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "5EnjcxSd41b4dxfx9ULuMCaMmKqPpRnCF999CDk4B7qj", recipient: "5EnjcxSd41b4dxfx9ULuMCaMmKqPpRnCF999CDk4B7qj", amount: 0, nonce: 1 }], programs: [], timestamp: 1728959870, batch_id: 26 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (9973509152806526508203301253034364070910094230060178255854287244169730863431, 11585376067745026942532461849734905729484724901638899793823617941097746352849), b: (QuadExtField(19635195978163177599058135204477076759827471638606397684430656948681699353789 + 18757022983677915902297386645279967971674360371289176273213911245489321555391 * u), QuadExtField(13216276344080096943342380777527961541077354210059154131273829932121066345078 + 17882987087788538950570718803584731294394712557106181540876373662484281566577 * u)), c: (13144762602836181797489728562942005926211042927442414487364385100708241475542, 4646325012309186117910851798297035578790111212840290857238279422028377542802) }
Serialized proof bytes: [71, 49, 148, 231, 247, 77, 235, 232, 83, 207, 55, 176, 57, 76, 94, 113, 50, 157, 76, 175, 66, 189, 95, 140, 168, 6, 110, 239, 94, 206, 12, 22, 209, 74, 101, 26, 103, 228, 100, 80, 91, 242, 117, 116, 195, 96, 56, 15, 212, 251, 244, 37, 104, 70, 173, 77, 3, 142, 96, 175, 41, 23, 157, 153, 189, 228, 209, 194, 219, 9, 110, 190, 2, 184, 128, 122, 45, 129, 35, 95, 87, 90, 200, 194, 35, 58, 76, 213, 224, 53, 235, 235, 136, 32, 105, 43, 191, 53, 4, 213, 185, 172, 175, 24, 104, 65, 72, 68, 239, 208, 49, 181, 227, 48, 248, 144, 155, 29, 164, 198, 181, 136, 73, 50, 74, 25, 120, 41, 118, 146, 92, 47, 253, 15, 99, 117, 29, 214, 22, 187, 129, 239, 21, 127, 151, 14, 95, 168, 99, 48, 16, 55, 219, 43, 229, 11, 183, 37, 56, 29, 113, 37, 46, 66, 135, 73, 72, 50, 246, 178, 240, 24, 105, 81, 216, 153, 188, 22, 202, 5, 119, 186, 68, 13, 104, 208, 164, 252, 120, 105, 137, 167, 214, 7, 12, 248, 110, 247, 83, 38, 43, 200, 74, 250, 123, 130, 107, 58, 121, 229, 199, 30, 205, 250, 223, 190, 157, 46, 41, 245, 6, 172, 15, 29, 146, 208, 116, 62, 3, 172, 123, 36, 4, 242, 222, 133, 110, 158, 120, 105, 213, 41, 244, 179, 20, 21, 58, 80, 64, 58, 51, 35, 13, 186, 69, 10]
Proof generated: Proof { data: [71, 49, 148, 231, 247, 77, 235, 232, 83, 207, 55, 176, 57, 76, 94, 113, 50, 157, 76, 175, 66, 189, 95, 140, 168, 6, 110, 239, 94, 206, 12, 22, 209, 74, 101, 26, 103, 228, 100, 80, 91, 242, 117, 116, 195, 96, 56, 15, 212, 251, 244, 37, 104, 70, 173, 77, 3, 142, 96, 175, 41, 23, 157, 153, 189, 228, 209, 194, 219, 9, 110, 190, 2, 184, 128, 122, 45, 129, 35, 95, 87, 90, 200, 194, 35, 58, 76, 213, 224, 53, 235, 235, 136, 32, 105, 43, 191, 53, 4, 213, 185, 172, 175, 24, 104, 65, 72, 68, 239, 208, 49, 181, 227, 48, 248, 144, 155, 29, 164, 198, 181, 136, 73, 50, 74, 25, 120, 41, 118, 146, 92, 47, 253, 15, 99, 117, 29, 214, 22, 187, 129, 239, 21, 127, 151, 14, 95, 168, 99, 48, 16, 55, 219, 43, 229, 11, 183, 37, 56, 29, 113, 37, 46, 66, 135, 73, 72, 50, 246, 178, 240, 24, 105, 81, 216, 153, 188, 22, 202, 5, 119, 186, 68, 13, 104, 208, 164, 252, 120, 105, 137, 167, 214, 7, 12, 248, 110, 247, 83, 38, 43, 200, 74, 250, 123, 130, 107, 58, 121, 229, 199, 30, 205, 250, 223, 190, 157, 46, 41, 245, 6, 172, 15, 29, 146, 208, 116, 62, 3, 172, 123, 36, 4, 242, 222, 133, 110, 158, 120, 105, 213, 41, 244, 179, 20, 21, 58, 80, 64, 58, 51, 35, 13, 186, 69, 10] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [71, 49, 148, 231, 247, 77, 235, 232, 83, 207, 55, 176, 57, 76, 94, 113, 50, 157, 76, 175, 66, 189, 95, 140, 168, 6, 110, 239, 94, 206, 12, 22, 209, 74, 101, 26, 103, 228, 100, 80, 91, 242, 117, 116, 195, 96, 56, 15, 212, 251, 244, 37, 104, 70, 173, 77, 3, 142, 96, 175, 41, 23, 157, 153, 189, 228, 209, 194, 219, 9, 110, 190, 2, 184, 128, 122, 45, 129, 35, 95, 87, 90, 200, 194, 35, 58, 76, 213, 224, 53, 235, 235, 136, 32, 105, 43, 191, 53, 4, 213, 185, 172, 175, 24, 104, 65, 72, 68, 239, 208, 49, 181, 227, 48, 248, 144, 155, 29, 164, 198, 181, 136, 73, 50, 74, 25, 120, 41, 118, 146, 92, 47, 253, 15, 99, 117, 29, 214, 22, 187, 129, 239, 21, 127, 151, 14, 95, 168, 99, 48, 16, 55, 219, 43, 229, 11, 183, 37, 56, 29, 113, 37, 46, 66, 135, 73, 72, 50, 246, 178, 240, 24, 105, 81, 216, 153, 188, 22, 202, 5, 119, 186, 68, 13, 104, 208, 164, 252, 120, 105, 137, 167, 214, 7, 12, 248, 110, 247, 83, 38, 43, 200, 74, 250, 123, 130, 107, 58, 121, 229, 199, 30, 205, 250, 223, 190, 157, 46, 41, 245, 6, 172, 15, 29, 146, 208, 116, 62, 3, 172, 123, 36, 4, 242, 222, 133, 110, 158, 120, 105, 213, 41, 244, 179, 20, 21, 58, 80, 64, 58, 51, 35, 13, 186, 69, 10] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [71, 49, 148, 231, 247, 77, 235, 232, 83, 207, 55, 176, 57, 76, 94, 113, 50, 157, 76, 175, 66, 189, 95, 140, 168, 6, 110, 239, 94, 206, 12, 22, 209, 74, 101, 26, 103, 228, 100, 80, 91, 242, 117, 116, 195, 96, 56, 15, 212, 251, 244, 37, 104, 70, 173, 77, 3, 142, 96, 175, 41, 23, 157, 153, 189, 228, 209, 194, 219, 9, 110, 190, 2, 184, 128, 122, 45, 129, 35, 95, 87, 90, 200, 194, 35, 58, 76, 213, 224, 53, 235, 235, 136, 32, 105, 43, 191, 53, 4, 213, 185, 172, 175, 24, 104, 65, 72, 68, 239, 208, 49, 181, 227, 48, 248, 144, 155, 29, 164, 198, 181, 136, 73, 50, 74, 25, 120, 41, 118, 146, 92, 47, 253, 15, 99, 117, 29, 214, 22, 187, 129, 239, 21, 127, 151, 14, 95, 168, 99, 48, 16, 55, 219, 43, 229, 11, 183, 37, 56, 29, 113, 37, 46, 66, 135, 73, 72, 50, 246, 178, 240, 24, 105, 81, 216, 153, 188, 22, 202, 5, 119, 186, 68, 13, 104, 208, 164, 252, 120, 105, 137, 167, 214, 7, 12, 248, 110, 247, 83, 38, 43, 200, 74, 250, 123, 130, 107, 58, 121, 229, 199, 30, 205, 250, 223, 190, 157, 46, 41, 245, 6, 172, 15, 29, 146, 208, 116, 62, 3, 172, 123, 36, 4, 242, 222, 133, 110, 158, 120, 105, 213, 41, 244, 179, 20, 21, 58, 80, 64, 58, 51, 35, 13, 186, 69, 10] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "5FBQCLMof1NsjQi9S89XQr2eUtdeFoxyjxARWm9NhcBy", recipient: "5FBQCLMof1NsjQi9S89XQr2eUtdeFoxyjxARWm9NhcBy", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "5FBQCLMof1NsjQi9S89XQr2eUtdeFoxyjxARWm9NhcBy", recipient: "5FBQCLMof1NsjQi9S89XQr2eUtdeFoxyjxARWm9NhcBy", amount: 0, nonce: 1 }], programs: [], timestamp: 1728964667, batch_id: 28 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "5FBQCLMof1NsjQi9S89XQr2eUtdeFoxyjxARWm9NhcBy", recipient: "5FBQCLMof1NsjQi9S89XQr2eUtdeFoxyjxARWm9NhcBy", amount: 0, nonce: 1 }], programs: [], timestamp: 1728964667, batch_id: 28 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (21672986276217497130792649804381481501263972993165186643241841316671128882963, 765425495570571067862317832058075690741635633908286353483297656492210239438), b: (QuadExtField(4838950789663983436692975097862232303582331328063591673069849579848145256148 + 4125287008197240221831779328561644738607382583179596476932163433804510803624 * u), QuadExtField(1461495388839691358668781064349555117627654251850935518077754966546785880467 + 2934922938428268185362563855060889100749120138062099174279421777681930789020 * u)), c: (14586751394358709191038409515610582285235120469033016566979809765217629590649, 20182864446979933283516744121884628220931004743674443357918136414102826810173) }
Serialized proof bytes: [19, 79, 68, 145, 159, 177, 92, 83, 71, 150, 145, 39, 217, 8, 132, 216, 193, 96, 51, 159, 59, 148, 159, 205, 225, 225, 190, 254, 187, 121, 234, 47, 206, 183, 147, 117, 164, 77, 60, 26, 216, 69, 186, 88, 64, 152, 38, 243, 25, 107, 239, 159, 95, 67, 191, 195, 240, 169, 133, 143, 41, 55, 177, 1, 212, 62, 155, 8, 125, 245, 60, 213, 198, 184, 255, 172, 44, 96, 13, 224, 93, 188, 142, 48, 18, 129, 208, 39, 127, 248, 166, 81, 196, 191, 178, 10, 168, 54, 184, 11, 74, 5, 223, 185, 210, 100, 83, 188, 242, 68, 111, 246, 141, 198, 104, 54, 119, 104, 120, 193, 174, 38, 10, 113, 103, 212, 30, 9, 147, 201, 77, 238, 134, 99, 127, 229, 149, 115, 11, 208, 208, 64, 77, 118, 123, 113, 174, 157, 138, 0, 149, 34, 237, 196, 215, 218, 84, 45, 59, 3, 156, 32, 104, 219, 69, 90, 100, 107, 231, 175, 246, 174, 251, 225, 123, 3, 69, 53, 153, 139, 86, 243, 8, 152, 200, 22, 110, 38, 134, 27, 125, 6, 121, 84, 115, 101, 107, 139, 42, 30, 172, 37, 237, 102, 194, 212, 249, 171, 114, 167, 122, 102, 170, 109, 207, 32, 228, 119, 176, 231, 7, 207, 63, 32, 61, 123, 16, 62, 217, 236, 75, 174, 11, 160, 134, 150, 77, 195, 188, 1, 59, 123, 223, 44, 140, 234, 51, 160, 196, 234, 200, 115, 177, 24, 159, 172]
Proof generated: Proof { data: [19, 79, 68, 145, 159, 177, 92, 83, 71, 150, 145, 39, 217, 8, 132, 216, 193, 96, 51, 159, 59, 148, 159, 205, 225, 225, 190, 254, 187, 121, 234, 47, 206, 183, 147, 117, 164, 77, 60, 26, 216, 69, 186, 88, 64, 152, 38, 243, 25, 107, 239, 159, 95, 67, 191, 195, 240, 169, 133, 143, 41, 55, 177, 1, 212, 62, 155, 8, 125, 245, 60, 213, 198, 184, 255, 172, 44, 96, 13, 224, 93, 188, 142, 48, 18, 129, 208, 39, 127, 248, 166, 81, 196, 191, 178, 10, 168, 54, 184, 11, 74, 5, 223, 185, 210, 100, 83, 188, 242, 68, 111, 246, 141, 198, 104, 54, 119, 104, 120, 193, 174, 38, 10, 113, 103, 212, 30, 9, 147, 201, 77, 238, 134, 99, 127, 229, 149, 115, 11, 208, 208, 64, 77, 118, 123, 113, 174, 157, 138, 0, 149, 34, 237, 196, 215, 218, 84, 45, 59, 3, 156, 32, 104, 219, 69, 90, 100, 107, 231, 175, 246, 174, 251, 225, 123, 3, 69, 53, 153, 139, 86, 243, 8, 152, 200, 22, 110, 38, 134, 27, 125, 6, 121, 84, 115, 101, 107, 139, 42, 30, 172, 37, 237, 102, 194, 212, 249, 171, 114, 167, 122, 102, 170, 109, 207, 32, 228, 119, 176, 231, 7, 207, 63, 32, 61, 123, 16, 62, 217, 236, 75, 174, 11, 160, 134, 150, 77, 195, 188, 1, 59, 123, 223, 44, 140, 234, 51, 160, 196, 234, 200, 115, 177, 24, 159, 172] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [19, 79, 68, 145, 159, 177, 92, 83, 71, 150, 145, 39, 217, 8, 132, 216, 193, 96, 51, 159, 59, 148, 159, 205, 225, 225, 190, 254, 187, 121, 234, 47, 206, 183, 147, 117, 164, 77, 60, 26, 216, 69, 186, 88, 64, 152, 38, 243, 25, 107, 239, 159, 95, 67, 191, 195, 240, 169, 133, 143, 41, 55, 177, 1, 212, 62, 155, 8, 125, 245, 60, 213, 198, 184, 255, 172, 44, 96, 13, 224, 93, 188, 142, 48, 18, 129, 208, 39, 127, 248, 166, 81, 196, 191, 178, 10, 168, 54, 184, 11, 74, 5, 223, 185, 210, 100, 83, 188, 242, 68, 111, 246, 141, 198, 104, 54, 119, 104, 120, 193, 174, 38, 10, 113, 103, 212, 30, 9, 147, 201, 77, 238, 134, 99, 127, 229, 149, 115, 11, 208, 208, 64, 77, 118, 123, 113, 174, 157, 138, 0, 149, 34, 237, 196, 215, 218, 84, 45, 59, 3, 156, 32, 104, 219, 69, 90, 100, 107, 231, 175, 246, 174, 251, 225, 123, 3, 69, 53, 153, 139, 86, 243, 8, 152, 200, 22, 110, 38, 134, 27, 125, 6, 121, 84, 115, 101, 107, 139, 42, 30, 172, 37, 237, 102, 194, 212, 249, 171, 114, 167, 122, 102, 170, 109, 207, 32, 228, 119, 176, 231, 7, 207, 63, 32, 61, 123, 16, 62, 217, 236, 75, 174, 11, 160, 134, 150, 77, 195, 188, 1, 59, 123, 223, 44, 140, 234, 51, 160, 196, 234, 200, 115, 177, 24, 159, 172] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [19, 79, 68, 145, 159, 177, 92, 83, 71, 150, 145, 39, 217, 8, 132, 216, 193, 96, 51, 159, 59, 148, 159, 205, 225, 225, 190, 254, 187, 121, 234, 47, 206, 183, 147, 117, 164, 77, 60, 26, 216, 69, 186, 88, 64, 152, 38, 243, 25, 107, 239, 159, 95, 67, 191, 195, 240, 169, 133, 143, 41, 55, 177, 1, 212, 62, 155, 8, 125, 245, 60, 213, 198, 184, 255, 172, 44, 96, 13, 224, 93, 188, 142, 48, 18, 129, 208, 39, 127, 248, 166, 81, 196, 191, 178, 10, 168, 54, 184, 11, 74, 5, 223, 185, 210, 100, 83, 188, 242, 68, 111, 246, 141, 198, 104, 54, 119, 104, 120, 193, 174, 38, 10, 113, 103, 212, 30, 9, 147, 201, 77, 238, 134, 99, 127, 229, 149, 115, 11, 208, 208, 64, 77, 118, 123, 113, 174, 157, 138, 0, 149, 34, 237, 196, 215, 218, 84, 45, 59, 3, 156, 32, 104, 219, 69, 90, 100, 107, 231, 175, 246, 174, 251, 225, 123, 3, 69, 53, 153, 139, 86, 243, 8, 152, 200, 22, 110, 38, 134, 27, 125, 6, 121, 84, 115, 101, 107, 139, 42, 30, 172, 37, 237, 102, 194, 212, 249, 171, 114, 167, 122, 102, 170, 109, 207, 32, 228, 119, 176, 231, 7, 207, 63, 32, 61, 123, 16, 62, 217, 236, 75, 174, 11, 160, 134, 150, 77, 195, 188, 1, 59, 123, 223, 44, 140, 234, 51, 160, 196, 234, 200, 115, 177, 24, 159, 172] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "DMm9MNKxcWK9JD5SH1tvYZUUThzzY7wcnUmxVipoc6gB", recipient: "DMm9MNKxcWK9JD5SH1tvYZUUThzzY7wcnUmxVipoc6gB", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "DMm9MNKxcWK9JD5SH1tvYZUUThzzY7wcnUmxVipoc6gB", recipient: "DMm9MNKxcWK9JD5SH1tvYZUUThzzY7wcnUmxVipoc6gB", amount: 0, nonce: 1 }], programs: [], timestamp: 1728964678, batch_id: 30 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "DMm9MNKxcWK9JD5SH1tvYZUUThzzY7wcnUmxVipoc6gB", recipient: "DMm9MNKxcWK9JD5SH1tvYZUUThzzY7wcnUmxVipoc6gB", amount: 0, nonce: 1 }], programs: [], timestamp: 1728964678, batch_id: 30 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (1888226478721957767957207930139156589172553607741447826166707397210202380835, 21155604381422749331020519731407195016336632418183677299067441602168832146697), b: (QuadExtField(5112890576629292681187702921501829822494583508088103759806985024688928676108 + 11145498502827002333509172777354346251231161509349607198938070464183809945815 * u), QuadExtField(21164442144322627583025542123467691871966642801282420869231990382631742770298 + 21421492071185254602377097865069449934639230139527363817303783109505323901191 * u)), c: (3440641577456142113115924050682082370795571133498584019100667307491260071702, 3184165434635086223573797108366961804384870404032664489944869427446883498362) }
Serialized proof bytes: [35, 26, 79, 7, 114, 212, 79, 251, 240, 40, 58, 109, 235, 64, 52, 206, 64, 66, 225, 160, 249, 186, 166, 124, 235, 180, 10, 176, 196, 178, 44, 4, 9, 61, 84, 38, 22, 184, 65, 234, 31, 95, 18, 3, 184, 113, 209, 127, 179, 54, 227, 12, 25, 188, 127, 73, 188, 227, 74, 238, 210, 165, 197, 174, 12, 89, 205, 238, 12, 15, 208, 104, 173, 99, 4, 246, 25, 166, 232, 211, 82, 8, 172, 113, 249, 178, 55, 131, 21, 83, 10, 191, 35, 203, 77, 11, 215, 48, 137, 16, 143, 241, 98, 214, 200, 169, 1, 243, 125, 161, 245, 147, 253, 144, 180, 79, 192, 236, 115, 133, 174, 179, 219, 253, 235, 32, 164, 24, 122, 140, 26, 81, 100, 74, 241, 214, 143, 167, 112, 232, 116, 81, 156, 132, 240, 96, 153, 172, 211, 209, 161, 21, 105, 25, 161, 198, 85, 166, 202, 46, 7, 33, 12, 108, 130, 44, 230, 206, 139, 83, 185, 8, 240, 204, 139, 100, 6, 234, 122, 242, 162, 116, 179, 43, 29, 43, 50, 121, 133, 34, 92, 175, 22, 127, 115, 117, 193, 230, 141, 243, 178, 40, 184, 179, 67, 229, 59, 188, 41, 246, 28, 206, 156, 25, 146, 231, 28, 215, 156, 3, 137, 85, 155, 7, 122, 57, 215, 41, 183, 200, 29, 65, 37, 101, 126, 20, 101, 238, 112, 199, 118, 204, 79, 207, 230, 14, 132, 46, 106, 190, 72, 38, 124, 44, 10, 7]
Proof generated: Proof { data: [35, 26, 79, 7, 114, 212, 79, 251, 240, 40, 58, 109, 235, 64, 52, 206, 64, 66, 225, 160, 249, 186, 166, 124, 235, 180, 10, 176, 196, 178, 44, 4, 9, 61, 84, 38, 22, 184, 65, 234, 31, 95, 18, 3, 184, 113, 209, 127, 179, 54, 227, 12, 25, 188, 127, 73, 188, 227, 74, 238, 210, 165, 197, 174, 12, 89, 205, 238, 12, 15, 208, 104, 173, 99, 4, 246, 25, 166, 232, 211, 82, 8, 172, 113, 249, 178, 55, 131, 21, 83, 10, 191, 35, 203, 77, 11, 215, 48, 137, 16, 143, 241, 98, 214, 200, 169, 1, 243, 125, 161, 245, 147, 253, 144, 180, 79, 192, 236, 115, 133, 174, 179, 219, 253, 235, 32, 164, 24, 122, 140, 26, 81, 100, 74, 241, 214, 143, 167, 112, 232, 116, 81, 156, 132, 240, 96, 153, 172, 211, 209, 161, 21, 105, 25, 161, 198, 85, 166, 202, 46, 7, 33, 12, 108, 130, 44, 230, 206, 139, 83, 185, 8, 240, 204, 139, 100, 6, 234, 122, 242, 162, 116, 179, 43, 29, 43, 50, 121, 133, 34, 92, 175, 22, 127, 115, 117, 193, 230, 141, 243, 178, 40, 184, 179, 67, 229, 59, 188, 41, 246, 28, 206, 156, 25, 146, 231, 28, 215, 156, 3, 137, 85, 155, 7, 122, 57, 215, 41, 183, 200, 29, 65, 37, 101, 126, 20, 101, 238, 112, 199, 118, 204, 79, 207, 230, 14, 132, 46, 106, 190, 72, 38, 124, 44, 10, 7] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [35, 26, 79, 7, 114, 212, 79, 251, 240, 40, 58, 109, 235, 64, 52, 206, 64, 66, 225, 160, 249, 186, 166, 124, 235, 180, 10, 176, 196, 178, 44, 4, 9, 61, 84, 38, 22, 184, 65, 234, 31, 95, 18, 3, 184, 113, 209, 127, 179, 54, 227, 12, 25, 188, 127, 73, 188, 227, 74, 238, 210, 165, 197, 174, 12, 89, 205, 238, 12, 15, 208, 104, 173, 99, 4, 246, 25, 166, 232, 211, 82, 8, 172, 113, 249, 178, 55, 131, 21, 83, 10, 191, 35, 203, 77, 11, 215, 48, 137, 16, 143, 241, 98, 214, 200, 169, 1, 243, 125, 161, 245, 147, 253, 144, 180, 79, 192, 236, 115, 133, 174, 179, 219, 253, 235, 32, 164, 24, 122, 140, 26, 81, 100, 74, 241, 214, 143, 167, 112, 232, 116, 81, 156, 132, 240, 96, 153, 172, 211, 209, 161, 21, 105, 25, 161, 198, 85, 166, 202, 46, 7, 33, 12, 108, 130, 44, 230, 206, 139, 83, 185, 8, 240, 204, 139, 100, 6, 234, 122, 242, 162, 116, 179, 43, 29, 43, 50, 121, 133, 34, 92, 175, 22, 127, 115, 117, 193, 230, 141, 243, 178, 40, 184, 179, 67, 229, 59, 188, 41, 246, 28, 206, 156, 25, 146, 231, 28, 215, 156, 3, 137, 85, 155, 7, 122, 57, 215, 41, 183, 200, 29, 65, 37, 101, 126, 20, 101, 238, 112, 199, 118, 204, 79, 207, 230, 14, 132, 46, 106, 190, 72, 38, 124, 44, 10, 7] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [35, 26, 79, 7, 114, 212, 79, 251, 240, 40, 58, 109, 235, 64, 52, 206, 64, 66, 225, 160, 249, 186, 166, 124, 235, 180, 10, 176, 196, 178, 44, 4, 9, 61, 84, 38, 22, 184, 65, 234, 31, 95, 18, 3, 184, 113, 209, 127, 179, 54, 227, 12, 25, 188, 127, 73, 188, 227, 74, 238, 210, 165, 197, 174, 12, 89, 205, 238, 12, 15, 208, 104, 173, 99, 4, 246, 25, 166, 232, 211, 82, 8, 172, 113, 249, 178, 55, 131, 21, 83, 10, 191, 35, 203, 77, 11, 215, 48, 137, 16, 143, 241, 98, 214, 200, 169, 1, 243, 125, 161, 245, 147, 253, 144, 180, 79, 192, 236, 115, 133, 174, 179, 219, 253, 235, 32, 164, 24, 122, 140, 26, 81, 100, 74, 241, 214, 143, 167, 112, 232, 116, 81, 156, 132, 240, 96, 153, 172, 211, 209, 161, 21, 105, 25, 161, 198, 85, 166, 202, 46, 7, 33, 12, 108, 130, 44, 230, 206, 139, 83, 185, 8, 240, 204, 139, 100, 6, 234, 122, 242, 162, 116, 179, 43, 29, 43, 50, 121, 133, 34, 92, 175, 22, 127, 115, 117, 193, 230, 141, 243, 178, 40, 184, 179, 67, 229, 59, 188, 41, 246, 28, 206, 156, 25, 146, 231, 28, 215, 156, 3, 137, 85, 155, 7, 122, 57, 215, 41, 183, 200, 29, 65, 37, 101, 126, 20, 101, 238, 112, 199, 118, 204, 79, 207, 230, 14, 132, 46, 106, 190, 72, 38, 124, 44, 10, 7] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969278, batch_id: 31 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969278, batch_id: 31 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (21257318778708821501480509283089123533688731398794600698504960458750565700165, 12154196209863041628438485738764435685880675629887461026711110543411517892584), b: (QuadExtField(10614549937509623017243100338278180086472892829464880265184490477876074198106 + 11154158072623640662401727771775398960980820480343868382225346401138071908815 * u), QuadExtField(15151795058783278428451341133653670030005237241893287807608033128655803683824 + 10522825031895382800806076966675087855021939258057235344179249158064603939504 * u)), c: (6336235417951274396982841779132157461297622871948185937368975890074371330543, 11616914492994267253362293470884452817766035544567885829218089097775451316997) }
Serialized proof bytes: [69, 82, 2, 14, 110, 92, 252, 33, 249, 26, 20, 10, 170, 240, 142, 167, 100, 57, 1, 138, 74, 97, 122, 105, 59, 10, 113, 156, 79, 55, 255, 46, 232, 167, 196, 47, 20, 236, 43, 253, 194, 144, 62, 104, 172, 123, 49, 190, 64, 242, 210, 74, 148, 163, 22, 245, 35, 241, 2, 98, 1, 8, 223, 154, 90, 52, 23, 137, 34, 164, 183, 132, 19, 24, 176, 160, 237, 18, 193, 221, 185, 117, 202, 193, 191, 50, 155, 58, 26, 129, 95, 38, 83, 159, 119, 23, 207, 49, 53, 254, 248, 6, 80, 191, 17, 165, 33, 182, 185, 189, 75, 95, 46, 253, 117, 73, 68, 219, 145, 43, 52, 230, 130, 73, 157, 7, 169, 24, 240, 147, 240, 159, 185, 210, 162, 126, 54, 191, 199, 245, 206, 61, 181, 209, 140, 113, 152, 137, 156, 244, 193, 77, 188, 145, 139, 66, 178, 156, 127, 33, 176, 66, 144, 178, 182, 30, 144, 107, 142, 214, 222, 179, 93, 106, 178, 20, 213, 40, 103, 112, 37, 128, 69, 114, 75, 190, 35, 79, 57, 181, 67, 23, 239, 145, 27, 215, 246, 255, 18, 184, 202, 46, 71, 137, 203, 224, 28, 227, 201, 235, 58, 238, 220, 119, 143, 73, 184, 45, 61, 216, 161, 46, 2, 14, 5, 163, 85, 76, 156, 101, 163, 151, 28, 100, 178, 38, 216, 151, 61, 21, 15, 58, 188, 63, 230, 143, 44, 188, 106, 8, 237, 228, 202, 240, 174, 153]
Proof generated: Proof { data: [69, 82, 2, 14, 110, 92, 252, 33, 249, 26, 20, 10, 170, 240, 142, 167, 100, 57, 1, 138, 74, 97, 122, 105, 59, 10, 113, 156, 79, 55, 255, 46, 232, 167, 196, 47, 20, 236, 43, 253, 194, 144, 62, 104, 172, 123, 49, 190, 64, 242, 210, 74, 148, 163, 22, 245, 35, 241, 2, 98, 1, 8, 223, 154, 90, 52, 23, 137, 34, 164, 183, 132, 19, 24, 176, 160, 237, 18, 193, 221, 185, 117, 202, 193, 191, 50, 155, 58, 26, 129, 95, 38, 83, 159, 119, 23, 207, 49, 53, 254, 248, 6, 80, 191, 17, 165, 33, 182, 185, 189, 75, 95, 46, 253, 117, 73, 68, 219, 145, 43, 52, 230, 130, 73, 157, 7, 169, 24, 240, 147, 240, 159, 185, 210, 162, 126, 54, 191, 199, 245, 206, 61, 181, 209, 140, 113, 152, 137, 156, 244, 193, 77, 188, 145, 139, 66, 178, 156, 127, 33, 176, 66, 144, 178, 182, 30, 144, 107, 142, 214, 222, 179, 93, 106, 178, 20, 213, 40, 103, 112, 37, 128, 69, 114, 75, 190, 35, 79, 57, 181, 67, 23, 239, 145, 27, 215, 246, 255, 18, 184, 202, 46, 71, 137, 203, 224, 28, 227, 201, 235, 58, 238, 220, 119, 143, 73, 184, 45, 61, 216, 161, 46, 2, 14, 5, 163, 85, 76, 156, 101, 163, 151, 28, 100, 178, 38, 216, 151, 61, 21, 15, 58, 188, 63, 230, 143, 44, 188, 106, 8, 237, 228, 202, 240, 174, 153] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [69, 82, 2, 14, 110, 92, 252, 33, 249, 26, 20, 10, 170, 240, 142, 167, 100, 57, 1, 138, 74, 97, 122, 105, 59, 10, 113, 156, 79, 55, 255, 46, 232, 167, 196, 47, 20, 236, 43, 253, 194, 144, 62, 104, 172, 123, 49, 190, 64, 242, 210, 74, 148, 163, 22, 245, 35, 241, 2, 98, 1, 8, 223, 154, 90, 52, 23, 137, 34, 164, 183, 132, 19, 24, 176, 160, 237, 18, 193, 221, 185, 117, 202, 193, 191, 50, 155, 58, 26, 129, 95, 38, 83, 159, 119, 23, 207, 49, 53, 254, 248, 6, 80, 191, 17, 165, 33, 182, 185, 189, 75, 95, 46, 253, 117, 73, 68, 219, 145, 43, 52, 230, 130, 73, 157, 7, 169, 24, 240, 147, 240, 159, 185, 210, 162, 126, 54, 191, 199, 245, 206, 61, 181, 209, 140, 113, 152, 137, 156, 244, 193, 77, 188, 145, 139, 66, 178, 156, 127, 33, 176, 66, 144, 178, 182, 30, 144, 107, 142, 214, 222, 179, 93, 106, 178, 20, 213, 40, 103, 112, 37, 128, 69, 114, 75, 190, 35, 79, 57, 181, 67, 23, 239, 145, 27, 215, 246, 255, 18, 184, 202, 46, 71, 137, 203, 224, 28, 227, 201, 235, 58, 238, 220, 119, 143, 73, 184, 45, 61, 216, 161, 46, 2, 14, 5, 163, 85, 76, 156, 101, 163, 151, 28, 100, 178, 38, 216, 151, 61, 21, 15, 58, 188, 63, 230, 143, 44, 188, 106, 8, 237, 228, 202, 240, 174, 153] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [69, 82, 2, 14, 110, 92, 252, 33, 249, 26, 20, 10, 170, 240, 142, 167, 100, 57, 1, 138, 74, 97, 122, 105, 59, 10, 113, 156, 79, 55, 255, 46, 232, 167, 196, 47, 20, 236, 43, 253, 194, 144, 62, 104, 172, 123, 49, 190, 64, 242, 210, 74, 148, 163, 22, 245, 35, 241, 2, 98, 1, 8, 223, 154, 90, 52, 23, 137, 34, 164, 183, 132, 19, 24, 176, 160, 237, 18, 193, 221, 185, 117, 202, 193, 191, 50, 155, 58, 26, 129, 95, 38, 83, 159, 119, 23, 207, 49, 53, 254, 248, 6, 80, 191, 17, 165, 33, 182, 185, 189, 75, 95, 46, 253, 117, 73, 68, 219, 145, 43, 52, 230, 130, 73, 157, 7, 169, 24, 240, 147, 240, 159, 185, 210, 162, 126, 54, 191, 199, 245, 206, 61, 181, 209, 140, 113, 152, 137, 156, 244, 193, 77, 188, 145, 139, 66, 178, 156, 127, 33, 176, 66, 144, 178, 182, 30, 144, 107, 142, 214, 222, 179, 93, 106, 178, 20, 213, 40, 103, 112, 37, 128, 69, 114, 75, 190, 35, 79, 57, 181, 67, 23, 239, 145, 27, 215, 246, 255, 18, 184, 202, 46, 71, 137, 203, 224, 28, 227, 201, 235, 58, 238, 220, 119, 143, 73, 184, 45, 61, 216, 161, 46, 2, 14, 5, 163, 85, 76, 156, 101, 163, 151, 28, 100, 178, 38, 216, 151, 61, 21, 15, 58, 188, 63, 230, 143, 44, 188, 106, 8, 237, 228, 202, 240, 174, 153] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969302, batch_id: 32 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969302, batch_id: 32 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (12102211472997066397358289012626735166041323991941572486826087462902849649491, 215826123814293869748303078244156410306261382209994403873050537546069310374), b: (QuadExtField(17727346849588205292772140539381983064730783154625080926255767238263456604520 + 20838450062808471165818327260172496486112781049148730021927052460683352854515 * u), QuadExtField(3647448305867336556367017663743637697152090958855066652539153682057089867760 + 8444522139489858278470487801001531932553654101822889163132354728838418743198 * u)), c: (7039995830927360757190378983651941521344970025725983957438349305204656721, 10218851653592726734119854635317602842745360370849219911742734659743915725072) }
Serialized proof bytes: [83, 187, 200, 247, 42, 171, 191, 168, 89, 186, 83, 10, 148, 103, 117, 168, 23, 45, 170, 150, 60, 226, 191, 26, 159, 233, 90, 83, 228, 155, 193, 26, 166, 251, 43, 181, 6, 120, 42, 137, 127, 45, 230, 252, 76, 101, 223, 114, 191, 105, 213, 88, 76, 83, 84, 41, 29, 190, 251, 219, 59, 39, 122, 0, 104, 33, 199, 242, 230, 214, 74, 72, 109, 1, 89, 54, 76, 68, 59, 158, 228, 111, 216, 137, 108, 103, 21, 226, 10, 170, 216, 178, 159, 82, 49, 39, 243, 207, 39, 140, 168, 12, 63, 38, 35, 254, 131, 252, 95, 10, 58, 23, 196, 248, 109, 46, 25, 33, 27, 182, 103, 198, 7, 112, 15, 37, 18, 46, 240, 95, 61, 142, 6, 90, 27, 224, 57, 122, 165, 122, 119, 144, 220, 43, 242, 84, 70, 128, 205, 222, 80, 13, 102, 37, 133, 231, 240, 97, 16, 8, 158, 63, 249, 29, 235, 2, 135, 70, 190, 235, 111, 28, 19, 2, 151, 174, 152, 205, 116, 68, 121, 149, 142, 147, 83, 44, 24, 152, 30, 110, 171, 18, 81, 74, 119, 150, 195, 30, 76, 160, 141, 53, 195, 195, 120, 147, 252, 183, 43, 200, 19, 202, 90, 116, 138, 141, 248, 169, 87, 245, 7, 252, 3, 0, 16, 81, 24, 21, 118, 35, 13, 2, 203, 146, 143, 144, 93, 226, 11, 223, 25, 232, 255, 251, 89, 99, 174, 222, 249, 44, 143, 16, 66, 170, 151, 22]
Proof generated: Proof { data: [83, 187, 200, 247, 42, 171, 191, 168, 89, 186, 83, 10, 148, 103, 117, 168, 23, 45, 170, 150, 60, 226, 191, 26, 159, 233, 90, 83, 228, 155, 193, 26, 166, 251, 43, 181, 6, 120, 42, 137, 127, 45, 230, 252, 76, 101, 223, 114, 191, 105, 213, 88, 76, 83, 84, 41, 29, 190, 251, 219, 59, 39, 122, 0, 104, 33, 199, 242, 230, 214, 74, 72, 109, 1, 89, 54, 76, 68, 59, 158, 228, 111, 216, 137, 108, 103, 21, 226, 10, 170, 216, 178, 159, 82, 49, 39, 243, 207, 39, 140, 168, 12, 63, 38, 35, 254, 131, 252, 95, 10, 58, 23, 196, 248, 109, 46, 25, 33, 27, 182, 103, 198, 7, 112, 15, 37, 18, 46, 240, 95, 61, 142, 6, 90, 27, 224, 57, 122, 165, 122, 119, 144, 220, 43, 242, 84, 70, 128, 205, 222, 80, 13, 102, 37, 133, 231, 240, 97, 16, 8, 158, 63, 249, 29, 235, 2, 135, 70, 190, 235, 111, 28, 19, 2, 151, 174, 152, 205, 116, 68, 121, 149, 142, 147, 83, 44, 24, 152, 30, 110, 171, 18, 81, 74, 119, 150, 195, 30, 76, 160, 141, 53, 195, 195, 120, 147, 252, 183, 43, 200, 19, 202, 90, 116, 138, 141, 248, 169, 87, 245, 7, 252, 3, 0, 16, 81, 24, 21, 118, 35, 13, 2, 203, 146, 143, 144, 93, 226, 11, 223, 25, 232, 255, 251, 89, 99, 174, 222, 249, 44, 143, 16, 66, 170, 151, 22] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [83, 187, 200, 247, 42, 171, 191, 168, 89, 186, 83, 10, 148, 103, 117, 168, 23, 45, 170, 150, 60, 226, 191, 26, 159, 233, 90, 83, 228, 155, 193, 26, 166, 251, 43, 181, 6, 120, 42, 137, 127, 45, 230, 252, 76, 101, 223, 114, 191, 105, 213, 88, 76, 83, 84, 41, 29, 190, 251, 219, 59, 39, 122, 0, 104, 33, 199, 242, 230, 214, 74, 72, 109, 1, 89, 54, 76, 68, 59, 158, 228, 111, 216, 137, 108, 103, 21, 226, 10, 170, 216, 178, 159, 82, 49, 39, 243, 207, 39, 140, 168, 12, 63, 38, 35, 254, 131, 252, 95, 10, 58, 23, 196, 248, 109, 46, 25, 33, 27, 182, 103, 198, 7, 112, 15, 37, 18, 46, 240, 95, 61, 142, 6, 90, 27, 224, 57, 122, 165, 122, 119, 144, 220, 43, 242, 84, 70, 128, 205, 222, 80, 13, 102, 37, 133, 231, 240, 97, 16, 8, 158, 63, 249, 29, 235, 2, 135, 70, 190, 235, 111, 28, 19, 2, 151, 174, 152, 205, 116, 68, 121, 149, 142, 147, 83, 44, 24, 152, 30, 110, 171, 18, 81, 74, 119, 150, 195, 30, 76, 160, 141, 53, 195, 195, 120, 147, 252, 183, 43, 200, 19, 202, 90, 116, 138, 141, 248, 169, 87, 245, 7, 252, 3, 0, 16, 81, 24, 21, 118, 35, 13, 2, 203, 146, 143, 144, 93, 226, 11, 223, 25, 232, 255, 251, 89, 99, 174, 222, 249, 44, 143, 16, 66, 170, 151, 22] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [83, 187, 200, 247, 42, 171, 191, 168, 89, 186, 83, 10, 148, 103, 117, 168, 23, 45, 170, 150, 60, 226, 191, 26, 159, 233, 90, 83, 228, 155, 193, 26, 166, 251, 43, 181, 6, 120, 42, 137, 127, 45, 230, 252, 76, 101, 223, 114, 191, 105, 213, 88, 76, 83, 84, 41, 29, 190, 251, 219, 59, 39, 122, 0, 104, 33, 199, 242, 230, 214, 74, 72, 109, 1, 89, 54, 76, 68, 59, 158, 228, 111, 216, 137, 108, 103, 21, 226, 10, 170, 216, 178, 159, 82, 49, 39, 243, 207, 39, 140, 168, 12, 63, 38, 35, 254, 131, 252, 95, 10, 58, 23, 196, 248, 109, 46, 25, 33, 27, 182, 103, 198, 7, 112, 15, 37, 18, 46, 240, 95, 61, 142, 6, 90, 27, 224, 57, 122, 165, 122, 119, 144, 220, 43, 242, 84, 70, 128, 205, 222, 80, 13, 102, 37, 133, 231, 240, 97, 16, 8, 158, 63, 249, 29, 235, 2, 135, 70, 190, 235, 111, 28, 19, 2, 151, 174, 152, 205, 116, 68, 121, 149, 142, 147, 83, 44, 24, 152, 30, 110, 171, 18, 81, 74, 119, 150, 195, 30, 76, 160, 141, 53, 195, 195, 120, 147, 252, 183, 43, 200, 19, 202, 90, 116, 138, 141, 248, 169, 87, 245, 7, 252, 3, 0, 16, 81, 24, 21, 118, 35, 13, 2, 203, 146, 143, 144, 93, 226, 11, 223, 25, 232, 255, 251, 89, 99, 174, 222, 249, 44, 143, 16, 66, 170, 151, 22] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969393, batch_id: 33 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969393, batch_id: 33 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (10591568957904285277469638752921700888472855584147295029978989979277187758097, 21756326976389626483667672379303587571149733399742428924310691523506278986218), b: (QuadExtField(2623777701903925421951001293498619662509337248614756178365040284634654053976 + 12170768883428575894430524636278876452249154965701654226800133701950906698033 * u), QuadExtField(4327160019197201823436086693460614526337832625144851603571639246046762409797 + 21051139266429283841255708407859477153087208293576917627127355718235812820487 * u)), c: (1607685850275558235614614107966004083485235607065524110270302004235637084388, 11182802572374659763868662984235440883305893933106682638731445692156090375350) }
Serialized proof bytes: [17, 56, 238, 194, 189, 189, 75, 13, 69, 185, 86, 217, 204, 169, 244, 56, 117, 239, 230, 33, 160, 66, 9, 91, 229, 169, 170, 61, 151, 157, 106, 23, 234, 113, 47, 170, 16, 182, 55, 55, 172, 189, 155, 213, 236, 209, 6, 71, 46, 88, 135, 202, 203, 59, 51, 83, 114, 138, 53, 95, 10, 165, 25, 176, 88, 22, 74, 195, 31, 1, 114, 164, 15, 35, 156, 196, 255, 63, 201, 22, 46, 81, 107, 179, 227, 99, 61, 253, 109, 32, 62, 230, 107, 1, 205, 5, 49, 9, 82, 193, 192, 1, 254, 215, 59, 231, 232, 69, 81, 39, 37, 204, 191, 4, 21, 205, 231, 16, 3, 140, 169, 213, 148, 2, 60, 105, 232, 26, 69, 159, 68, 55, 85, 111, 56, 102, 121, 167, 82, 137, 231, 212, 95, 167, 165, 208, 197, 1, 169, 157, 218, 162, 209, 193, 7, 149, 245, 21, 145, 9, 7, 118, 60, 15, 1, 85, 89, 16, 228, 167, 161, 181, 133, 88, 163, 74, 60, 119, 163, 153, 50, 238, 128, 23, 15, 178, 205, 117, 200, 133, 138, 174, 228, 208, 7, 250, 8, 183, 30, 106, 222, 98, 152, 16, 197, 211, 0, 157, 30, 194, 10, 118, 155, 222, 63, 199, 227, 229, 48, 113, 254, 234, 141, 3, 182, 220, 61, 154, 59, 129, 15, 157, 223, 204, 229, 87, 24, 158, 31, 146, 67, 48, 81, 148, 147, 222, 19, 140, 91, 198, 112, 213, 240, 61, 185, 152]
Proof generated: Proof { data: [17, 56, 238, 194, 189, 189, 75, 13, 69, 185, 86, 217, 204, 169, 244, 56, 117, 239, 230, 33, 160, 66, 9, 91, 229, 169, 170, 61, 151, 157, 106, 23, 234, 113, 47, 170, 16, 182, 55, 55, 172, 189, 155, 213, 236, 209, 6, 71, 46, 88, 135, 202, 203, 59, 51, 83, 114, 138, 53, 95, 10, 165, 25, 176, 88, 22, 74, 195, 31, 1, 114, 164, 15, 35, 156, 196, 255, 63, 201, 22, 46, 81, 107, 179, 227, 99, 61, 253, 109, 32, 62, 230, 107, 1, 205, 5, 49, 9, 82, 193, 192, 1, 254, 215, 59, 231, 232, 69, 81, 39, 37, 204, 191, 4, 21, 205, 231, 16, 3, 140, 169, 213, 148, 2, 60, 105, 232, 26, 69, 159, 68, 55, 85, 111, 56, 102, 121, 167, 82, 137, 231, 212, 95, 167, 165, 208, 197, 1, 169, 157, 218, 162, 209, 193, 7, 149, 245, 21, 145, 9, 7, 118, 60, 15, 1, 85, 89, 16, 228, 167, 161, 181, 133, 88, 163, 74, 60, 119, 163, 153, 50, 238, 128, 23, 15, 178, 205, 117, 200, 133, 138, 174, 228, 208, 7, 250, 8, 183, 30, 106, 222, 98, 152, 16, 197, 211, 0, 157, 30, 194, 10, 118, 155, 222, 63, 199, 227, 229, 48, 113, 254, 234, 141, 3, 182, 220, 61, 154, 59, 129, 15, 157, 223, 204, 229, 87, 24, 158, 31, 146, 67, 48, 81, 148, 147, 222, 19, 140, 91, 198, 112, 213, 240, 61, 185, 152] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [17, 56, 238, 194, 189, 189, 75, 13, 69, 185, 86, 217, 204, 169, 244, 56, 117, 239, 230, 33, 160, 66, 9, 91, 229, 169, 170, 61, 151, 157, 106, 23, 234, 113, 47, 170, 16, 182, 55, 55, 172, 189, 155, 213, 236, 209, 6, 71, 46, 88, 135, 202, 203, 59, 51, 83, 114, 138, 53, 95, 10, 165, 25, 176, 88, 22, 74, 195, 31, 1, 114, 164, 15, 35, 156, 196, 255, 63, 201, 22, 46, 81, 107, 179, 227, 99, 61, 253, 109, 32, 62, 230, 107, 1, 205, 5, 49, 9, 82, 193, 192, 1, 254, 215, 59, 231, 232, 69, 81, 39, 37, 204, 191, 4, 21, 205, 231, 16, 3, 140, 169, 213, 148, 2, 60, 105, 232, 26, 69, 159, 68, 55, 85, 111, 56, 102, 121, 167, 82, 137, 231, 212, 95, 167, 165, 208, 197, 1, 169, 157, 218, 162, 209, 193, 7, 149, 245, 21, 145, 9, 7, 118, 60, 15, 1, 85, 89, 16, 228, 167, 161, 181, 133, 88, 163, 74, 60, 119, 163, 153, 50, 238, 128, 23, 15, 178, 205, 117, 200, 133, 138, 174, 228, 208, 7, 250, 8, 183, 30, 106, 222, 98, 152, 16, 197, 211, 0, 157, 30, 194, 10, 118, 155, 222, 63, 199, 227, 229, 48, 113, 254, 234, 141, 3, 182, 220, 61, 154, 59, 129, 15, 157, 223, 204, 229, 87, 24, 158, 31, 146, 67, 48, 81, 148, 147, 222, 19, 140, 91, 198, 112, 213, 240, 61, 185, 152] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [17, 56, 238, 194, 189, 189, 75, 13, 69, 185, 86, 217, 204, 169, 244, 56, 117, 239, 230, 33, 160, 66, 9, 91, 229, 169, 170, 61, 151, 157, 106, 23, 234, 113, 47, 170, 16, 182, 55, 55, 172, 189, 155, 213, 236, 209, 6, 71, 46, 88, 135, 202, 203, 59, 51, 83, 114, 138, 53, 95, 10, 165, 25, 176, 88, 22, 74, 195, 31, 1, 114, 164, 15, 35, 156, 196, 255, 63, 201, 22, 46, 81, 107, 179, 227, 99, 61, 253, 109, 32, 62, 230, 107, 1, 205, 5, 49, 9, 82, 193, 192, 1, 254, 215, 59, 231, 232, 69, 81, 39, 37, 204, 191, 4, 21, 205, 231, 16, 3, 140, 169, 213, 148, 2, 60, 105, 232, 26, 69, 159, 68, 55, 85, 111, 56, 102, 121, 167, 82, 137, 231, 212, 95, 167, 165, 208, 197, 1, 169, 157, 218, 162, 209, 193, 7, 149, 245, 21, 145, 9, 7, 118, 60, 15, 1, 85, 89, 16, 228, 167, 161, 181, 133, 88, 163, 74, 60, 119, 163, 153, 50, 238, 128, 23, 15, 178, 205, 117, 200, 133, 138, 174, 228, 208, 7, 250, 8, 183, 30, 106, 222, 98, 152, 16, 197, 211, 0, 157, 30, 194, 10, 118, 155, 222, 63, 199, 227, 229, 48, 113, 254, 234, 141, 3, 182, 220, 61, 154, 59, 129, 15, 157, 223, 204, 229, 87, 24, 158, 31, 146, 67, 48, 81, 148, 147, 222, 19, 140, 91, 198, 112, 213, 240, 61, 185, 152] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969393, batch_id: 34 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969393, batch_id: 34 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Processing transaction: Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969393, batch_id: 35 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", recipient: "8Y6tx7Br6B4SMzGSLVUHeFYhahULuZxY3DspbW8LmANE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969393, batch_id: 35 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (7188058086194694882036984405268641617248900342168576097605573413562049176848, 16338032557563693440965774007072928817042332393067114425340102781379186175921), b: (QuadExtField(5597609368390751519193861022449572667895458819063989116411368112528977672407 + 8620577876371395441400567185982231217117453778931394891734995637713104945761 * u), QuadExtField(14999155443534651015119213842709835142541558343315752679362695299874678039522 + 9583519966515813128834807449663222578836004162092209994063140237959414037619 * u)), c: (1350966608314887943294848596493636396072615958897951848702503940649028478184, 9695049902748865989909139886615880404813595074559601489657186441061264016456) }
Serialized proof bytes: [16, 37, 73, 173, 224, 229, 114, 67, 62, 176, 168, 44, 113, 229, 136, 140, 77, 153, 207, 225, 178, 156, 162, 220, 144, 18, 235, 165, 244, 75, 228, 15, 177, 175, 90, 62, 174, 17, 125, 171, 34, 238, 87, 45, 123, 145, 245, 189, 43, 24, 81, 219, 92, 247, 49, 64, 190, 120, 198, 134, 172, 255, 30, 164, 215, 184, 33, 130, 62, 170, 158, 58, 79, 2, 194, 126, 38, 229, 66, 162, 112, 42, 63, 137, 243, 192, 134, 235, 63, 166, 218, 251, 118, 34, 96, 12, 97, 66, 50, 96, 163, 68, 205, 161, 69, 98, 108, 244, 84, 178, 245, 92, 69, 142, 243, 101, 114, 15, 204, 217, 7, 199, 174, 208, 252, 18, 15, 19, 226, 227, 86, 176, 219, 90, 170, 163, 187, 225, 1, 238, 247, 125, 92, 100, 141, 50, 170, 22, 49, 229, 116, 61, 63, 224, 67, 67, 156, 56, 41, 33, 115, 60, 194, 70, 183, 29, 85, 184, 8, 91, 43, 192, 183, 237, 65, 151, 176, 82, 151, 25, 146, 254, 170, 16, 59, 128, 228, 12, 128, 20, 48, 21, 232, 228, 112, 162, 187, 185, 126, 218, 232, 28, 193, 222, 109, 19, 236, 125, 251, 0, 120, 221, 151, 144, 248, 173, 168, 107, 131, 135, 184, 158, 252, 2, 72, 68, 116, 52, 209, 117, 243, 101, 120, 149, 179, 49, 211, 50, 169, 49, 223, 199, 193, 31, 34, 146, 245, 216, 234, 228, 18, 78, 43, 52, 111, 21]
Proof generated: Proof { data: [16, 37, 73, 173, 224, 229, 114, 67, 62, 176, 168, 44, 113, 229, 136, 140, 77, 153, 207, 225, 178, 156, 162, 220, 144, 18, 235, 165, 244, 75, 228, 15, 177, 175, 90, 62, 174, 17, 125, 171, 34, 238, 87, 45, 123, 145, 245, 189, 43, 24, 81, 219, 92, 247, 49, 64, 190, 120, 198, 134, 172, 255, 30, 164, 215, 184, 33, 130, 62, 170, 158, 58, 79, 2, 194, 126, 38, 229, 66, 162, 112, 42, 63, 137, 243, 192, 134, 235, 63, 166, 218, 251, 118, 34, 96, 12, 97, 66, 50, 96, 163, 68, 205, 161, 69, 98, 108, 244, 84, 178, 245, 92, 69, 142, 243, 101, 114, 15, 204, 217, 7, 199, 174, 208, 252, 18, 15, 19, 226, 227, 86, 176, 219, 90, 170, 163, 187, 225, 1, 238, 247, 125, 92, 100, 141, 50, 170, 22, 49, 229, 116, 61, 63, 224, 67, 67, 156, 56, 41, 33, 115, 60, 194, 70, 183, 29, 85, 184, 8, 91, 43, 192, 183, 237, 65, 151, 176, 82, 151, 25, 146, 254, 170, 16, 59, 128, 228, 12, 128, 20, 48, 21, 232, 228, 112, 162, 187, 185, 126, 218, 232, 28, 193, 222, 109, 19, 236, 125, 251, 0, 120, 221, 151, 144, 248, 173, 168, 107, 131, 135, 184, 158, 252, 2, 72, 68, 116, 52, 209, 117, 243, 101, 120, 149, 179, 49, 211, 50, 169, 49, 223, 199, 193, 31, 34, 146, 245, 216, 234, 228, 18, 78, 43, 52, 111, 21] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [16, 37, 73, 173, 224, 229, 114, 67, 62, 176, 168, 44, 113, 229, 136, 140, 77, 153, 207, 225, 178, 156, 162, 220, 144, 18, 235, 165, 244, 75, 228, 15, 177, 175, 90, 62, 174, 17, 125, 171, 34, 238, 87, 45, 123, 145, 245, 189, 43, 24, 81, 219, 92, 247, 49, 64, 190, 120, 198, 134, 172, 255, 30, 164, 215, 184, 33, 130, 62, 170, 158, 58, 79, 2, 194, 126, 38, 229, 66, 162, 112, 42, 63, 137, 243, 192, 134, 235, 63, 166, 218, 251, 118, 34, 96, 12, 97, 66, 50, 96, 163, 68, 205, 161, 69, 98, 108, 244, 84, 178, 245, 92, 69, 142, 243, 101, 114, 15, 204, 217, 7, 199, 174, 208, 252, 18, 15, 19, 226, 227, 86, 176, 219, 90, 170, 163, 187, 225, 1, 238, 247, 125, 92, 100, 141, 50, 170, 22, 49, 229, 116, 61, 63, 224, 67, 67, 156, 56, 41, 33, 115, 60, 194, 70, 183, 29, 85, 184, 8, 91, 43, 192, 183, 237, 65, 151, 176, 82, 151, 25, 146, 254, 170, 16, 59, 128, 228, 12, 128, 20, 48, 21, 232, 228, 112, 162, 187, 185, 126, 218, 232, 28, 193, 222, 109, 19, 236, 125, 251, 0, 120, 221, 151, 144, 248, 173, 168, 107, 131, 135, 184, 158, 252, 2, 72, 68, 116, 52, 209, 117, 243, 101, 120, 149, 179, 49, 211, 50, 169, 49, 223, 199, 193, 31, 34, 146, 245, 216, 234, 228, 18, 78, 43, 52, 111, 21] }
Generated Groth16 proof: Proof { a: (149805758531994725436455682525890644582671602746584148322335589204488758683, 6165757959505324697509224232547136569402683935545255665572944132345327586809), b: (QuadExtField(3214154672833006900872215149567368743802983817128640404326167899079695415916 + 4211019155222436275151473789109547493893709732225368961679029247256379230981 * u), QuadExtField(11217981550805601894745827319539505148143637272310124782792918046751151457388 + 11678266293880509133723843859318455042413549870162127124247057583953518136963 * u)), c: (10740174201609602591459115539786989781950392398097782789311067973507548086201, 12581832618254884970688117018000142127795876545184083605916852252579982650816) }
Serialized proof bytes: [155, 37, 74, 148, 251, 204, 228, 116, 207, 243, 234, 128, 67, 75, 75, 187, 233, 126, 80, 126, 136, 32, 204, 143, 6, 114, 216, 104, 124, 201, 84, 0, 249, 13, 69, 0, 2, 222, 198, 99, 244, 9, 210, 229, 54, 245, 210, 254, 115, 161, 249, 36, 133, 60, 108, 214, 109, 197, 112, 120, 1, 178, 161, 13, 108, 58, 52, 9, 128, 46, 63, 53, 126, 227, 127, 172, 194, 212, 121, 216, 161, 236, 87, 5, 137, 20, 204, 69, 37, 122, 60, 209, 166, 37, 27, 7, 5, 139, 255, 143, 115, 69, 225, 122, 40, 147, 23, 94, 71, 189, 251, 194, 173, 133, 107, 219, 150, 89, 72, 35, 243, 89, 27, 131, 53, 90, 79, 9, 108, 132, 181, 207, 116, 250, 74, 197, 157, 148, 187, 2, 81, 223, 59, 197, 90, 129, 171, 85, 118, 137, 50, 53, 103, 176, 91, 170, 13, 39, 205, 24, 131, 14, 50, 124, 64, 104, 152, 235, 48, 246, 45, 156, 40, 92, 16, 34, 34, 184, 195, 48, 109, 26, 26, 99, 54, 202, 144, 170, 27, 170, 209, 153, 185, 127, 38, 55, 248, 32, 201, 28, 153, 51, 211, 163, 105, 38, 69, 224, 65, 143, 196, 182, 28, 13, 242, 180, 175, 72, 165, 20, 34, 185, 190, 23, 192, 173, 182, 5, 147, 49, 143, 143, 106, 56, 123, 39, 12, 216, 11, 230, 237, 205, 59, 171, 102, 126, 149, 64, 232, 27, 115, 88, 157, 16, 209, 155]
Proof generated: Proof { data: [155, 37, 74, 148, 251, 204, 228, 116, 207, 243, 234, 128, 67, 75, 75, 187, 233, 126, 80, 126, 136, 32, 204, 143, 6, 114, 216, 104, 124, 201, 84, 0, 249, 13, 69, 0, 2, 222, 198, 99, 244, 9, 210, 229, 54, 245, 210, 254, 115, 161, 249, 36, 133, 60, 108, 214, 109, 197, 112, 120, 1, 178, 161, 13, 108, 58, 52, 9, 128, 46, 63, 53, 126, 227, 127, 172, 194, 212, 121, 216, 161, 236, 87, 5, 137, 20, 204, 69, 37, 122, 60, 209, 166, 37, 27, 7, 5, 139, 255, 143, 115, 69, 225, 122, 40, 147, 23, 94, 71, 189, 251, 194, 173, 133, 107, 219, 150, 89, 72, 35, 243, 89, 27, 131, 53, 90, 79, 9, 108, 132, 181, 207, 116, 250, 74, 197, 157, 148, 187, 2, 81, 223, 59, 197, 90, 129, 171, 85, 118, 137, 50, 53, 103, 176, 91, 170, 13, 39, 205, 24, 131, 14, 50, 124, 64, 104, 152, 235, 48, 246, 45, 156, 40, 92, 16, 34, 34, 184, 195, 48, 109, 26, 26, 99, 54, 202, 144, 170, 27, 170, 209, 153, 185, 127, 38, 55, 248, 32, 201, 28, 153, 51, 211, 163, 105, 38, 69, 224, 65, 143, 196, 182, 28, 13, 242, 180, 175, 72, 165, 20, 34, 185, 190, 23, 192, 173, 182, 5, 147, 49, 143, 143, 106, 56, 123, 39, 12, 216, 11, 230, 237, 205, 59, 171, 102, 126, 149, 64, 232, 27, 115, 88, 157, 16, 209, 155] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [155, 37, 74, 148, 251, 204, 228, 116, 207, 243, 234, 128, 67, 75, 75, 187, 233, 126, 80, 126, 136, 32, 204, 143, 6, 114, 216, 104, 124, 201, 84, 0, 249, 13, 69, 0, 2, 222, 198, 99, 244, 9, 210, 229, 54, 245, 210, 254, 115, 161, 249, 36, 133, 60, 108, 214, 109, 197, 112, 120, 1, 178, 161, 13, 108, 58, 52, 9, 128, 46, 63, 53, 126, 227, 127, 172, 194, 212, 121, 216, 161, 236, 87, 5, 137, 20, 204, 69, 37, 122, 60, 209, 166, 37, 27, 7, 5, 139, 255, 143, 115, 69, 225, 122, 40, 147, 23, 94, 71, 189, 251, 194, 173, 133, 107, 219, 150, 89, 72, 35, 243, 89, 27, 131, 53, 90, 79, 9, 108, 132, 181, 207, 116, 250, 74, 197, 157, 148, 187, 2, 81, 223, 59, 197, 90, 129, 171, 85, 118, 137, 50, 53, 103, 176, 91, 170, 13, 39, 205, 24, 131, 14, 50, 124, 64, 104, 152, 235, 48, 246, 45, 156, 40, 92, 16, 34, 34, 184, 195, 48, 109, 26, 26, 99, 54, 202, 144, 170, 27, 170, 209, 153, 185, 127, 38, 55, 248, 32, 201, 28, 153, 51, 211, 163, 105, 38, 69, 224, 65, 143, 196, 182, 28, 13, 242, 180, 175, 72, 165, 20, 34, 185, 190, 23, 192, 173, 182, 5, 147, 49, 143, 143, 106, 56, 123, 39, 12, 216, 11, 230, 237, 205, 59, 171, 102, 126, 149, 64, 232, 27, 115, 88, 157, 16, 209, 155] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [16, 37, 73, 173, 224, 229, 114, 67, 62, 176, 168, 44, 113, 229, 136, 140, 77, 153, 207, 225, 178, 156, 162, 220, 144, 18, 235, 165, 244, 75, 228, 15, 177, 175, 90, 62, 174, 17, 125, 171, 34, 238, 87, 45, 123, 145, 245, 189, 43, 24, 81, 219, 92, 247, 49, 64, 190, 120, 198, 134, 172, 255, 30, 164, 215, 184, 33, 130, 62, 170, 158, 58, 79, 2, 194, 126, 38, 229, 66, 162, 112, 42, 63, 137, 243, 192, 134, 235, 63, 166, 218, 251, 118, 34, 96, 12, 97, 66, 50, 96, 163, 68, 205, 161, 69, 98, 108, 244, 84, 178, 245, 92, 69, 142, 243, 101, 114, 15, 204, 217, 7, 199, 174, 208, 252, 18, 15, 19, 226, 227, 86, 176, 219, 90, 170, 163, 187, 225, 1, 238, 247, 125, 92, 100, 141, 50, 170, 22, 49, 229, 116, 61, 63, 224, 67, 67, 156, 56, 41, 33, 115, 60, 194, 70, 183, 29, 85, 184, 8, 91, 43, 192, 183, 237, 65, 151, 176, 82, 151, 25, 146, 254, 170, 16, 59, 128, 228, 12, 128, 20, 48, 21, 232, 228, 112, 162, 187, 185, 126, 218, 232, 28, 193, 222, 109, 19, 236, 125, 251, 0, 120, 221, 151, 144, 248, 173, 168, 107, 131, 135, 184, 158, 252, 2, 72, 68, 116, 52, 209, 117, 243, 101, 120, 149, 179, 49, 211, 50, 169, 49, 223, 199, 193, 31, 34, 146, 245, 216, 234, 228, 18, 78, 43, 52, 111, 21] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [155, 37, 74, 148, 251, 204, 228, 116, 207, 243, 234, 128, 67, 75, 75, 187, 233, 126, 80, 126, 136, 32, 204, 143, 6, 114, 216, 104, 124, 201, 84, 0, 249, 13, 69, 0, 2, 222, 198, 99, 244, 9, 210, 229, 54, 245, 210, 254, 115, 161, 249, 36, 133, 60, 108, 214, 109, 197, 112, 120, 1, 178, 161, 13, 108, 58, 52, 9, 128, 46, 63, 53, 126, 227, 127, 172, 194, 212, 121, 216, 161, 236, 87, 5, 137, 20, 204, 69, 37, 122, 60, 209, 166, 37, 27, 7, 5, 139, 255, 143, 115, 69, 225, 122, 40, 147, 23, 94, 71, 189, 251, 194, 173, 133, 107, 219, 150, 89, 72, 35, 243, 89, 27, 131, 53, 90, 79, 9, 108, 132, 181, 207, 116, 250, 74, 197, 157, 148, 187, 2, 81, 223, 59, 197, 90, 129, 171, 85, 118, 137, 50, 53, 103, 176, 91, 170, 13, 39, 205, 24, 131, 14, 50, 124, 64, 104, 152, 235, 48, 246, 45, 156, 40, 92, 16, 34, 34, 184, 195, 48, 109, 26, 26, 99, 54, 202, 144, 170, 27, 170, 209, 153, 185, 127, 38, 55, 248, 32, 201, 28, 153, 51, 211, 163, 105, 38, 69, 224, 65, 143, 196, 182, 28, 13, 242, 180, 175, 72, 165, 20, 34, 185, 190, 23, 192, 173, 182, 5, 147, 49, 143, 143, 106, 56, 123, 39, 12, 216, 11, 230, 237, 205, 59, 171, 102, 126, 149, 64, 232, 27, 115, 88, 157, 16, 209, 155] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "H5ng2Qf6MdF7GxsaxA7zD2EJ5ZcQJKsf6cD26Z9yKEFa", recipient: "H5ng2Qf6MdF7GxsaxA7zD2EJ5ZcQJKsf6cD26Z9yKEFa", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "H5ng2Qf6MdF7GxsaxA7zD2EJ5ZcQJKsf6cD26Z9yKEFa", recipient: "H5ng2Qf6MdF7GxsaxA7zD2EJ5ZcQJKsf6cD26Z9yKEFa", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969399, batch_id: 37 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "H5ng2Qf6MdF7GxsaxA7zD2EJ5ZcQJKsf6cD26Z9yKEFa", recipient: "H5ng2Qf6MdF7GxsaxA7zD2EJ5ZcQJKsf6cD26Z9yKEFa", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969399, batch_id: 37 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (798392846378584513323329741858837121115543084545724003963100246755574550860, 17631732056894417983005672034132112014779318258035869296748364843115818253336), b: (QuadExtField(6588119685781830892422623373015219927249079446804364254250941049891745195779 + 17438331701915540060836731904055650120985801623674299097145274401143533059998 * u), QuadExtField(13609912643529594938945422131580366130209155630854609923713558563952409048310 + 4323549410572244485378954359038982878434638301171788046012168998012805296493 * u)), c: (19151602295804911005955626170527732108216581229941822174141514128792384549004, 10494690911206039271842107393619357421030534883297272395854471085534950372659) }
Serialized proof bytes: [76, 17, 244, 36, 125, 60, 169, 177, 228, 102, 16, 102, 80, 134, 161, 205, 214, 192, 137, 57, 57, 176, 39, 58, 126, 145, 132, 144, 212, 223, 195, 1, 24, 252, 71, 187, 191, 248, 20, 56, 63, 224, 247, 93, 96, 25, 160, 214, 216, 166, 90, 59, 229, 106, 40, 222, 156, 97, 83, 237, 233, 52, 251, 166, 3, 103, 204, 103, 19, 49, 152, 94, 187, 151, 215, 128, 237, 217, 103, 30, 194, 182, 136, 19, 35, 6, 192, 235, 203, 223, 131, 153, 92, 190, 144, 14, 158, 191, 131, 163, 239, 219, 173, 167, 42, 186, 107, 241, 230, 111, 118, 222, 8, 155, 107, 228, 73, 86, 12, 195, 17, 221, 145, 16, 248, 190, 141, 38, 246, 244, 17, 225, 204, 248, 51, 209, 11, 65, 115, 246, 229, 254, 56, 72, 27, 61, 192, 240, 167, 252, 47, 157, 202, 18, 130, 224, 4, 240, 22, 30, 109, 177, 113, 190, 97, 240, 60, 193, 173, 9, 80, 225, 66, 163, 176, 208, 218, 146, 36, 117, 219, 103, 63, 129, 37, 133, 58, 170, 208, 10, 143, 9, 140, 176, 181, 39, 123, 33, 237, 202, 191, 90, 48, 86, 207, 146, 73, 100, 156, 101, 65, 118, 215, 88, 163, 12, 197, 23, 170, 79, 58, 108, 87, 42, 51, 181, 2, 50, 198, 254, 245, 76, 250, 239, 196, 149, 105, 153, 195, 80, 119, 138, 235, 71, 140, 129, 82, 159, 228, 164, 42, 198, 216, 200, 51, 23]
Proof generated: Proof { data: [76, 17, 244, 36, 125, 60, 169, 177, 228, 102, 16, 102, 80, 134, 161, 205, 214, 192, 137, 57, 57, 176, 39, 58, 126, 145, 132, 144, 212, 223, 195, 1, 24, 252, 71, 187, 191, 248, 20, 56, 63, 224, 247, 93, 96, 25, 160, 214, 216, 166, 90, 59, 229, 106, 40, 222, 156, 97, 83, 237, 233, 52, 251, 166, 3, 103, 204, 103, 19, 49, 152, 94, 187, 151, 215, 128, 237, 217, 103, 30, 194, 182, 136, 19, 35, 6, 192, 235, 203, 223, 131, 153, 92, 190, 144, 14, 158, 191, 131, 163, 239, 219, 173, 167, 42, 186, 107, 241, 230, 111, 118, 222, 8, 155, 107, 228, 73, 86, 12, 195, 17, 221, 145, 16, 248, 190, 141, 38, 246, 244, 17, 225, 204, 248, 51, 209, 11, 65, 115, 246, 229, 254, 56, 72, 27, 61, 192, 240, 167, 252, 47, 157, 202, 18, 130, 224, 4, 240, 22, 30, 109, 177, 113, 190, 97, 240, 60, 193, 173, 9, 80, 225, 66, 163, 176, 208, 218, 146, 36, 117, 219, 103, 63, 129, 37, 133, 58, 170, 208, 10, 143, 9, 140, 176, 181, 39, 123, 33, 237, 202, 191, 90, 48, 86, 207, 146, 73, 100, 156, 101, 65, 118, 215, 88, 163, 12, 197, 23, 170, 79, 58, 108, 87, 42, 51, 181, 2, 50, 198, 254, 245, 76, 250, 239, 196, 149, 105, 153, 195, 80, 119, 138, 235, 71, 140, 129, 82, 159, 228, 164, 42, 198, 216, 200, 51, 23] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [76, 17, 244, 36, 125, 60, 169, 177, 228, 102, 16, 102, 80, 134, 161, 205, 214, 192, 137, 57, 57, 176, 39, 58, 126, 145, 132, 144, 212, 223, 195, 1, 24, 252, 71, 187, 191, 248, 20, 56, 63, 224, 247, 93, 96, 25, 160, 214, 216, 166, 90, 59, 229, 106, 40, 222, 156, 97, 83, 237, 233, 52, 251, 166, 3, 103, 204, 103, 19, 49, 152, 94, 187, 151, 215, 128, 237, 217, 103, 30, 194, 182, 136, 19, 35, 6, 192, 235, 203, 223, 131, 153, 92, 190, 144, 14, 158, 191, 131, 163, 239, 219, 173, 167, 42, 186, 107, 241, 230, 111, 118, 222, 8, 155, 107, 228, 73, 86, 12, 195, 17, 221, 145, 16, 248, 190, 141, 38, 246, 244, 17, 225, 204, 248, 51, 209, 11, 65, 115, 246, 229, 254, 56, 72, 27, 61, 192, 240, 167, 252, 47, 157, 202, 18, 130, 224, 4, 240, 22, 30, 109, 177, 113, 190, 97, 240, 60, 193, 173, 9, 80, 225, 66, 163, 176, 208, 218, 146, 36, 117, 219, 103, 63, 129, 37, 133, 58, 170, 208, 10, 143, 9, 140, 176, 181, 39, 123, 33, 237, 202, 191, 90, 48, 86, 207, 146, 73, 100, 156, 101, 65, 118, 215, 88, 163, 12, 197, 23, 170, 79, 58, 108, 87, 42, 51, 181, 2, 50, 198, 254, 245, 76, 250, 239, 196, 149, 105, 153, 195, 80, 119, 138, 235, 71, 140, 129, 82, 159, 228, 164, 42, 198, 216, 200, 51, 23] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [76, 17, 244, 36, 125, 60, 169, 177, 228, 102, 16, 102, 80, 134, 161, 205, 214, 192, 137, 57, 57, 176, 39, 58, 126, 145, 132, 144, 212, 223, 195, 1, 24, 252, 71, 187, 191, 248, 20, 56, 63, 224, 247, 93, 96, 25, 160, 214, 216, 166, 90, 59, 229, 106, 40, 222, 156, 97, 83, 237, 233, 52, 251, 166, 3, 103, 204, 103, 19, 49, 152, 94, 187, 151, 215, 128, 237, 217, 103, 30, 194, 182, 136, 19, 35, 6, 192, 235, 203, 223, 131, 153, 92, 190, 144, 14, 158, 191, 131, 163, 239, 219, 173, 167, 42, 186, 107, 241, 230, 111, 118, 222, 8, 155, 107, 228, 73, 86, 12, 195, 17, 221, 145, 16, 248, 190, 141, 38, 246, 244, 17, 225, 204, 248, 51, 209, 11, 65, 115, 246, 229, 254, 56, 72, 27, 61, 192, 240, 167, 252, 47, 157, 202, 18, 130, 224, 4, 240, 22, 30, 109, 177, 113, 190, 97, 240, 60, 193, 173, 9, 80, 225, 66, 163, 176, 208, 218, 146, 36, 117, 219, 103, 63, 129, 37, 133, 58, 170, 208, 10, 143, 9, 140, 176, 181, 39, 123, 33, 237, 202, 191, 90, 48, 86, 207, 146, 73, 100, 156, 101, 65, 118, 215, 88, 163, 12, 197, 23, 170, 79, 58, 108, 87, 42, 51, 181, 2, 50, 198, 254, 245, 76, 250, 239, 196, 149, 105, 153, 195, 80, 119, 138, 235, 71, 140, 129, 82, 159, 228, 164, 42, 198, 216, 200, 51, 23] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", recipient: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", recipient: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969415, batch_id: 39 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", recipient: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969415, batch_id: 39 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (8083504681676187847382932214602230013310425597904212914596074360348620075972, 21075911365501544671597714634507873066344870302758056308115574436272254178688), b: (QuadExtField(10980846036052013225901105695605470156138633958530638530876566982529797984266 + 8289701595160855147517129522969293088219272524492991399422024607741006757262 * u), QuadExtField(12794064210497507905448896297142310107401881604265704836534427717687283806525 + 17066369818784915967369429122472331761164804099286968212929391644767243129357 * u)), c: (20809509488041250463819985112750607457724831465323804361323058955767738494844, 2939628690128389511404049928184130500370980838112350401306267640894798512279) }
Serialized proof bytes: [196, 179, 239, 52, 172, 145, 210, 126, 177, 148, 162, 135, 63, 24, 89, 68, 153, 189, 178, 101, 197, 50, 144, 62, 50, 210, 5, 216, 252, 25, 223, 17, 128, 85, 59, 180, 168, 248, 217, 92, 114, 180, 87, 60, 166, 220, 66, 63, 113, 81, 84, 94, 36, 114, 195, 131, 244, 178, 191, 174, 8, 139, 152, 174, 10, 16, 230, 25, 72, 23, 82, 1, 74, 191, 107, 89, 55, 125, 90, 38, 220, 15, 163, 220, 53, 209, 164, 169, 142, 255, 22, 145, 72, 240, 70, 24, 142, 189, 166, 54, 227, 73, 206, 173, 106, 36, 235, 166, 209, 155, 0, 147, 238, 109, 17, 182, 204, 166, 241, 38, 221, 163, 251, 112, 9, 206, 83, 18, 61, 241, 203, 131, 18, 58, 99, 108, 34, 203, 136, 15, 83, 136, 210, 31, 55, 27, 59, 241, 9, 157, 66, 178, 198, 67, 97, 158, 8, 47, 73, 28, 13, 210, 14, 196, 248, 56, 141, 206, 67, 97, 132, 186, 78, 149, 177, 32, 236, 86, 137, 134, 70, 171, 96, 244, 165, 105, 118, 4, 23, 57, 187, 165, 124, 111, 79, 24, 131, 183, 7, 218, 66, 202, 4, 0, 232, 24, 63, 178, 173, 240, 74, 82, 79, 55, 208, 96, 178, 28, 186, 219, 213, 195, 1, 46, 151, 64, 253, 185, 102, 165, 235, 172, 76, 200, 206, 160, 13, 22, 56, 151, 22, 106, 3, 134, 236, 100, 248, 145, 99, 70, 126, 46, 88, 197, 127, 6]
Proof generated: Proof { data: [196, 179, 239, 52, 172, 145, 210, 126, 177, 148, 162, 135, 63, 24, 89, 68, 153, 189, 178, 101, 197, 50, 144, 62, 50, 210, 5, 216, 252, 25, 223, 17, 128, 85, 59, 180, 168, 248, 217, 92, 114, 180, 87, 60, 166, 220, 66, 63, 113, 81, 84, 94, 36, 114, 195, 131, 244, 178, 191, 174, 8, 139, 152, 174, 10, 16, 230, 25, 72, 23, 82, 1, 74, 191, 107, 89, 55, 125, 90, 38, 220, 15, 163, 220, 53, 209, 164, 169, 142, 255, 22, 145, 72, 240, 70, 24, 142, 189, 166, 54, 227, 73, 206, 173, 106, 36, 235, 166, 209, 155, 0, 147, 238, 109, 17, 182, 204, 166, 241, 38, 221, 163, 251, 112, 9, 206, 83, 18, 61, 241, 203, 131, 18, 58, 99, 108, 34, 203, 136, 15, 83, 136, 210, 31, 55, 27, 59, 241, 9, 157, 66, 178, 198, 67, 97, 158, 8, 47, 73, 28, 13, 210, 14, 196, 248, 56, 141, 206, 67, 97, 132, 186, 78, 149, 177, 32, 236, 86, 137, 134, 70, 171, 96, 244, 165, 105, 118, 4, 23, 57, 187, 165, 124, 111, 79, 24, 131, 183, 7, 218, 66, 202, 4, 0, 232, 24, 63, 178, 173, 240, 74, 82, 79, 55, 208, 96, 178, 28, 186, 219, 213, 195, 1, 46, 151, 64, 253, 185, 102, 165, 235, 172, 76, 200, 206, 160, 13, 22, 56, 151, 22, 106, 3, 134, 236, 100, 248, 145, 99, 70, 126, 46, 88, 197, 127, 6] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [196, 179, 239, 52, 172, 145, 210, 126, 177, 148, 162, 135, 63, 24, 89, 68, 153, 189, 178, 101, 197, 50, 144, 62, 50, 210, 5, 216, 252, 25, 223, 17, 128, 85, 59, 180, 168, 248, 217, 92, 114, 180, 87, 60, 166, 220, 66, 63, 113, 81, 84, 94, 36, 114, 195, 131, 244, 178, 191, 174, 8, 139, 152, 174, 10, 16, 230, 25, 72, 23, 82, 1, 74, 191, 107, 89, 55, 125, 90, 38, 220, 15, 163, 220, 53, 209, 164, 169, 142, 255, 22, 145, 72, 240, 70, 24, 142, 189, 166, 54, 227, 73, 206, 173, 106, 36, 235, 166, 209, 155, 0, 147, 238, 109, 17, 182, 204, 166, 241, 38, 221, 163, 251, 112, 9, 206, 83, 18, 61, 241, 203, 131, 18, 58, 99, 108, 34, 203, 136, 15, 83, 136, 210, 31, 55, 27, 59, 241, 9, 157, 66, 178, 198, 67, 97, 158, 8, 47, 73, 28, 13, 210, 14, 196, 248, 56, 141, 206, 67, 97, 132, 186, 78, 149, 177, 32, 236, 86, 137, 134, 70, 171, 96, 244, 165, 105, 118, 4, 23, 57, 187, 165, 124, 111, 79, 24, 131, 183, 7, 218, 66, 202, 4, 0, 232, 24, 63, 178, 173, 240, 74, 82, 79, 55, 208, 96, 178, 28, 186, 219, 213, 195, 1, 46, 151, 64, 253, 185, 102, 165, 235, 172, 76, 200, 206, 160, 13, 22, 56, 151, 22, 106, 3, 134, 236, 100, 248, 145, 99, 70, 126, 46, 88, 197, 127, 6] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [196, 179, 239, 52, 172, 145, 210, 126, 177, 148, 162, 135, 63, 24, 89, 68, 153, 189, 178, 101, 197, 50, 144, 62, 50, 210, 5, 216, 252, 25, 223, 17, 128, 85, 59, 180, 168, 248, 217, 92, 114, 180, 87, 60, 166, 220, 66, 63, 113, 81, 84, 94, 36, 114, 195, 131, 244, 178, 191, 174, 8, 139, 152, 174, 10, 16, 230, 25, 72, 23, 82, 1, 74, 191, 107, 89, 55, 125, 90, 38, 220, 15, 163, 220, 53, 209, 164, 169, 142, 255, 22, 145, 72, 240, 70, 24, 142, 189, 166, 54, 227, 73, 206, 173, 106, 36, 235, 166, 209, 155, 0, 147, 238, 109, 17, 182, 204, 166, 241, 38, 221, 163, 251, 112, 9, 206, 83, 18, 61, 241, 203, 131, 18, 58, 99, 108, 34, 203, 136, 15, 83, 136, 210, 31, 55, 27, 59, 241, 9, 157, 66, 178, 198, 67, 97, 158, 8, 47, 73, 28, 13, 210, 14, 196, 248, 56, 141, 206, 67, 97, 132, 186, 78, 149, 177, 32, 236, 86, 137, 134, 70, 171, 96, 244, 165, 105, 118, 4, 23, 57, 187, 165, 124, 111, 79, 24, 131, 183, 7, 218, 66, 202, 4, 0, 232, 24, 63, 178, 173, 240, 74, 82, 79, 55, 208, 96, 178, 28, 186, 219, 213, 195, 1, 46, 151, 64, 253, 185, 102, 165, 235, 172, 76, 200, 206, 160, 13, 22, 56, 151, 22, 106, 3, 134, 236, 100, 248, 145, 99, 70, 126, 46, 88, 197, 127, 6] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", recipient: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", recipient: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969434, batch_id: 40 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", recipient: "9jJ8wu1z7mwQYL6JAV5CdcaXw4tLa6tUAz7BrsoGbZuv", amount: 0, nonce: 1 }], programs: [], timestamp: 1728969434, batch_id: 40 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (13464874969198743439010061536706722349436744847935564561478528884512016537755, 5500944051699194140377527866562272647102784594107899517890416434391673854848), b: (QuadExtField(14868640360774224749910248788571949935515262310823207444764843146607471489477 + 71764264650023540962932891306470004206678084928411576189924113036326501216 * u), QuadExtField(20979349352924198943840987212717007116399711987575924413289342855424115176502 + 15564089227986124916878468363407094556887249000988259739350835175775968071447 * u)), c: (20980934293506088376557332253868618410925884284348472064324339512992074595606, 16158647221273147671909450786688693637864174176416080046310141967445696432400) }
Serialized proof bytes: [155, 152, 75, 143, 140, 160, 165, 197, 221, 159, 203, 34, 32, 196, 186, 158, 224, 125, 203, 213, 5, 208, 242, 92, 7, 73, 54, 138, 98, 217, 196, 29, 128, 219, 193, 217, 7, 44, 163, 193, 126, 49, 209, 54, 70, 68, 231, 191, 85, 226, 87, 60, 103, 134, 45, 146, 135, 73, 139, 28, 139, 108, 41, 12, 197, 241, 217, 130, 61, 85, 166, 18, 234, 53, 144, 65, 153, 215, 52, 61, 211, 86, 21, 45, 135, 87, 62, 217, 217, 239, 17, 201, 42, 90, 223, 32, 96, 123, 96, 6, 68, 56, 0, 99, 139, 90, 58, 64, 82, 233, 167, 173, 192, 214, 54, 154, 212, 239, 215, 238, 172, 124, 181, 132, 252, 157, 40, 0, 54, 116, 183, 39, 146, 243, 97, 22, 150, 174, 153, 217, 87, 80, 34, 59, 12, 250, 55, 37, 160, 82, 193, 152, 188, 90, 167, 146, 20, 228, 97, 46, 23, 143, 46, 65, 101, 114, 240, 78, 69, 203, 111, 51, 13, 228, 115, 122, 87, 122, 131, 229, 199, 237, 29, 88, 196, 127, 100, 241, 90, 246, 104, 162, 22, 125, 204, 51, 63, 131, 245, 48, 120, 104, 207, 174, 111, 31, 38, 3, 189, 223, 116, 239, 190, 218, 206, 84, 190, 114, 82, 73, 185, 201, 98, 46, 16, 201, 63, 198, 81, 251, 121, 4, 131, 78, 239, 112, 149, 111, 225, 9, 167, 4, 154, 88, 93, 212, 66, 148, 61, 184, 110, 153, 96, 120, 185, 163]
Proof generated: Proof { data: [155, 152, 75, 143, 140, 160, 165, 197, 221, 159, 203, 34, 32, 196, 186, 158, 224, 125, 203, 213, 5, 208, 242, 92, 7, 73, 54, 138, 98, 217, 196, 29, 128, 219, 193, 217, 7, 44, 163, 193, 126, 49, 209, 54, 70, 68, 231, 191, 85, 226, 87, 60, 103, 134, 45, 146, 135, 73, 139, 28, 139, 108, 41, 12, 197, 241, 217, 130, 61, 85, 166, 18, 234, 53, 144, 65, 153, 215, 52, 61, 211, 86, 21, 45, 135, 87, 62, 217, 217, 239, 17, 201, 42, 90, 223, 32, 96, 123, 96, 6, 68, 56, 0, 99, 139, 90, 58, 64, 82, 233, 167, 173, 192, 214, 54, 154, 212, 239, 215, 238, 172, 124, 181, 132, 252, 157, 40, 0, 54, 116, 183, 39, 146, 243, 97, 22, 150, 174, 153, 217, 87, 80, 34, 59, 12, 250, 55, 37, 160, 82, 193, 152, 188, 90, 167, 146, 20, 228, 97, 46, 23, 143, 46, 65, 101, 114, 240, 78, 69, 203, 111, 51, 13, 228, 115, 122, 87, 122, 131, 229, 199, 237, 29, 88, 196, 127, 100, 241, 90, 246, 104, 162, 22, 125, 204, 51, 63, 131, 245, 48, 120, 104, 207, 174, 111, 31, 38, 3, 189, 223, 116, 239, 190, 218, 206, 84, 190, 114, 82, 73, 185, 201, 98, 46, 16, 201, 63, 198, 81, 251, 121, 4, 131, 78, 239, 112, 149, 111, 225, 9, 167, 4, 154, 88, 93, 212, 66, 148, 61, 184, 110, 153, 96, 120, 185, 163] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [155, 152, 75, 143, 140, 160, 165, 197, 221, 159, 203, 34, 32, 196, 186, 158, 224, 125, 203, 213, 5, 208, 242, 92, 7, 73, 54, 138, 98, 217, 196, 29, 128, 219, 193, 217, 7, 44, 163, 193, 126, 49, 209, 54, 70, 68, 231, 191, 85, 226, 87, 60, 103, 134, 45, 146, 135, 73, 139, 28, 139, 108, 41, 12, 197, 241, 217, 130, 61, 85, 166, 18, 234, 53, 144, 65, 153, 215, 52, 61, 211, 86, 21, 45, 135, 87, 62, 217, 217, 239, 17, 201, 42, 90, 223, 32, 96, 123, 96, 6, 68, 56, 0, 99, 139, 90, 58, 64, 82, 233, 167, 173, 192, 214, 54, 154, 212, 239, 215, 238, 172, 124, 181, 132, 252, 157, 40, 0, 54, 116, 183, 39, 146, 243, 97, 22, 150, 174, 153, 217, 87, 80, 34, 59, 12, 250, 55, 37, 160, 82, 193, 152, 188, 90, 167, 146, 20, 228, 97, 46, 23, 143, 46, 65, 101, 114, 240, 78, 69, 203, 111, 51, 13, 228, 115, 122, 87, 122, 131, 229, 199, 237, 29, 88, 196, 127, 100, 241, 90, 246, 104, 162, 22, 125, 204, 51, 63, 131, 245, 48, 120, 104, 207, 174, 111, 31, 38, 3, 189, 223, 116, 239, 190, 218, 206, 84, 190, 114, 82, 73, 185, 201, 98, 46, 16, 201, 63, 198, 81, 251, 121, 4, 131, 78, 239, 112, 149, 111, 225, 9, 167, 4, 154, 88, 93, 212, 66, 148, 61, 184, 110, 153, 96, 120, 185, 163] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [155, 152, 75, 143, 140, 160, 165, 197, 221, 159, 203, 34, 32, 196, 186, 158, 224, 125, 203, 213, 5, 208, 242, 92, 7, 73, 54, 138, 98, 217, 196, 29, 128, 219, 193, 217, 7, 44, 163, 193, 126, 49, 209, 54, 70, 68, 231, 191, 85, 226, 87, 60, 103, 134, 45, 146, 135, 73, 139, 28, 139, 108, 41, 12, 197, 241, 217, 130, 61, 85, 166, 18, 234, 53, 144, 65, 153, 215, 52, 61, 211, 86, 21, 45, 135, 87, 62, 217, 217, 239, 17, 201, 42, 90, 223, 32, 96, 123, 96, 6, 68, 56, 0, 99, 139, 90, 58, 64, 82, 233, 167, 173, 192, 214, 54, 154, 212, 239, 215, 238, 172, 124, 181, 132, 252, 157, 40, 0, 54, 116, 183, 39, 146, 243, 97, 22, 150, 174, 153, 217, 87, 80, 34, 59, 12, 250, 55, 37, 160, 82, 193, 152, 188, 90, 167, 146, 20, 228, 97, 46, 23, 143, 46, 65, 101, 114, 240, 78, 69, 203, 111, 51, 13, 228, 115, 122, 87, 122, 131, 229, 199, 237, 29, 88, 196, 127, 100, 241, 90, 246, 104, 162, 22, 125, 204, 51, 63, 131, 245, 48, 120, 104, 207, 174, 111, 31, 38, 3, 189, 223, 116, 239, 190, 218, 206, 84, 190, 114, 82, 73, 185, 201, 98, 46, 16, 201, 63, 198, 81, 251, 121, 4, 131, 78, 239, 112, 149, 111, 225, 9, 167, 4, 154, 88, 93, 212, 66, 148, 61, 184, 110, 153, 96, 120, 185, 163] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "6qnw9fyYTydt6WSxR9yfWt678iYCeXHkXmGuDWtGqfmh", recipient: "6qnw9fyYTydt6WSxR9yfWt678iYCeXHkXmGuDWtGqfmh", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "6qnw9fyYTydt6WSxR9yfWt678iYCeXHkXmGuDWtGqfmh", recipient: "6qnw9fyYTydt6WSxR9yfWt678iYCeXHkXmGuDWtGqfmh", amount: 0, nonce: 1 }], programs: [], timestamp: 1728970757, batch_id: 42 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "6qnw9fyYTydt6WSxR9yfWt678iYCeXHkXmGuDWtGqfmh", recipient: "6qnw9fyYTydt6WSxR9yfWt678iYCeXHkXmGuDWtGqfmh", amount: 0, nonce: 1 }], programs: [], timestamp: 1728970757, batch_id: 42 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (1075494580392169950635696507467365606202567255803725878248560400006715484056, 6634283658149827200897908662281967042451406371393941984953281316689521262275), b: (QuadExtField(17683391921155811874140855496396701559844544344477732441248730745482089009780 + 14470451550748872972764483564030613385823666703978408301136837749296919402840 * u), QuadExtField(12237322271595582988839884372080131867030883347969264715710529452005036224240 + 20016027402526755827113132099202573972040942446555646683327020830465651572766 * u)), c: (18740944206222407818645011265973947259740231971416508050225243091650791664529, 10485092089581934327151309099455802424101726004618897418121838391438449414374) }
Serialized proof bytes: [152, 39, 7, 99, 162, 96, 45, 160, 214, 189, 248, 166, 10, 83, 120, 72, 37, 3, 254, 47, 241, 248, 82, 56, 38, 181, 79, 32, 87, 181, 96, 2, 195, 190, 145, 115, 227, 24, 24, 250, 150, 221, 127, 89, 173, 21, 142, 65, 139, 24, 250, 55, 219, 255, 116, 173, 219, 127, 140, 128, 25, 223, 170, 14, 116, 18, 163, 63, 70, 168, 168, 142, 144, 159, 35, 153, 212, 205, 195, 26, 196, 97, 58, 209, 181, 86, 204, 73, 79, 18, 40, 202, 244, 113, 24, 39, 88, 217, 246, 92, 68, 130, 160, 204, 93, 172, 151, 58, 125, 8, 25, 4, 171, 66, 98, 237, 19, 67, 242, 71, 170, 240, 222, 243, 62, 252, 253, 31, 240, 110, 5, 22, 173, 138, 118, 93, 32, 238, 89, 74, 78, 122, 48, 177, 8, 143, 118, 212, 13, 227, 243, 62, 120, 140, 161, 96, 54, 20, 14, 27, 30, 0, 71, 61, 173, 124, 22, 134, 63, 44, 3, 153, 34, 235, 177, 204, 233, 228, 49, 52, 183, 166, 12, 148, 151, 102, 173, 137, 135, 171, 64, 172, 145, 235, 112, 91, 232, 152, 174, 82, 150, 13, 70, 154, 250, 40, 199, 138, 4, 211, 215, 220, 83, 164, 67, 169, 25, 129, 176, 49, 159, 255, 110, 41, 230, 144, 5, 16, 144, 219, 2, 226, 249, 175, 178, 248, 115, 200, 183, 71, 3, 123, 8, 134, 229, 143, 71, 11, 255, 201, 39, 177, 16, 90, 46, 23]
Proof generated: Proof { data: [152, 39, 7, 99, 162, 96, 45, 160, 214, 189, 248, 166, 10, 83, 120, 72, 37, 3, 254, 47, 241, 248, 82, 56, 38, 181, 79, 32, 87, 181, 96, 2, 195, 190, 145, 115, 227, 24, 24, 250, 150, 221, 127, 89, 173, 21, 142, 65, 139, 24, 250, 55, 219, 255, 116, 173, 219, 127, 140, 128, 25, 223, 170, 14, 116, 18, 163, 63, 70, 168, 168, 142, 144, 159, 35, 153, 212, 205, 195, 26, 196, 97, 58, 209, 181, 86, 204, 73, 79, 18, 40, 202, 244, 113, 24, 39, 88, 217, 246, 92, 68, 130, 160, 204, 93, 172, 151, 58, 125, 8, 25, 4, 171, 66, 98, 237, 19, 67, 242, 71, 170, 240, 222, 243, 62, 252, 253, 31, 240, 110, 5, 22, 173, 138, 118, 93, 32, 238, 89, 74, 78, 122, 48, 177, 8, 143, 118, 212, 13, 227, 243, 62, 120, 140, 161, 96, 54, 20, 14, 27, 30, 0, 71, 61, 173, 124, 22, 134, 63, 44, 3, 153, 34, 235, 177, 204, 233, 228, 49, 52, 183, 166, 12, 148, 151, 102, 173, 137, 135, 171, 64, 172, 145, 235, 112, 91, 232, 152, 174, 82, 150, 13, 70, 154, 250, 40, 199, 138, 4, 211, 215, 220, 83, 164, 67, 169, 25, 129, 176, 49, 159, 255, 110, 41, 230, 144, 5, 16, 144, 219, 2, 226, 249, 175, 178, 248, 115, 200, 183, 71, 3, 123, 8, 134, 229, 143, 71, 11, 255, 201, 39, 177, 16, 90, 46, 23] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [152, 39, 7, 99, 162, 96, 45, 160, 214, 189, 248, 166, 10, 83, 120, 72, 37, 3, 254, 47, 241, 248, 82, 56, 38, 181, 79, 32, 87, 181, 96, 2, 195, 190, 145, 115, 227, 24, 24, 250, 150, 221, 127, 89, 173, 21, 142, 65, 139, 24, 250, 55, 219, 255, 116, 173, 219, 127, 140, 128, 25, 223, 170, 14, 116, 18, 163, 63, 70, 168, 168, 142, 144, 159, 35, 153, 212, 205, 195, 26, 196, 97, 58, 209, 181, 86, 204, 73, 79, 18, 40, 202, 244, 113, 24, 39, 88, 217, 246, 92, 68, 130, 160, 204, 93, 172, 151, 58, 125, 8, 25, 4, 171, 66, 98, 237, 19, 67, 242, 71, 170, 240, 222, 243, 62, 252, 253, 31, 240, 110, 5, 22, 173, 138, 118, 93, 32, 238, 89, 74, 78, 122, 48, 177, 8, 143, 118, 212, 13, 227, 243, 62, 120, 140, 161, 96, 54, 20, 14, 27, 30, 0, 71, 61, 173, 124, 22, 134, 63, 44, 3, 153, 34, 235, 177, 204, 233, 228, 49, 52, 183, 166, 12, 148, 151, 102, 173, 137, 135, 171, 64, 172, 145, 235, 112, 91, 232, 152, 174, 82, 150, 13, 70, 154, 250, 40, 199, 138, 4, 211, 215, 220, 83, 164, 67, 169, 25, 129, 176, 49, 159, 255, 110, 41, 230, 144, 5, 16, 144, 219, 2, 226, 249, 175, 178, 248, 115, 200, 183, 71, 3, 123, 8, 134, 229, 143, 71, 11, 255, 201, 39, 177, 16, 90, 46, 23] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [152, 39, 7, 99, 162, 96, 45, 160, 214, 189, 248, 166, 10, 83, 120, 72, 37, 3, 254, 47, 241, 248, 82, 56, 38, 181, 79, 32, 87, 181, 96, 2, 195, 190, 145, 115, 227, 24, 24, 250, 150, 221, 127, 89, 173, 21, 142, 65, 139, 24, 250, 55, 219, 255, 116, 173, 219, 127, 140, 128, 25, 223, 170, 14, 116, 18, 163, 63, 70, 168, 168, 142, 144, 159, 35, 153, 212, 205, 195, 26, 196, 97, 58, 209, 181, 86, 204, 73, 79, 18, 40, 202, 244, 113, 24, 39, 88, 217, 246, 92, 68, 130, 160, 204, 93, 172, 151, 58, 125, 8, 25, 4, 171, 66, 98, 237, 19, 67, 242, 71, 170, 240, 222, 243, 62, 252, 253, 31, 240, 110, 5, 22, 173, 138, 118, 93, 32, 238, 89, 74, 78, 122, 48, 177, 8, 143, 118, 212, 13, 227, 243, 62, 120, 140, 161, 96, 54, 20, 14, 27, 30, 0, 71, 61, 173, 124, 22, 134, 63, 44, 3, 153, 34, 235, 177, 204, 233, 228, 49, 52, 183, 166, 12, 148, 151, 102, 173, 137, 135, 171, 64, 172, 145, 235, 112, 91, 232, 152, 174, 82, 150, 13, 70, 154, 250, 40, 199, 138, 4, 211, 215, 220, 83, 164, 67, 169, 25, 129, 176, 49, 159, 255, 110, 41, 230, 144, 5, 16, 144, 219, 2, 226, 249, 175, 178, 248, 115, 200, 183, 71, 3, 123, 8, 134, 229, 143, 71, 11, 255, 201, 39, 177, 16, 90, 46, 23] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", recipient: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", recipient: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", amount: 0, nonce: 1 }], programs: [], timestamp: 1728971001, batch_id: 44 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", recipient: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", amount: 0, nonce: 1 }], programs: [], timestamp: 1728971001, batch_id: 44 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (20499750173033834610531897478782233772657007378474679816144215206605540260684, 8337716937950342461097419967920388547440727616527246004983921651840903465658), b: (QuadExtField(11332818858205716183227923426126938317284268246123731474878611588913153653320 + 19955929663072351621583908540749556667243901046473668688797933908993547688248 * u), QuadExtField(7202040803852751112060225459915726883732377901413496191989834838885037319021 + 1276184546892213628977062294115404638590055261380090590810873391491187473118 * u)), c: (18711639419704000612648158636804289202818769949165712307394080720086972263438, 16566076743608551783921094036981620455903213010795671419797229442621229671769) }
Serialized proof bytes: [76, 123, 203, 89, 76, 87, 132, 39, 112, 236, 105, 118, 198, 254, 253, 192, 204, 73, 144, 9, 138, 102, 17, 161, 155, 165, 49, 75, 138, 114, 82, 45, 186, 202, 30, 225, 48, 86, 226, 138, 161, 83, 193, 104, 220, 6, 186, 87, 147, 96, 69, 231, 251, 14, 144, 207, 204, 195, 70, 125, 5, 251, 110, 18, 72, 58, 79, 77, 6, 153, 62, 250, 230, 116, 182, 159, 138, 175, 238, 67, 154, 42, 110, 123, 89, 140, 183, 214, 40, 63, 132, 34, 238, 37, 14, 25, 56, 217, 71, 201, 240, 60, 11, 226, 62, 59, 35, 189, 44, 146, 199, 159, 127, 103, 69, 40, 181, 14, 255, 4, 6, 47, 82, 125, 234, 167, 30, 44, 109, 35, 9, 50, 81, 107, 106, 61, 160, 201, 150, 95, 113, 89, 18, 8, 36, 216, 3, 107, 13, 195, 97, 139, 213, 204, 181, 120, 236, 53, 236, 15, 222, 250, 59, 255, 49, 218, 56, 239, 236, 19, 116, 49, 227, 82, 107, 181, 221, 238, 12, 13, 229, 140, 4, 9, 103, 86, 27, 181, 123, 75, 210, 2, 14, 108, 0, 248, 249, 203, 165, 198, 35, 148, 224, 113, 19, 228, 166, 96, 199, 122, 227, 0, 55, 209, 219, 215, 95, 102, 7, 64, 160, 105, 94, 41, 89, 165, 238, 167, 106, 230, 172, 196, 205, 31, 173, 94, 22, 241, 16, 231, 113, 52, 151, 3, 69, 214, 254, 89, 242, 16, 100, 128, 49, 17, 160, 164]
Proof generated: Proof { data: [76, 123, 203, 89, 76, 87, 132, 39, 112, 236, 105, 118, 198, 254, 253, 192, 204, 73, 144, 9, 138, 102, 17, 161, 155, 165, 49, 75, 138, 114, 82, 45, 186, 202, 30, 225, 48, 86, 226, 138, 161, 83, 193, 104, 220, 6, 186, 87, 147, 96, 69, 231, 251, 14, 144, 207, 204, 195, 70, 125, 5, 251, 110, 18, 72, 58, 79, 77, 6, 153, 62, 250, 230, 116, 182, 159, 138, 175, 238, 67, 154, 42, 110, 123, 89, 140, 183, 214, 40, 63, 132, 34, 238, 37, 14, 25, 56, 217, 71, 201, 240, 60, 11, 226, 62, 59, 35, 189, 44, 146, 199, 159, 127, 103, 69, 40, 181, 14, 255, 4, 6, 47, 82, 125, 234, 167, 30, 44, 109, 35, 9, 50, 81, 107, 106, 61, 160, 201, 150, 95, 113, 89, 18, 8, 36, 216, 3, 107, 13, 195, 97, 139, 213, 204, 181, 120, 236, 53, 236, 15, 222, 250, 59, 255, 49, 218, 56, 239, 236, 19, 116, 49, 227, 82, 107, 181, 221, 238, 12, 13, 229, 140, 4, 9, 103, 86, 27, 181, 123, 75, 210, 2, 14, 108, 0, 248, 249, 203, 165, 198, 35, 148, 224, 113, 19, 228, 166, 96, 199, 122, 227, 0, 55, 209, 219, 215, 95, 102, 7, 64, 160, 105, 94, 41, 89, 165, 238, 167, 106, 230, 172, 196, 205, 31, 173, 94, 22, 241, 16, 231, 113, 52, 151, 3, 69, 214, 254, 89, 242, 16, 100, 128, 49, 17, 160, 164] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [76, 123, 203, 89, 76, 87, 132, 39, 112, 236, 105, 118, 198, 254, 253, 192, 204, 73, 144, 9, 138, 102, 17, 161, 155, 165, 49, 75, 138, 114, 82, 45, 186, 202, 30, 225, 48, 86, 226, 138, 161, 83, 193, 104, 220, 6, 186, 87, 147, 96, 69, 231, 251, 14, 144, 207, 204, 195, 70, 125, 5, 251, 110, 18, 72, 58, 79, 77, 6, 153, 62, 250, 230, 116, 182, 159, 138, 175, 238, 67, 154, 42, 110, 123, 89, 140, 183, 214, 40, 63, 132, 34, 238, 37, 14, 25, 56, 217, 71, 201, 240, 60, 11, 226, 62, 59, 35, 189, 44, 146, 199, 159, 127, 103, 69, 40, 181, 14, 255, 4, 6, 47, 82, 125, 234, 167, 30, 44, 109, 35, 9, 50, 81, 107, 106, 61, 160, 201, 150, 95, 113, 89, 18, 8, 36, 216, 3, 107, 13, 195, 97, 139, 213, 204, 181, 120, 236, 53, 236, 15, 222, 250, 59, 255, 49, 218, 56, 239, 236, 19, 116, 49, 227, 82, 107, 181, 221, 238, 12, 13, 229, 140, 4, 9, 103, 86, 27, 181, 123, 75, 210, 2, 14, 108, 0, 248, 249, 203, 165, 198, 35, 148, 224, 113, 19, 228, 166, 96, 199, 122, 227, 0, 55, 209, 219, 215, 95, 102, 7, 64, 160, 105, 94, 41, 89, 165, 238, 167, 106, 230, 172, 196, 205, 31, 173, 94, 22, 241, 16, 231, 113, 52, 151, 3, 69, 214, 254, 89, 242, 16, 100, 128, 49, 17, 160, 164] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [76, 123, 203, 89, 76, 87, 132, 39, 112, 236, 105, 118, 198, 254, 253, 192, 204, 73, 144, 9, 138, 102, 17, 161, 155, 165, 49, 75, 138, 114, 82, 45, 186, 202, 30, 225, 48, 86, 226, 138, 161, 83, 193, 104, 220, 6, 186, 87, 147, 96, 69, 231, 251, 14, 144, 207, 204, 195, 70, 125, 5, 251, 110, 18, 72, 58, 79, 77, 6, 153, 62, 250, 230, 116, 182, 159, 138, 175, 238, 67, 154, 42, 110, 123, 89, 140, 183, 214, 40, 63, 132, 34, 238, 37, 14, 25, 56, 217, 71, 201, 240, 60, 11, 226, 62, 59, 35, 189, 44, 146, 199, 159, 127, 103, 69, 40, 181, 14, 255, 4, 6, 47, 82, 125, 234, 167, 30, 44, 109, 35, 9, 50, 81, 107, 106, 61, 160, 201, 150, 95, 113, 89, 18, 8, 36, 216, 3, 107, 13, 195, 97, 139, 213, 204, 181, 120, 236, 53, 236, 15, 222, 250, 59, 255, 49, 218, 56, 239, 236, 19, 116, 49, 227, 82, 107, 181, 221, 238, 12, 13, 229, 140, 4, 9, 103, 86, 27, 181, 123, 75, 210, 2, 14, 108, 0, 248, 249, 203, 165, 198, 35, 148, 224, 113, 19, 228, 166, 96, 199, 122, 227, 0, 55, 209, 219, 215, 95, 102, 7, 64, 160, 105, 94, 41, 89, 165, 238, 167, 106, 230, 172, 196, 205, 31, 173, 94, 22, 241, 16, 231, 113, 52, 151, 3, 69, 214, 254, 89, 242, 16, 100, 128, 49, 17, 160, 164] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", recipient: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", recipient: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", amount: 0, nonce: 1 }], programs: [], timestamp: 1728971046, batch_id: 45 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", recipient: "8FaqRi2WP3Lkfiz4vER4KCSaMKCLW159oL69c9UF75t3", amount: 0, nonce: 1 }], programs: [], timestamp: 1728971046, batch_id: 45 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (21667135368042634848735539326247029412417836908553461521453088194959825249937, 13648435278482828822316672828596033195050441278413329634067504476642623025590), b: (QuadExtField(20278346773758972919946430226756238400925773925238893701478966201584322991661 + 4503956870844802326487536231167554132979097107195032359500381584428369196378 * u), QuadExtField(7762343121894787969967195607297584606660240096651265872864965552084077070775 + 8576127359211153751688921696719767048028494334006816920702988517299230886735 * u)), c: (2461257009216951410261443232165039674887044096482077326029954034314567488409, 1791085493213470436474396191683599753957775590236439961244398893062798078801) }
Serialized proof bytes: [145, 38, 241, 159, 129, 254, 158, 71, 164, 88, 21, 9, 251, 15, 173, 153, 20, 143, 254, 112, 196, 114, 10, 175, 209, 8, 204, 191, 253, 41, 231, 47, 182, 241, 114, 65, 197, 184, 97, 107, 4, 167, 226, 175, 26, 150, 142, 51, 39, 43, 222, 159, 194, 248, 131, 249, 255, 162, 115, 210, 152, 189, 44, 158, 45, 214, 213, 124, 115, 152, 199, 223, 68, 121, 192, 142, 176, 83, 245, 237, 229, 92, 122, 89, 95, 101, 53, 179, 34, 236, 60, 202, 53, 35, 213, 44, 90, 53, 116, 202, 93, 24, 136, 176, 88, 139, 221, 103, 5, 196, 190, 110, 116, 0, 241, 133, 101, 254, 39, 151, 150, 78, 22, 71, 53, 38, 245, 9, 183, 73, 13, 27, 42, 67, 217, 213, 117, 72, 64, 111, 234, 201, 42, 28, 228, 166, 219, 229, 70, 83, 124, 245, 156, 217, 200, 131, 156, 84, 41, 17, 79, 75, 52, 62, 134, 208, 40, 230, 57, 61, 246, 15, 254, 142, 108, 115, 21, 241, 68, 5, 210, 225, 4, 246, 189, 81, 167, 127, 131, 234, 245, 18, 153, 19, 104, 58, 161, 18, 84, 97, 130, 210, 154, 147, 83, 41, 214, 81, 99, 73, 93, 180, 127, 182, 98, 25, 243, 230, 190, 94, 168, 5, 113, 5, 81, 115, 98, 72, 63, 152, 84, 218, 34, 12, 227, 37, 36, 249, 222, 51, 35, 95, 115, 96, 79, 244, 43, 13, 122, 144, 65, 71, 237, 183, 245, 3]
Proof generated: Proof { data: [145, 38, 241, 159, 129, 254, 158, 71, 164, 88, 21, 9, 251, 15, 173, 153, 20, 143, 254, 112, 196, 114, 10, 175, 209, 8, 204, 191, 253, 41, 231, 47, 182, 241, 114, 65, 197, 184, 97, 107, 4, 167, 226, 175, 26, 150, 142, 51, 39, 43, 222, 159, 194, 248, 131, 249, 255, 162, 115, 210, 152, 189, 44, 158, 45, 214, 213, 124, 115, 152, 199, 223, 68, 121, 192, 142, 176, 83, 245, 237, 229, 92, 122, 89, 95, 101, 53, 179, 34, 236, 60, 202, 53, 35, 213, 44, 90, 53, 116, 202, 93, 24, 136, 176, 88, 139, 221, 103, 5, 196, 190, 110, 116, 0, 241, 133, 101, 254, 39, 151, 150, 78, 22, 71, 53, 38, 245, 9, 183, 73, 13, 27, 42, 67, 217, 213, 117, 72, 64, 111, 234, 201, 42, 28, 228, 166, 219, 229, 70, 83, 124, 245, 156, 217, 200, 131, 156, 84, 41, 17, 79, 75, 52, 62, 134, 208, 40, 230, 57, 61, 246, 15, 254, 142, 108, 115, 21, 241, 68, 5, 210, 225, 4, 246, 189, 81, 167, 127, 131, 234, 245, 18, 153, 19, 104, 58, 161, 18, 84, 97, 130, 210, 154, 147, 83, 41, 214, 81, 99, 73, 93, 180, 127, 182, 98, 25, 243, 230, 190, 94, 168, 5, 113, 5, 81, 115, 98, 72, 63, 152, 84, 218, 34, 12, 227, 37, 36, 249, 222, 51, 35, 95, 115, 96, 79, 244, 43, 13, 122, 144, 65, 71, 237, 183, 245, 3] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [145, 38, 241, 159, 129, 254, 158, 71, 164, 88, 21, 9, 251, 15, 173, 153, 20, 143, 254, 112, 196, 114, 10, 175, 209, 8, 204, 191, 253, 41, 231, 47, 182, 241, 114, 65, 197, 184, 97, 107, 4, 167, 226, 175, 26, 150, 142, 51, 39, 43, 222, 159, 194, 248, 131, 249, 255, 162, 115, 210, 152, 189, 44, 158, 45, 214, 213, 124, 115, 152, 199, 223, 68, 121, 192, 142, 176, 83, 245, 237, 229, 92, 122, 89, 95, 101, 53, 179, 34, 236, 60, 202, 53, 35, 213, 44, 90, 53, 116, 202, 93, 24, 136, 176, 88, 139, 221, 103, 5, 196, 190, 110, 116, 0, 241, 133, 101, 254, 39, 151, 150, 78, 22, 71, 53, 38, 245, 9, 183, 73, 13, 27, 42, 67, 217, 213, 117, 72, 64, 111, 234, 201, 42, 28, 228, 166, 219, 229, 70, 83, 124, 245, 156, 217, 200, 131, 156, 84, 41, 17, 79, 75, 52, 62, 134, 208, 40, 230, 57, 61, 246, 15, 254, 142, 108, 115, 21, 241, 68, 5, 210, 225, 4, 246, 189, 81, 167, 127, 131, 234, 245, 18, 153, 19, 104, 58, 161, 18, 84, 97, 130, 210, 154, 147, 83, 41, 214, 81, 99, 73, 93, 180, 127, 182, 98, 25, 243, 230, 190, 94, 168, 5, 113, 5, 81, 115, 98, 72, 63, 152, 84, 218, 34, 12, 227, 37, 36, 249, 222, 51, 35, 95, 115, 96, 79, 244, 43, 13, 122, 144, 65, 71, 237, 183, 245, 3] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [145, 38, 241, 159, 129, 254, 158, 71, 164, 88, 21, 9, 251, 15, 173, 153, 20, 143, 254, 112, 196, 114, 10, 175, 209, 8, 204, 191, 253, 41, 231, 47, 182, 241, 114, 65, 197, 184, 97, 107, 4, 167, 226, 175, 26, 150, 142, 51, 39, 43, 222, 159, 194, 248, 131, 249, 255, 162, 115, 210, 152, 189, 44, 158, 45, 214, 213, 124, 115, 152, 199, 223, 68, 121, 192, 142, 176, 83, 245, 237, 229, 92, 122, 89, 95, 101, 53, 179, 34, 236, 60, 202, 53, 35, 213, 44, 90, 53, 116, 202, 93, 24, 136, 176, 88, 139, 221, 103, 5, 196, 190, 110, 116, 0, 241, 133, 101, 254, 39, 151, 150, 78, 22, 71, 53, 38, 245, 9, 183, 73, 13, 27, 42, 67, 217, 213, 117, 72, 64, 111, 234, 201, 42, 28, 228, 166, 219, 229, 70, 83, 124, 245, 156, 217, 200, 131, 156, 84, 41, 17, 79, 75, 52, 62, 134, 208, 40, 230, 57, 61, 246, 15, 254, 142, 108, 115, 21, 241, 68, 5, 210, 225, 4, 246, 189, 81, 167, 127, 131, 234, 245, 18, 153, 19, 104, 58, 161, 18, 84, 97, 130, 210, 154, 147, 83, 41, 214, 81, 99, 73, 93, 180, 127, 182, 98, 25, 243, 230, 190, 94, 168, 5, 113, 5, 81, 115, 98, 72, 63, 152, 84, 218, 34, 12, 227, 37, 36, 249, 222, 51, 35, 95, 115, 96, 79, 244, 43, 13, 122, 144, 65, 71, 237, 183, 245, 3] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "Ec4Xzxpu6WSvNsZqUvvJouDwuXNnn4ts9j22u3BB7wcu", recipient: "Ec4Xzxpu6WSvNsZqUvvJouDwuXNnn4ts9j22u3BB7wcu", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "Ec4Xzxpu6WSvNsZqUvvJouDwuXNnn4ts9j22u3BB7wcu", recipient: "Ec4Xzxpu6WSvNsZqUvvJouDwuXNnn4ts9j22u3BB7wcu", amount: 0, nonce: 1 }], programs: [], timestamp: 1728971706, batch_id: 47 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "Ec4Xzxpu6WSvNsZqUvvJouDwuXNnn4ts9j22u3BB7wcu", recipient: "Ec4Xzxpu6WSvNsZqUvvJouDwuXNnn4ts9j22u3BB7wcu", amount: 0, nonce: 1 }], programs: [], timestamp: 1728971706, batch_id: 47 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (9949839284725575877561850761216851618205091709687632611473018349629144041479, 6915172882249495495115930450472230864578360035226748269764674971802260715252), b: (QuadExtField(7216755494203518707424052599875523161042708401291988628728578854563511448658 + 3693260790471186091905985475787267873614623879941903271897564171929119745367 * u), QuadExtField(20063787453507262212271113835056457032269742037708521994080608293243289793793 + 21537336325559508807002826699932929872742153603140016385090025334849361969234 * u)), c: (16371302317212918565626818602116437819525329907427221017983598013836946839003, 4999627591751997779359503823732824267168835344730348424726480782184300477141) }
Serialized proof bytes: [7, 8, 136, 230, 79, 243, 242, 63, 108, 37, 152, 156, 127, 237, 81, 74, 168, 91, 253, 43, 56, 107, 41, 120, 77, 175, 136, 187, 210, 104, 255, 21, 244, 182, 183, 163, 167, 71, 76, 195, 28, 38, 116, 52, 192, 129, 141, 61, 77, 6, 44, 95, 103, 8, 231, 35, 163, 135, 10, 225, 97, 217, 73, 15, 82, 180, 150, 19, 126, 162, 175, 164, 92, 172, 173, 108, 108, 195, 22, 252, 7, 199, 200, 61, 199, 38, 169, 217, 25, 51, 203, 171, 242, 137, 244, 15, 87, 229, 49, 3, 241, 76, 194, 123, 197, 165, 141, 232, 152, 144, 104, 82, 216, 14, 115, 92, 22, 134, 136, 75, 204, 114, 173, 102, 192, 79, 42, 8, 1, 245, 14, 159, 159, 219, 107, 116, 30, 54, 212, 82, 245, 68, 5, 47, 163, 7, 227, 141, 210, 164, 163, 106, 106, 190, 77, 73, 134, 179, 91, 44, 82, 128, 112, 160, 237, 227, 66, 91, 113, 186, 60, 116, 213, 104, 199, 124, 151, 77, 125, 114, 117, 202, 225, 179, 190, 80, 144, 174, 75, 179, 157, 175, 219, 21, 152, 208, 59, 7, 54, 58, 212, 46, 210, 237, 107, 21, 31, 29, 89, 51, 135, 241, 185, 238, 252, 36, 90, 222, 104, 127, 40, 212, 49, 36, 213, 250, 40, 72, 39, 229, 169, 104, 142, 2, 62, 214, 103, 150, 125, 97, 251, 173, 218, 214, 237, 221, 208, 235, 235, 14, 13, 37, 94, 176, 13, 11]
Proof generated: Proof { data: [7, 8, 136, 230, 79, 243, 242, 63, 108, 37, 152, 156, 127, 237, 81, 74, 168, 91, 253, 43, 56, 107, 41, 120, 77, 175, 136, 187, 210, 104, 255, 21, 244, 182, 183, 163, 167, 71, 76, 195, 28, 38, 116, 52, 192, 129, 141, 61, 77, 6, 44, 95, 103, 8, 231, 35, 163, 135, 10, 225, 97, 217, 73, 15, 82, 180, 150, 19, 126, 162, 175, 164, 92, 172, 173, 108, 108, 195, 22, 252, 7, 199, 200, 61, 199, 38, 169, 217, 25, 51, 203, 171, 242, 137, 244, 15, 87, 229, 49, 3, 241, 76, 194, 123, 197, 165, 141, 232, 152, 144, 104, 82, 216, 14, 115, 92, 22, 134, 136, 75, 204, 114, 173, 102, 192, 79, 42, 8, 1, 245, 14, 159, 159, 219, 107, 116, 30, 54, 212, 82, 245, 68, 5, 47, 163, 7, 227, 141, 210, 164, 163, 106, 106, 190, 77, 73, 134, 179, 91, 44, 82, 128, 112, 160, 237, 227, 66, 91, 113, 186, 60, 116, 213, 104, 199, 124, 151, 77, 125, 114, 117, 202, 225, 179, 190, 80, 144, 174, 75, 179, 157, 175, 219, 21, 152, 208, 59, 7, 54, 58, 212, 46, 210, 237, 107, 21, 31, 29, 89, 51, 135, 241, 185, 238, 252, 36, 90, 222, 104, 127, 40, 212, 49, 36, 213, 250, 40, 72, 39, 229, 169, 104, 142, 2, 62, 214, 103, 150, 125, 97, 251, 173, 218, 214, 237, 221, 208, 235, 235, 14, 13, 37, 94, 176, 13, 11] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [7, 8, 136, 230, 79, 243, 242, 63, 108, 37, 152, 156, 127, 237, 81, 74, 168, 91, 253, 43, 56, 107, 41, 120, 77, 175, 136, 187, 210, 104, 255, 21, 244, 182, 183, 163, 167, 71, 76, 195, 28, 38, 116, 52, 192, 129, 141, 61, 77, 6, 44, 95, 103, 8, 231, 35, 163, 135, 10, 225, 97, 217, 73, 15, 82, 180, 150, 19, 126, 162, 175, 164, 92, 172, 173, 108, 108, 195, 22, 252, 7, 199, 200, 61, 199, 38, 169, 217, 25, 51, 203, 171, 242, 137, 244, 15, 87, 229, 49, 3, 241, 76, 194, 123, 197, 165, 141, 232, 152, 144, 104, 82, 216, 14, 115, 92, 22, 134, 136, 75, 204, 114, 173, 102, 192, 79, 42, 8, 1, 245, 14, 159, 159, 219, 107, 116, 30, 54, 212, 82, 245, 68, 5, 47, 163, 7, 227, 141, 210, 164, 163, 106, 106, 190, 77, 73, 134, 179, 91, 44, 82, 128, 112, 160, 237, 227, 66, 91, 113, 186, 60, 116, 213, 104, 199, 124, 151, 77, 125, 114, 117, 202, 225, 179, 190, 80, 144, 174, 75, 179, 157, 175, 219, 21, 152, 208, 59, 7, 54, 58, 212, 46, 210, 237, 107, 21, 31, 29, 89, 51, 135, 241, 185, 238, 252, 36, 90, 222, 104, 127, 40, 212, 49, 36, 213, 250, 40, 72, 39, 229, 169, 104, 142, 2, 62, 214, 103, 150, 125, 97, 251, 173, 218, 214, 237, 221, 208, 235, 235, 14, 13, 37, 94, 176, 13, 11] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [7, 8, 136, 230, 79, 243, 242, 63, 108, 37, 152, 156, 127, 237, 81, 74, 168, 91, 253, 43, 56, 107, 41, 120, 77, 175, 136, 187, 210, 104, 255, 21, 244, 182, 183, 163, 167, 71, 76, 195, 28, 38, 116, 52, 192, 129, 141, 61, 77, 6, 44, 95, 103, 8, 231, 35, 163, 135, 10, 225, 97, 217, 73, 15, 82, 180, 150, 19, 126, 162, 175, 164, 92, 172, 173, 108, 108, 195, 22, 252, 7, 199, 200, 61, 199, 38, 169, 217, 25, 51, 203, 171, 242, 137, 244, 15, 87, 229, 49, 3, 241, 76, 194, 123, 197, 165, 141, 232, 152, 144, 104, 82, 216, 14, 115, 92, 22, 134, 136, 75, 204, 114, 173, 102, 192, 79, 42, 8, 1, 245, 14, 159, 159, 219, 107, 116, 30, 54, 212, 82, 245, 68, 5, 47, 163, 7, 227, 141, 210, 164, 163, 106, 106, 190, 77, 73, 134, 179, 91, 44, 82, 128, 112, 160, 237, 227, 66, 91, 113, 186, 60, 116, 213, 104, 199, 124, 151, 77, 125, 114, 117, 202, 225, 179, 190, 80, 144, 174, 75, 179, 157, 175, 219, 21, 152, 208, 59, 7, 54, 58, 212, 46, 210, 237, 107, 21, 31, 29, 89, 51, 135, 241, 185, 238, 252, 36, 90, 222, 104, 127, 40, 212, 49, 36, 213, 250, 40, 72, 39, 229, 169, 104, 142, 2, 62, 214, 103, 150, 125, 97, 251, 173, 218, 214, 237, 221, 208, 235, 235, 14, 13, 37, 94, 176, 13, 11] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "5KiYh4VVYP4hTqyhuwKWa3mKszWBguvX3VnVX3u5mSas", recipient: "5KiYh4VVYP4hTqyhuwKWa3mKszWBguvX3VnVX3u5mSas", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "5KiYh4VVYP4hTqyhuwKWa3mKszWBguvX3VnVX3u5mSas", recipient: "5KiYh4VVYP4hTqyhuwKWa3mKszWBguvX3VnVX3u5mSas", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973580, batch_id: 49 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "5KiYh4VVYP4hTqyhuwKWa3mKszWBguvX3VnVX3u5mSas", recipient: "5KiYh4VVYP4hTqyhuwKWa3mKszWBguvX3VnVX3u5mSas", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973580, batch_id: 49 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (6392379176017853751530174638246279676500525771847370261479572575560178388285, 6679253066418409607495777131946504968265842200319009647652243742454587098221), b: (QuadExtField(8696493978148934543432160349406437773778354656521744758795424699841203515563 + 7822094115652798533919057853943053470687232347171883344092392651344402614286 * u), QuadExtField(2662152562332199263286495193962389832633051652179954216139043226355252998982 + 14337509309352978882009033864176828530413470428601262570671836959080969844901 * u)), c: (8077950148655498574746716428970657315042148835120971266862085484288259207798, 20970863890129822066999683653306184650924763979361014979940944177490314507798) }
Serialized proof bytes: [61, 205, 188, 110, 137, 61, 169, 115, 10, 0, 185, 128, 147, 42, 150, 180, 117, 81, 157, 187, 100, 163, 93, 16, 6, 52, 118, 146, 89, 245, 33, 14, 109, 132, 104, 80, 210, 156, 91, 153, 93, 67, 142, 186, 166, 212, 194, 115, 85, 56, 133, 201, 102, 157, 242, 119, 52, 248, 63, 143, 193, 82, 196, 14, 171, 176, 101, 116, 211, 99, 135, 20, 35, 22, 12, 104, 242, 199, 225, 194, 187, 179, 100, 219, 231, 181, 253, 101, 192, 247, 26, 136, 137, 10, 58, 19, 14, 136, 162, 153, 154, 225, 34, 250, 126, 154, 49, 149, 221, 148, 67, 160, 96, 88, 124, 20, 198, 221, 173, 144, 40, 230, 227, 12, 252, 37, 75, 17, 70, 51, 22, 10, 237, 242, 46, 98, 201, 145, 186, 37, 184, 76, 121, 224, 47, 250, 33, 41, 222, 84, 113, 252, 34, 102, 44, 149, 150, 185, 226, 5, 165, 184, 26, 102, 77, 25, 39, 183, 72, 24, 228, 10, 57, 49, 157, 225, 9, 61, 158, 223, 63, 34, 26, 144, 97, 73, 108, 40, 33, 190, 178, 159, 118, 50, 137, 251, 221, 106, 59, 225, 179, 134, 246, 138, 45, 184, 45, 201, 219, 246, 153, 114, 40, 241, 3, 154, 215, 192, 109, 195, 47, 245, 219, 17, 22, 182, 45, 130, 12, 227, 8, 87, 205, 126, 38, 103, 71, 134, 149, 0, 55, 234, 102, 174, 36, 189, 233, 212, 198, 233, 213, 67, 157, 22, 93, 174]
Proof generated: Proof { data: [61, 205, 188, 110, 137, 61, 169, 115, 10, 0, 185, 128, 147, 42, 150, 180, 117, 81, 157, 187, 100, 163, 93, 16, 6, 52, 118, 146, 89, 245, 33, 14, 109, 132, 104, 80, 210, 156, 91, 153, 93, 67, 142, 186, 166, 212, 194, 115, 85, 56, 133, 201, 102, 157, 242, 119, 52, 248, 63, 143, 193, 82, 196, 14, 171, 176, 101, 116, 211, 99, 135, 20, 35, 22, 12, 104, 242, 199, 225, 194, 187, 179, 100, 219, 231, 181, 253, 101, 192, 247, 26, 136, 137, 10, 58, 19, 14, 136, 162, 153, 154, 225, 34, 250, 126, 154, 49, 149, 221, 148, 67, 160, 96, 88, 124, 20, 198, 221, 173, 144, 40, 230, 227, 12, 252, 37, 75, 17, 70, 51, 22, 10, 237, 242, 46, 98, 201, 145, 186, 37, 184, 76, 121, 224, 47, 250, 33, 41, 222, 84, 113, 252, 34, 102, 44, 149, 150, 185, 226, 5, 165, 184, 26, 102, 77, 25, 39, 183, 72, 24, 228, 10, 57, 49, 157, 225, 9, 61, 158, 223, 63, 34, 26, 144, 97, 73, 108, 40, 33, 190, 178, 159, 118, 50, 137, 251, 221, 106, 59, 225, 179, 134, 246, 138, 45, 184, 45, 201, 219, 246, 153, 114, 40, 241, 3, 154, 215, 192, 109, 195, 47, 245, 219, 17, 22, 182, 45, 130, 12, 227, 8, 87, 205, 126, 38, 103, 71, 134, 149, 0, 55, 234, 102, 174, 36, 189, 233, 212, 198, 233, 213, 67, 157, 22, 93, 174] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [61, 205, 188, 110, 137, 61, 169, 115, 10, 0, 185, 128, 147, 42, 150, 180, 117, 81, 157, 187, 100, 163, 93, 16, 6, 52, 118, 146, 89, 245, 33, 14, 109, 132, 104, 80, 210, 156, 91, 153, 93, 67, 142, 186, 166, 212, 194, 115, 85, 56, 133, 201, 102, 157, 242, 119, 52, 248, 63, 143, 193, 82, 196, 14, 171, 176, 101, 116, 211, 99, 135, 20, 35, 22, 12, 104, 242, 199, 225, 194, 187, 179, 100, 219, 231, 181, 253, 101, 192, 247, 26, 136, 137, 10, 58, 19, 14, 136, 162, 153, 154, 225, 34, 250, 126, 154, 49, 149, 221, 148, 67, 160, 96, 88, 124, 20, 198, 221, 173, 144, 40, 230, 227, 12, 252, 37, 75, 17, 70, 51, 22, 10, 237, 242, 46, 98, 201, 145, 186, 37, 184, 76, 121, 224, 47, 250, 33, 41, 222, 84, 113, 252, 34, 102, 44, 149, 150, 185, 226, 5, 165, 184, 26, 102, 77, 25, 39, 183, 72, 24, 228, 10, 57, 49, 157, 225, 9, 61, 158, 223, 63, 34, 26, 144, 97, 73, 108, 40, 33, 190, 178, 159, 118, 50, 137, 251, 221, 106, 59, 225, 179, 134, 246, 138, 45, 184, 45, 201, 219, 246, 153, 114, 40, 241, 3, 154, 215, 192, 109, 195, 47, 245, 219, 17, 22, 182, 45, 130, 12, 227, 8, 87, 205, 126, 38, 103, 71, 134, 149, 0, 55, 234, 102, 174, 36, 189, 233, 212, 198, 233, 213, 67, 157, 22, 93, 174] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [61, 205, 188, 110, 137, 61, 169, 115, 10, 0, 185, 128, 147, 42, 150, 180, 117, 81, 157, 187, 100, 163, 93, 16, 6, 52, 118, 146, 89, 245, 33, 14, 109, 132, 104, 80, 210, 156, 91, 153, 93, 67, 142, 186, 166, 212, 194, 115, 85, 56, 133, 201, 102, 157, 242, 119, 52, 248, 63, 143, 193, 82, 196, 14, 171, 176, 101, 116, 211, 99, 135, 20, 35, 22, 12, 104, 242, 199, 225, 194, 187, 179, 100, 219, 231, 181, 253, 101, 192, 247, 26, 136, 137, 10, 58, 19, 14, 136, 162, 153, 154, 225, 34, 250, 126, 154, 49, 149, 221, 148, 67, 160, 96, 88, 124, 20, 198, 221, 173, 144, 40, 230, 227, 12, 252, 37, 75, 17, 70, 51, 22, 10, 237, 242, 46, 98, 201, 145, 186, 37, 184, 76, 121, 224, 47, 250, 33, 41, 222, 84, 113, 252, 34, 102, 44, 149, 150, 185, 226, 5, 165, 184, 26, 102, 77, 25, 39, 183, 72, 24, 228, 10, 57, 49, 157, 225, 9, 61, 158, 223, 63, 34, 26, 144, 97, 73, 108, 40, 33, 190, 178, 159, 118, 50, 137, 251, 221, 106, 59, 225, 179, 134, 246, 138, 45, 184, 45, 201, 219, 246, 153, 114, 40, 241, 3, 154, 215, 192, 109, 195, 47, 245, 219, 17, 22, 182, 45, 130, 12, 227, 8, 87, 205, 126, 38, 103, 71, 134, 149, 0, 55, 234, 102, 174, 36, 189, 233, 212, 198, 233, 213, 67, 157, 22, 93, 174] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "2KXxi4qNPEAejZnRQYRtEifMuwMTjkjmsTqdGtSqcawm", recipient: "2KXxi4qNPEAejZnRQYRtEifMuwMTjkjmsTqdGtSqcawm", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "2KXxi4qNPEAejZnRQYRtEifMuwMTjkjmsTqdGtSqcawm", recipient: "2KXxi4qNPEAejZnRQYRtEifMuwMTjkjmsTqdGtSqcawm", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973809, batch_id: 51 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "2KXxi4qNPEAejZnRQYRtEifMuwMTjkjmsTqdGtSqcawm", recipient: "2KXxi4qNPEAejZnRQYRtEifMuwMTjkjmsTqdGtSqcawm", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973809, batch_id: 51 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (19059281063409330091927946916050039156157789209862005439735170320505804280251, 12627701566593248779647062392620481440088815174151250679013341639647103996101), b: (QuadExtField(9630843426694962521836555285650358617391324257053840736180599300416019895526 + 18002055209879543379200039285284048075334323715227880871787326568459490508996 * u), QuadExtField(14822723189397910753014536712940370384358123862108191387464728024663935631424 + 5112819172301213325761401392856610160936156061041754117520601707692942038880 * u)), c: (4357998256146235917225975275627196960219465262050269298115755631641455814263, 19440044466137530982008944783077080799489338020339624806694657301374387164849) }
Serialized proof bytes: [187, 209, 233, 239, 80, 132, 154, 185, 213, 8, 142, 232, 172, 249, 240, 247, 57, 6, 186, 172, 142, 194, 22, 173, 222, 132, 20, 123, 185, 43, 35, 42, 197, 208, 70, 123, 237, 121, 241, 197, 19, 130, 148, 165, 89, 68, 109, 89, 33, 64, 252, 105, 198, 107, 151, 107, 12, 198, 210, 50, 155, 6, 235, 155, 230, 20, 236, 232, 213, 192, 171, 251, 70, 164, 193, 97, 16, 77, 139, 1, 97, 197, 225, 237, 199, 181, 190, 244, 59, 202, 252, 190, 60, 221, 74, 21, 196, 64, 147, 145, 230, 186, 39, 149, 155, 234, 5, 20, 227, 213, 146, 24, 58, 56, 62, 101, 91, 244, 114, 141, 8, 192, 81, 24, 91, 205, 204, 39, 64, 64, 187, 137, 64, 94, 1, 139, 171, 184, 171, 71, 99, 57, 42, 13, 56, 228, 93, 20, 186, 241, 198, 233, 209, 150, 146, 61, 48, 93, 197, 32, 96, 23, 174, 204, 94, 109, 33, 48, 102, 110, 120, 206, 193, 87, 22, 192, 162, 69, 86, 92, 188, 24, 205, 157, 194, 220, 103, 54, 203, 192, 77, 11, 119, 230, 48, 199, 49, 5, 28, 201, 208, 181, 170, 95, 180, 152, 114, 78, 10, 176, 19, 129, 46, 33, 181, 131, 238, 191, 35, 93, 35, 138, 162, 9, 177, 22, 145, 111, 145, 232, 109, 174, 47, 103, 174, 91, 97, 176, 179, 72, 102, 51, 248, 28, 124, 118, 113, 154, 193, 179, 202, 8, 221, 172, 250, 170]
Proof generated: Proof { data: [187, 209, 233, 239, 80, 132, 154, 185, 213, 8, 142, 232, 172, 249, 240, 247, 57, 6, 186, 172, 142, 194, 22, 173, 222, 132, 20, 123, 185, 43, 35, 42, 197, 208, 70, 123, 237, 121, 241, 197, 19, 130, 148, 165, 89, 68, 109, 89, 33, 64, 252, 105, 198, 107, 151, 107, 12, 198, 210, 50, 155, 6, 235, 155, 230, 20, 236, 232, 213, 192, 171, 251, 70, 164, 193, 97, 16, 77, 139, 1, 97, 197, 225, 237, 199, 181, 190, 244, 59, 202, 252, 190, 60, 221, 74, 21, 196, 64, 147, 145, 230, 186, 39, 149, 155, 234, 5, 20, 227, 213, 146, 24, 58, 56, 62, 101, 91, 244, 114, 141, 8, 192, 81, 24, 91, 205, 204, 39, 64, 64, 187, 137, 64, 94, 1, 139, 171, 184, 171, 71, 99, 57, 42, 13, 56, 228, 93, 20, 186, 241, 198, 233, 209, 150, 146, 61, 48, 93, 197, 32, 96, 23, 174, 204, 94, 109, 33, 48, 102, 110, 120, 206, 193, 87, 22, 192, 162, 69, 86, 92, 188, 24, 205, 157, 194, 220, 103, 54, 203, 192, 77, 11, 119, 230, 48, 199, 49, 5, 28, 201, 208, 181, 170, 95, 180, 152, 114, 78, 10, 176, 19, 129, 46, 33, 181, 131, 238, 191, 35, 93, 35, 138, 162, 9, 177, 22, 145, 111, 145, 232, 109, 174, 47, 103, 174, 91, 97, 176, 179, 72, 102, 51, 248, 28, 124, 118, 113, 154, 193, 179, 202, 8, 221, 172, 250, 170] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [187, 209, 233, 239, 80, 132, 154, 185, 213, 8, 142, 232, 172, 249, 240, 247, 57, 6, 186, 172, 142, 194, 22, 173, 222, 132, 20, 123, 185, 43, 35, 42, 197, 208, 70, 123, 237, 121, 241, 197, 19, 130, 148, 165, 89, 68, 109, 89, 33, 64, 252, 105, 198, 107, 151, 107, 12, 198, 210, 50, 155, 6, 235, 155, 230, 20, 236, 232, 213, 192, 171, 251, 70, 164, 193, 97, 16, 77, 139, 1, 97, 197, 225, 237, 199, 181, 190, 244, 59, 202, 252, 190, 60, 221, 74, 21, 196, 64, 147, 145, 230, 186, 39, 149, 155, 234, 5, 20, 227, 213, 146, 24, 58, 56, 62, 101, 91, 244, 114, 141, 8, 192, 81, 24, 91, 205, 204, 39, 64, 64, 187, 137, 64, 94, 1, 139, 171, 184, 171, 71, 99, 57, 42, 13, 56, 228, 93, 20, 186, 241, 198, 233, 209, 150, 146, 61, 48, 93, 197, 32, 96, 23, 174, 204, 94, 109, 33, 48, 102, 110, 120, 206, 193, 87, 22, 192, 162, 69, 86, 92, 188, 24, 205, 157, 194, 220, 103, 54, 203, 192, 77, 11, 119, 230, 48, 199, 49, 5, 28, 201, 208, 181, 170, 95, 180, 152, 114, 78, 10, 176, 19, 129, 46, 33, 181, 131, 238, 191, 35, 93, 35, 138, 162, 9, 177, 22, 145, 111, 145, 232, 109, 174, 47, 103, 174, 91, 97, 176, 179, 72, 102, 51, 248, 28, 124, 118, 113, 154, 193, 179, 202, 8, 221, 172, 250, 170] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [187, 209, 233, 239, 80, 132, 154, 185, 213, 8, 142, 232, 172, 249, 240, 247, 57, 6, 186, 172, 142, 194, 22, 173, 222, 132, 20, 123, 185, 43, 35, 42, 197, 208, 70, 123, 237, 121, 241, 197, 19, 130, 148, 165, 89, 68, 109, 89, 33, 64, 252, 105, 198, 107, 151, 107, 12, 198, 210, 50, 155, 6, 235, 155, 230, 20, 236, 232, 213, 192, 171, 251, 70, 164, 193, 97, 16, 77, 139, 1, 97, 197, 225, 237, 199, 181, 190, 244, 59, 202, 252, 190, 60, 221, 74, 21, 196, 64, 147, 145, 230, 186, 39, 149, 155, 234, 5, 20, 227, 213, 146, 24, 58, 56, 62, 101, 91, 244, 114, 141, 8, 192, 81, 24, 91, 205, 204, 39, 64, 64, 187, 137, 64, 94, 1, 139, 171, 184, 171, 71, 99, 57, 42, 13, 56, 228, 93, 20, 186, 241, 198, 233, 209, 150, 146, 61, 48, 93, 197, 32, 96, 23, 174, 204, 94, 109, 33, 48, 102, 110, 120, 206, 193, 87, 22, 192, 162, 69, 86, 92, 188, 24, 205, 157, 194, 220, 103, 54, 203, 192, 77, 11, 119, 230, 48, 199, 49, 5, 28, 201, 208, 181, 170, 95, 180, 152, 114, 78, 10, 176, 19, 129, 46, 33, 181, 131, 238, 191, 35, 93, 35, 138, 162, 9, 177, 22, 145, 111, 145, 232, 109, 174, 47, 103, 174, 91, 97, 176, 179, 72, 102, 51, 248, 28, 124, 118, 113, 154, 193, 179, 202, 8, 221, 172, 250, 170] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "83nyUfxM2XQGkb33Vi8RViKuPaW3HXVQinYQhctzi8kM", recipient: "83nyUfxM2XQGkb33Vi8RViKuPaW3HXVQinYQhctzi8kM", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "83nyUfxM2XQGkb33Vi8RViKuPaW3HXVQinYQhctzi8kM", recipient: "83nyUfxM2XQGkb33Vi8RViKuPaW3HXVQinYQhctzi8kM", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973824, batch_id: 53 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "83nyUfxM2XQGkb33Vi8RViKuPaW3HXVQinYQhctzi8kM", recipient: "83nyUfxM2XQGkb33Vi8RViKuPaW3HXVQinYQhctzi8kM", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973824, batch_id: 53 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (18196123249596827187803471561142751287386938821282173085863388721792301448335, 7501499267917615901747073804298256206824802108927986923216952381553597001118), b: (QuadExtField(4251547769824209714629043793008216038058089654986835336398484421077540513979 + 13441693103426230713416417391718430378234365957345649172325388355211316566627 * u), QuadExtField(8638220122425662746980171509229708686865378983047056233609115025704219230919 + 14028625819609247642226393615927512460581385997711741764872812192147401735221 * u)), c: (15931987894980502435250271991486716708133439856426363426264106464205337097154, 3078215120834261168590887246101908439041861867782070511769745046326267393813) }
Serialized proof bytes: [143, 188, 208, 236, 237, 92, 219, 53, 164, 133, 52, 141, 204, 163, 129, 201, 225, 221, 54, 184, 205, 6, 139, 42, 8, 218, 189, 194, 10, 164, 58, 40, 158, 173, 8, 58, 106, 76, 190, 191, 99, 134, 38, 56, 204, 73, 247, 41, 241, 107, 122, 147, 22, 192, 24, 170, 92, 125, 71, 61, 184, 178, 149, 16, 187, 168, 251, 234, 156, 42, 249, 51, 153, 66, 164, 140, 165, 71, 243, 164, 120, 30, 108, 201, 208, 202, 165, 34, 45, 36, 179, 96, 111, 74, 102, 9, 99, 26, 166, 247, 27, 202, 68, 84, 226, 52, 180, 254, 193, 116, 197, 172, 241, 141, 150, 139, 39, 234, 243, 87, 187, 201, 75, 89, 139, 186, 183, 29, 199, 194, 138, 36, 55, 188, 151, 86, 146, 166, 65, 169, 136, 211, 14, 5, 35, 84, 167, 102, 123, 103, 111, 146, 30, 68, 71, 23, 48, 15, 25, 19, 53, 252, 93, 162, 139, 8, 30, 66, 101, 96, 244, 53, 172, 182, 205, 37, 150, 86, 154, 186, 64, 98, 80, 77, 231, 194, 3, 194, 187, 235, 3, 159, 194, 115, 201, 228, 51, 190, 251, 61, 41, 158, 220, 208, 82, 154, 184, 112, 143, 197, 23, 160, 222, 7, 244, 168, 192, 147, 105, 237, 130, 47, 57, 35, 21, 183, 36, 93, 96, 242, 225, 91, 43, 195, 203, 205, 251, 248, 232, 154, 152, 210, 38, 196, 26, 208, 214, 32, 196, 102, 231, 151, 64, 53, 206, 6]
Proof generated: Proof { data: [143, 188, 208, 236, 237, 92, 219, 53, 164, 133, 52, 141, 204, 163, 129, 201, 225, 221, 54, 184, 205, 6, 139, 42, 8, 218, 189, 194, 10, 164, 58, 40, 158, 173, 8, 58, 106, 76, 190, 191, 99, 134, 38, 56, 204, 73, 247, 41, 241, 107, 122, 147, 22, 192, 24, 170, 92, 125, 71, 61, 184, 178, 149, 16, 187, 168, 251, 234, 156, 42, 249, 51, 153, 66, 164, 140, 165, 71, 243, 164, 120, 30, 108, 201, 208, 202, 165, 34, 45, 36, 179, 96, 111, 74, 102, 9, 99, 26, 166, 247, 27, 202, 68, 84, 226, 52, 180, 254, 193, 116, 197, 172, 241, 141, 150, 139, 39, 234, 243, 87, 187, 201, 75, 89, 139, 186, 183, 29, 199, 194, 138, 36, 55, 188, 151, 86, 146, 166, 65, 169, 136, 211, 14, 5, 35, 84, 167, 102, 123, 103, 111, 146, 30, 68, 71, 23, 48, 15, 25, 19, 53, 252, 93, 162, 139, 8, 30, 66, 101, 96, 244, 53, 172, 182, 205, 37, 150, 86, 154, 186, 64, 98, 80, 77, 231, 194, 3, 194, 187, 235, 3, 159, 194, 115, 201, 228, 51, 190, 251, 61, 41, 158, 220, 208, 82, 154, 184, 112, 143, 197, 23, 160, 222, 7, 244, 168, 192, 147, 105, 237, 130, 47, 57, 35, 21, 183, 36, 93, 96, 242, 225, 91, 43, 195, 203, 205, 251, 248, 232, 154, 152, 210, 38, 196, 26, 208, 214, 32, 196, 102, 231, 151, 64, 53, 206, 6] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [143, 188, 208, 236, 237, 92, 219, 53, 164, 133, 52, 141, 204, 163, 129, 201, 225, 221, 54, 184, 205, 6, 139, 42, 8, 218, 189, 194, 10, 164, 58, 40, 158, 173, 8, 58, 106, 76, 190, 191, 99, 134, 38, 56, 204, 73, 247, 41, 241, 107, 122, 147, 22, 192, 24, 170, 92, 125, 71, 61, 184, 178, 149, 16, 187, 168, 251, 234, 156, 42, 249, 51, 153, 66, 164, 140, 165, 71, 243, 164, 120, 30, 108, 201, 208, 202, 165, 34, 45, 36, 179, 96, 111, 74, 102, 9, 99, 26, 166, 247, 27, 202, 68, 84, 226, 52, 180, 254, 193, 116, 197, 172, 241, 141, 150, 139, 39, 234, 243, 87, 187, 201, 75, 89, 139, 186, 183, 29, 199, 194, 138, 36, 55, 188, 151, 86, 146, 166, 65, 169, 136, 211, 14, 5, 35, 84, 167, 102, 123, 103, 111, 146, 30, 68, 71, 23, 48, 15, 25, 19, 53, 252, 93, 162, 139, 8, 30, 66, 101, 96, 244, 53, 172, 182, 205, 37, 150, 86, 154, 186, 64, 98, 80, 77, 231, 194, 3, 194, 187, 235, 3, 159, 194, 115, 201, 228, 51, 190, 251, 61, 41, 158, 220, 208, 82, 154, 184, 112, 143, 197, 23, 160, 222, 7, 244, 168, 192, 147, 105, 237, 130, 47, 57, 35, 21, 183, 36, 93, 96, 242, 225, 91, 43, 195, 203, 205, 251, 248, 232, 154, 152, 210, 38, 196, 26, 208, 214, 32, 196, 102, 231, 151, 64, 53, 206, 6] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [143, 188, 208, 236, 237, 92, 219, 53, 164, 133, 52, 141, 204, 163, 129, 201, 225, 221, 54, 184, 205, 6, 139, 42, 8, 218, 189, 194, 10, 164, 58, 40, 158, 173, 8, 58, 106, 76, 190, 191, 99, 134, 38, 56, 204, 73, 247, 41, 241, 107, 122, 147, 22, 192, 24, 170, 92, 125, 71, 61, 184, 178, 149, 16, 187, 168, 251, 234, 156, 42, 249, 51, 153, 66, 164, 140, 165, 71, 243, 164, 120, 30, 108, 201, 208, 202, 165, 34, 45, 36, 179, 96, 111, 74, 102, 9, 99, 26, 166, 247, 27, 202, 68, 84, 226, 52, 180, 254, 193, 116, 197, 172, 241, 141, 150, 139, 39, 234, 243, 87, 187, 201, 75, 89, 139, 186, 183, 29, 199, 194, 138, 36, 55, 188, 151, 86, 146, 166, 65, 169, 136, 211, 14, 5, 35, 84, 167, 102, 123, 103, 111, 146, 30, 68, 71, 23, 48, 15, 25, 19, 53, 252, 93, 162, 139, 8, 30, 66, 101, 96, 244, 53, 172, 182, 205, 37, 150, 86, 154, 186, 64, 98, 80, 77, 231, 194, 3, 194, 187, 235, 3, 159, 194, 115, 201, 228, 51, 190, 251, 61, 41, 158, 220, 208, 82, 154, 184, 112, 143, 197, 23, 160, 222, 7, 244, 168, 192, 147, 105, 237, 130, 47, 57, 35, 21, 183, 36, 93, 96, 242, 225, 91, 43, 195, 203, 205, 251, 248, 232, 154, 152, 210, 38, 196, 26, 208, 214, 32, 196, 102, 231, 151, 64, 53, 206, 6] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "HaKq7T21DvbwXVRBJpjUSzAP32W53ttffCAKcS619DVu", recipient: "HaKq7T21DvbwXVRBJpjUSzAP32W53ttffCAKcS619DVu", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "HaKq7T21DvbwXVRBJpjUSzAP32W53ttffCAKcS619DVu", recipient: "HaKq7T21DvbwXVRBJpjUSzAP32W53ttffCAKcS619DVu", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973852, batch_id: 55 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "HaKq7T21DvbwXVRBJpjUSzAP32W53ttffCAKcS619DVu", recipient: "HaKq7T21DvbwXVRBJpjUSzAP32W53ttffCAKcS619DVu", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973852, batch_id: 55 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (3754832983038194149989357321942732340739778267774256270373712469552221264143, 21090958969489816313053393451807205061122840800877960530787116327282235657137), b: (QuadExtField(14101850228651380833033026709542484340077654119577722608576023803113941842040 + 15921838433301542916255698352662372646437588062943685196467312800483471938414 * u), QuadExtField(10201181429754911606831657139798976356329693158111026406156328144155976229052 + 7274657710339063481620940874141007623160737209112375229000989958851810896242 * u)), c: (4876920448586065370766064894286531493934291637133888623256892500712055736827, 785860461767022433695312423799476331095666242055492253888880548880332901009) }
Serialized proof bytes: [15, 25, 226, 78, 103, 224, 98, 6, 124, 131, 69, 139, 129, 138, 243, 191, 173, 85, 169, 175, 112, 45, 69, 73, 188, 216, 115, 244, 255, 40, 77, 8, 177, 203, 3, 7, 185, 19, 87, 194, 130, 202, 202, 144, 146, 137, 68, 199, 112, 30, 27, 173, 33, 135, 20, 139, 210, 176, 212, 85, 75, 15, 161, 174, 120, 56, 13, 110, 174, 15, 217, 225, 70, 217, 170, 241, 227, 70, 42, 130, 254, 23, 56, 166, 7, 118, 19, 184, 189, 173, 183, 10, 72, 93, 45, 31, 110, 83, 214, 153, 208, 238, 38, 65, 252, 2, 142, 37, 9, 197, 233, 137, 167, 151, 177, 181, 122, 34, 73, 222, 159, 244, 116, 120, 242, 112, 51, 35, 188, 96, 197, 144, 104, 35, 136, 169, 224, 156, 45, 198, 51, 116, 157, 104, 181, 102, 106, 108, 207, 255, 64, 54, 2, 74, 6, 9, 1, 170, 141, 22, 114, 41, 145, 100, 153, 98, 27, 33, 45, 183, 27, 188, 252, 2, 46, 170, 255, 21, 32, 127, 229, 113, 149, 210, 103, 10, 189, 59, 115, 79, 21, 16, 251, 137, 61, 171, 229, 237, 125, 204, 189, 161, 62, 104, 117, 20, 130, 22, 121, 207, 230, 60, 43, 39, 99, 199, 190, 241, 58, 62, 57, 61, 200, 10, 145, 74, 156, 254, 239, 37, 3, 185, 82, 135, 225, 188, 84, 89, 224, 82, 91, 115, 242, 46, 237, 248, 139, 83, 57, 63, 108, 149, 0, 200, 188, 1]
Proof generated: Proof { data: [15, 25, 226, 78, 103, 224, 98, 6, 124, 131, 69, 139, 129, 138, 243, 191, 173, 85, 169, 175, 112, 45, 69, 73, 188, 216, 115, 244, 255, 40, 77, 8, 177, 203, 3, 7, 185, 19, 87, 194, 130, 202, 202, 144, 146, 137, 68, 199, 112, 30, 27, 173, 33, 135, 20, 139, 210, 176, 212, 85, 75, 15, 161, 174, 120, 56, 13, 110, 174, 15, 217, 225, 70, 217, 170, 241, 227, 70, 42, 130, 254, 23, 56, 166, 7, 118, 19, 184, 189, 173, 183, 10, 72, 93, 45, 31, 110, 83, 214, 153, 208, 238, 38, 65, 252, 2, 142, 37, 9, 197, 233, 137, 167, 151, 177, 181, 122, 34, 73, 222, 159, 244, 116, 120, 242, 112, 51, 35, 188, 96, 197, 144, 104, 35, 136, 169, 224, 156, 45, 198, 51, 116, 157, 104, 181, 102, 106, 108, 207, 255, 64, 54, 2, 74, 6, 9, 1, 170, 141, 22, 114, 41, 145, 100, 153, 98, 27, 33, 45, 183, 27, 188, 252, 2, 46, 170, 255, 21, 32, 127, 229, 113, 149, 210, 103, 10, 189, 59, 115, 79, 21, 16, 251, 137, 61, 171, 229, 237, 125, 204, 189, 161, 62, 104, 117, 20, 130, 22, 121, 207, 230, 60, 43, 39, 99, 199, 190, 241, 58, 62, 57, 61, 200, 10, 145, 74, 156, 254, 239, 37, 3, 185, 82, 135, 225, 188, 84, 89, 224, 82, 91, 115, 242, 46, 237, 248, 139, 83, 57, 63, 108, 149, 0, 200, 188, 1] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [15, 25, 226, 78, 103, 224, 98, 6, 124, 131, 69, 139, 129, 138, 243, 191, 173, 85, 169, 175, 112, 45, 69, 73, 188, 216, 115, 244, 255, 40, 77, 8, 177, 203, 3, 7, 185, 19, 87, 194, 130, 202, 202, 144, 146, 137, 68, 199, 112, 30, 27, 173, 33, 135, 20, 139, 210, 176, 212, 85, 75, 15, 161, 174, 120, 56, 13, 110, 174, 15, 217, 225, 70, 217, 170, 241, 227, 70, 42, 130, 254, 23, 56, 166, 7, 118, 19, 184, 189, 173, 183, 10, 72, 93, 45, 31, 110, 83, 214, 153, 208, 238, 38, 65, 252, 2, 142, 37, 9, 197, 233, 137, 167, 151, 177, 181, 122, 34, 73, 222, 159, 244, 116, 120, 242, 112, 51, 35, 188, 96, 197, 144, 104, 35, 136, 169, 224, 156, 45, 198, 51, 116, 157, 104, 181, 102, 106, 108, 207, 255, 64, 54, 2, 74, 6, 9, 1, 170, 141, 22, 114, 41, 145, 100, 153, 98, 27, 33, 45, 183, 27, 188, 252, 2, 46, 170, 255, 21, 32, 127, 229, 113, 149, 210, 103, 10, 189, 59, 115, 79, 21, 16, 251, 137, 61, 171, 229, 237, 125, 204, 189, 161, 62, 104, 117, 20, 130, 22, 121, 207, 230, 60, 43, 39, 99, 199, 190, 241, 58, 62, 57, 61, 200, 10, 145, 74, 156, 254, 239, 37, 3, 185, 82, 135, 225, 188, 84, 89, 224, 82, 91, 115, 242, 46, 237, 248, 139, 83, 57, 63, 108, 149, 0, 200, 188, 1] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [15, 25, 226, 78, 103, 224, 98, 6, 124, 131, 69, 139, 129, 138, 243, 191, 173, 85, 169, 175, 112, 45, 69, 73, 188, 216, 115, 244, 255, 40, 77, 8, 177, 203, 3, 7, 185, 19, 87, 194, 130, 202, 202, 144, 146, 137, 68, 199, 112, 30, 27, 173, 33, 135, 20, 139, 210, 176, 212, 85, 75, 15, 161, 174, 120, 56, 13, 110, 174, 15, 217, 225, 70, 217, 170, 241, 227, 70, 42, 130, 254, 23, 56, 166, 7, 118, 19, 184, 189, 173, 183, 10, 72, 93, 45, 31, 110, 83, 214, 153, 208, 238, 38, 65, 252, 2, 142, 37, 9, 197, 233, 137, 167, 151, 177, 181, 122, 34, 73, 222, 159, 244, 116, 120, 242, 112, 51, 35, 188, 96, 197, 144, 104, 35, 136, 169, 224, 156, 45, 198, 51, 116, 157, 104, 181, 102, 106, 108, 207, 255, 64, 54, 2, 74, 6, 9, 1, 170, 141, 22, 114, 41, 145, 100, 153, 98, 27, 33, 45, 183, 27, 188, 252, 2, 46, 170, 255, 21, 32, 127, 229, 113, 149, 210, 103, 10, 189, 59, 115, 79, 21, 16, 251, 137, 61, 171, 229, 237, 125, 204, 189, 161, 62, 104, 117, 20, 130, 22, 121, 207, 230, 60, 43, 39, 99, 199, 190, 241, 58, 62, 57, 61, 200, 10, 145, 74, 156, 254, 239, 37, 3, 185, 82, 135, 225, 188, 84, 89, 224, 82, 91, 115, 242, 46, 237, 248, 139, 83, 57, 63, 108, 149, 0, 200, 188, 1] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "5AmxrbvnVZcyH3vYFCRfxKUzE5A7EBZHN7GrQ9jvPHQB", recipient: "5AmxrbvnVZcyH3vYFCRfxKUzE5A7EBZHN7GrQ9jvPHQB", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "5AmxrbvnVZcyH3vYFCRfxKUzE5A7EBZHN7GrQ9jvPHQB", recipient: "5AmxrbvnVZcyH3vYFCRfxKUzE5A7EBZHN7GrQ9jvPHQB", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973858, batch_id: 57 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "5AmxrbvnVZcyH3vYFCRfxKUzE5A7EBZHN7GrQ9jvPHQB", recipient: "5AmxrbvnVZcyH3vYFCRfxKUzE5A7EBZHN7GrQ9jvPHQB", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973858, batch_id: 57 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (17820880928201331319055284327586921183421136457241439335772211509024142698298, 16786676613805173156505244463167390930344287849745772879955603823633759369095), b: (QuadExtField(4871067385146040689158266044680768906352581893211470388017263862872961157537 + 7037359282226267344006672522176898130616427899008096353738778479321187626784 * u), QuadExtField(12149176025157789559677654310771444527295556355391699425254741097906930515436 + 17360031539405804658469147833606612319109537505402964229929297877143957627451 * u)), c: (5520253435461786484701833963374184802907981467794496594946178199623485787282, 1369471402333543956712329158033167029137862618246042218218535202720316873102) }
Serialized proof bytes: [58, 167, 192, 22, 43, 242, 251, 255, 146, 9, 169, 112, 119, 174, 83, 217, 35, 73, 7, 249, 126, 231, 81, 36, 224, 192, 218, 126, 219, 66, 102, 39, 135, 119, 162, 18, 107, 103, 84, 6, 73, 185, 181, 241, 148, 37, 140, 243, 232, 152, 143, 208, 3, 45, 209, 174, 230, 120, 140, 116, 25, 236, 28, 165, 161, 137, 103, 34, 2, 61, 124, 166, 40, 143, 93, 137, 78, 10, 84, 118, 36, 167, 183, 92, 183, 37, 216, 58, 86, 181, 208, 13, 43, 237, 196, 10, 32, 47, 72, 85, 98, 172, 126, 141, 61, 13, 232, 90, 181, 103, 48, 59, 248, 232, 86, 39, 248, 48, 189, 221, 251, 141, 161, 87, 19, 1, 143, 15, 236, 253, 56, 14, 185, 104, 219, 5, 75, 81, 45, 84, 245, 102, 196, 33, 116, 229, 157, 236, 90, 18, 210, 120, 75, 234, 11, 98, 160, 48, 220, 26, 59, 98, 81, 147, 122, 102, 182, 5, 208, 30, 91, 27, 122, 160, 176, 23, 92, 136, 169, 127, 18, 143, 62, 116, 181, 95, 244, 158, 253, 109, 97, 166, 146, 140, 194, 103, 64, 68, 174, 198, 162, 247, 176, 31, 104, 63, 174, 40, 239, 68, 114, 134, 81, 188, 176, 145, 33, 207, 48, 246, 75, 90, 52, 12, 142, 89, 183, 212, 67, 0, 250, 73, 89, 181, 229, 160, 196, 57, 34, 69, 132, 40, 90, 42, 169, 184, 86, 178, 164, 36, 189, 124, 229, 23, 7, 3]
Proof generated: Proof { data: [58, 167, 192, 22, 43, 242, 251, 255, 146, 9, 169, 112, 119, 174, 83, 217, 35, 73, 7, 249, 126, 231, 81, 36, 224, 192, 218, 126, 219, 66, 102, 39, 135, 119, 162, 18, 107, 103, 84, 6, 73, 185, 181, 241, 148, 37, 140, 243, 232, 152, 143, 208, 3, 45, 209, 174, 230, 120, 140, 116, 25, 236, 28, 165, 161, 137, 103, 34, 2, 61, 124, 166, 40, 143, 93, 137, 78, 10, 84, 118, 36, 167, 183, 92, 183, 37, 216, 58, 86, 181, 208, 13, 43, 237, 196, 10, 32, 47, 72, 85, 98, 172, 126, 141, 61, 13, 232, 90, 181, 103, 48, 59, 248, 232, 86, 39, 248, 48, 189, 221, 251, 141, 161, 87, 19, 1, 143, 15, 236, 253, 56, 14, 185, 104, 219, 5, 75, 81, 45, 84, 245, 102, 196, 33, 116, 229, 157, 236, 90, 18, 210, 120, 75, 234, 11, 98, 160, 48, 220, 26, 59, 98, 81, 147, 122, 102, 182, 5, 208, 30, 91, 27, 122, 160, 176, 23, 92, 136, 169, 127, 18, 143, 62, 116, 181, 95, 244, 158, 253, 109, 97, 166, 146, 140, 194, 103, 64, 68, 174, 198, 162, 247, 176, 31, 104, 63, 174, 40, 239, 68, 114, 134, 81, 188, 176, 145, 33, 207, 48, 246, 75, 90, 52, 12, 142, 89, 183, 212, 67, 0, 250, 73, 89, 181, 229, 160, 196, 57, 34, 69, 132, 40, 90, 42, 169, 184, 86, 178, 164, 36, 189, 124, 229, 23, 7, 3] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [58, 167, 192, 22, 43, 242, 251, 255, 146, 9, 169, 112, 119, 174, 83, 217, 35, 73, 7, 249, 126, 231, 81, 36, 224, 192, 218, 126, 219, 66, 102, 39, 135, 119, 162, 18, 107, 103, 84, 6, 73, 185, 181, 241, 148, 37, 140, 243, 232, 152, 143, 208, 3, 45, 209, 174, 230, 120, 140, 116, 25, 236, 28, 165, 161, 137, 103, 34, 2, 61, 124, 166, 40, 143, 93, 137, 78, 10, 84, 118, 36, 167, 183, 92, 183, 37, 216, 58, 86, 181, 208, 13, 43, 237, 196, 10, 32, 47, 72, 85, 98, 172, 126, 141, 61, 13, 232, 90, 181, 103, 48, 59, 248, 232, 86, 39, 248, 48, 189, 221, 251, 141, 161, 87, 19, 1, 143, 15, 236, 253, 56, 14, 185, 104, 219, 5, 75, 81, 45, 84, 245, 102, 196, 33, 116, 229, 157, 236, 90, 18, 210, 120, 75, 234, 11, 98, 160, 48, 220, 26, 59, 98, 81, 147, 122, 102, 182, 5, 208, 30, 91, 27, 122, 160, 176, 23, 92, 136, 169, 127, 18, 143, 62, 116, 181, 95, 244, 158, 253, 109, 97, 166, 146, 140, 194, 103, 64, 68, 174, 198, 162, 247, 176, 31, 104, 63, 174, 40, 239, 68, 114, 134, 81, 188, 176, 145, 33, 207, 48, 246, 75, 90, 52, 12, 142, 89, 183, 212, 67, 0, 250, 73, 89, 181, 229, 160, 196, 57, 34, 69, 132, 40, 90, 42, 169, 184, 86, 178, 164, 36, 189, 124, 229, 23, 7, 3] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [58, 167, 192, 22, 43, 242, 251, 255, 146, 9, 169, 112, 119, 174, 83, 217, 35, 73, 7, 249, 126, 231, 81, 36, 224, 192, 218, 126, 219, 66, 102, 39, 135, 119, 162, 18, 107, 103, 84, 6, 73, 185, 181, 241, 148, 37, 140, 243, 232, 152, 143, 208, 3, 45, 209, 174, 230, 120, 140, 116, 25, 236, 28, 165, 161, 137, 103, 34, 2, 61, 124, 166, 40, 143, 93, 137, 78, 10, 84, 118, 36, 167, 183, 92, 183, 37, 216, 58, 86, 181, 208, 13, 43, 237, 196, 10, 32, 47, 72, 85, 98, 172, 126, 141, 61, 13, 232, 90, 181, 103, 48, 59, 248, 232, 86, 39, 248, 48, 189, 221, 251, 141, 161, 87, 19, 1, 143, 15, 236, 253, 56, 14, 185, 104, 219, 5, 75, 81, 45, 84, 245, 102, 196, 33, 116, 229, 157, 236, 90, 18, 210, 120, 75, 234, 11, 98, 160, 48, 220, 26, 59, 98, 81, 147, 122, 102, 182, 5, 208, 30, 91, 27, 122, 160, 176, 23, 92, 136, 169, 127, 18, 143, 62, 116, 181, 95, 244, 158, 253, 109, 97, 166, 146, 140, 194, 103, 64, 68, 174, 198, 162, 247, 176, 31, 104, 63, 174, 40, 239, 68, 114, 134, 81, 188, 176, 145, 33, 207, 48, 246, 75, 90, 52, 12, 142, 89, 183, 212, 67, 0, 250, 73, 89, 181, 229, 160, 196, 57, 34, 69, 132, 40, 90, 42, 169, 184, 86, 178, 164, 36, 189, 124, 229, 23, 7, 3] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "B439tPhMW6PGyYCzFZn3pHFNEWvrJfvj9Dv1pb3T4wW2", recipient: "B439tPhMW6PGyYCzFZn3pHFNEWvrJfvj9Dv1pb3T4wW2", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "B439tPhMW6PGyYCzFZn3pHFNEWvrJfvj9Dv1pb3T4wW2", recipient: "B439tPhMW6PGyYCzFZn3pHFNEWvrJfvj9Dv1pb3T4wW2", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973931, batch_id: 59 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "B439tPhMW6PGyYCzFZn3pHFNEWvrJfvj9Dv1pb3T4wW2", recipient: "B439tPhMW6PGyYCzFZn3pHFNEWvrJfvj9Dv1pb3T4wW2", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973931, batch_id: 59 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (2405426424041873754143173546888054485912362249245696733765864544969831660454, 1982700459372620132263481030120656411041407656779731772569731339507004465293), b: (QuadExtField(4102634744009101726546158677285273464424814469789342871337108634486697657727 + 17014457296333679939578882583800827883656112371373454586810279935664105382472 * u), QuadExtField(18422590540223041922604562372338430598075606413164603038158117014754050939187 + 522560463346609117926557676278348068733171430572442611621339076113447753413 * u)), c: (21169896480396572742765662561908121437916519584329843501176987039373363475374, 4901466212577588880392409837795753686449035146919021182785412774727032285665) }
Serialized proof bytes: [166, 187, 30, 113, 79, 168, 132, 113, 221, 227, 141, 13, 246, 65, 55, 35, 119, 66, 35, 47, 40, 95, 133, 2, 89, 43, 238, 222, 80, 108, 81, 5, 141, 224, 249, 63, 133, 189, 118, 196, 243, 217, 242, 192, 150, 174, 239, 204, 189, 117, 225, 112, 180, 41, 58, 207, 229, 147, 133, 99, 47, 43, 98, 4, 127, 133, 252, 160, 212, 136, 210, 40, 16, 53, 119, 126, 181, 235, 235, 119, 175, 146, 97, 187, 167, 136, 185, 117, 106, 169, 216, 67, 76, 2, 18, 9, 72, 226, 158, 101, 228, 200, 98, 154, 211, 85, 114, 224, 211, 23, 238, 200, 77, 250, 211, 90, 103, 90, 218, 253, 131, 110, 172, 138, 112, 215, 157, 37, 51, 153, 39, 247, 144, 86, 160, 98, 242, 73, 178, 43, 162, 76, 68, 114, 149, 59, 83, 221, 183, 183, 149, 218, 100, 221, 20, 111, 21, 209, 186, 40, 197, 150, 83, 253, 80, 121, 206, 138, 109, 234, 162, 64, 29, 77, 197, 11, 129, 172, 108, 216, 122, 166, 143, 212, 145, 158, 246, 216, 60, 194, 39, 1, 174, 115, 135, 179, 3, 93, 144, 183, 254, 108, 35, 234, 38, 230, 249, 224, 135, 153, 81, 74, 132, 1, 21, 49, 102, 220, 83, 88, 158, 188, 205, 46, 225, 169, 104, 125, 39, 214, 137, 2, 132, 87, 173, 145, 232, 239, 245, 112, 38, 22, 39, 249, 215, 114, 87, 150, 54, 76, 21, 59, 174, 33, 214, 10]
Proof generated: Proof { data: [166, 187, 30, 113, 79, 168, 132, 113, 221, 227, 141, 13, 246, 65, 55, 35, 119, 66, 35, 47, 40, 95, 133, 2, 89, 43, 238, 222, 80, 108, 81, 5, 141, 224, 249, 63, 133, 189, 118, 196, 243, 217, 242, 192, 150, 174, 239, 204, 189, 117, 225, 112, 180, 41, 58, 207, 229, 147, 133, 99, 47, 43, 98, 4, 127, 133, 252, 160, 212, 136, 210, 40, 16, 53, 119, 126, 181, 235, 235, 119, 175, 146, 97, 187, 167, 136, 185, 117, 106, 169, 216, 67, 76, 2, 18, 9, 72, 226, 158, 101, 228, 200, 98, 154, 211, 85, 114, 224, 211, 23, 238, 200, 77, 250, 211, 90, 103, 90, 218, 253, 131, 110, 172, 138, 112, 215, 157, 37, 51, 153, 39, 247, 144, 86, 160, 98, 242, 73, 178, 43, 162, 76, 68, 114, 149, 59, 83, 221, 183, 183, 149, 218, 100, 221, 20, 111, 21, 209, 186, 40, 197, 150, 83, 253, 80, 121, 206, 138, 109, 234, 162, 64, 29, 77, 197, 11, 129, 172, 108, 216, 122, 166, 143, 212, 145, 158, 246, 216, 60, 194, 39, 1, 174, 115, 135, 179, 3, 93, 144, 183, 254, 108, 35, 234, 38, 230, 249, 224, 135, 153, 81, 74, 132, 1, 21, 49, 102, 220, 83, 88, 158, 188, 205, 46, 225, 169, 104, 125, 39, 214, 137, 2, 132, 87, 173, 145, 232, 239, 245, 112, 38, 22, 39, 249, 215, 114, 87, 150, 54, 76, 21, 59, 174, 33, 214, 10] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [166, 187, 30, 113, 79, 168, 132, 113, 221, 227, 141, 13, 246, 65, 55, 35, 119, 66, 35, 47, 40, 95, 133, 2, 89, 43, 238, 222, 80, 108, 81, 5, 141, 224, 249, 63, 133, 189, 118, 196, 243, 217, 242, 192, 150, 174, 239, 204, 189, 117, 225, 112, 180, 41, 58, 207, 229, 147, 133, 99, 47, 43, 98, 4, 127, 133, 252, 160, 212, 136, 210, 40, 16, 53, 119, 126, 181, 235, 235, 119, 175, 146, 97, 187, 167, 136, 185, 117, 106, 169, 216, 67, 76, 2, 18, 9, 72, 226, 158, 101, 228, 200, 98, 154, 211, 85, 114, 224, 211, 23, 238, 200, 77, 250, 211, 90, 103, 90, 218, 253, 131, 110, 172, 138, 112, 215, 157, 37, 51, 153, 39, 247, 144, 86, 160, 98, 242, 73, 178, 43, 162, 76, 68, 114, 149, 59, 83, 221, 183, 183, 149, 218, 100, 221, 20, 111, 21, 209, 186, 40, 197, 150, 83, 253, 80, 121, 206, 138, 109, 234, 162, 64, 29, 77, 197, 11, 129, 172, 108, 216, 122, 166, 143, 212, 145, 158, 246, 216, 60, 194, 39, 1, 174, 115, 135, 179, 3, 93, 144, 183, 254, 108, 35, 234, 38, 230, 249, 224, 135, 153, 81, 74, 132, 1, 21, 49, 102, 220, 83, 88, 158, 188, 205, 46, 225, 169, 104, 125, 39, 214, 137, 2, 132, 87, 173, 145, 232, 239, 245, 112, 38, 22, 39, 249, 215, 114, 87, 150, 54, 76, 21, 59, 174, 33, 214, 10] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [166, 187, 30, 113, 79, 168, 132, 113, 221, 227, 141, 13, 246, 65, 55, 35, 119, 66, 35, 47, 40, 95, 133, 2, 89, 43, 238, 222, 80, 108, 81, 5, 141, 224, 249, 63, 133, 189, 118, 196, 243, 217, 242, 192, 150, 174, 239, 204, 189, 117, 225, 112, 180, 41, 58, 207, 229, 147, 133, 99, 47, 43, 98, 4, 127, 133, 252, 160, 212, 136, 210, 40, 16, 53, 119, 126, 181, 235, 235, 119, 175, 146, 97, 187, 167, 136, 185, 117, 106, 169, 216, 67, 76, 2, 18, 9, 72, 226, 158, 101, 228, 200, 98, 154, 211, 85, 114, 224, 211, 23, 238, 200, 77, 250, 211, 90, 103, 90, 218, 253, 131, 110, 172, 138, 112, 215, 157, 37, 51, 153, 39, 247, 144, 86, 160, 98, 242, 73, 178, 43, 162, 76, 68, 114, 149, 59, 83, 221, 183, 183, 149, 218, 100, 221, 20, 111, 21, 209, 186, 40, 197, 150, 83, 253, 80, 121, 206, 138, 109, 234, 162, 64, 29, 77, 197, 11, 129, 172, 108, 216, 122, 166, 143, 212, 145, 158, 246, 216, 60, 194, 39, 1, 174, 115, 135, 179, 3, 93, 144, 183, 254, 108, 35, 234, 38, 230, 249, 224, 135, 153, 81, 74, 132, 1, 21, 49, 102, 220, 83, 88, 158, 188, 205, 46, 225, 169, 104, 125, 39, 214, 137, 2, 132, 87, 173, 145, 232, 239, 245, 112, 38, 22, 39, 249, 215, 114, 87, 150, 54, 76, 21, 59, 174, 33, 214, 10] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "5NXJYzXQMdBfqpKA5cKSpndKSgNUGs1h5Htoy9MmA2fJ", recipient: "5NXJYzXQMdBfqpKA5cKSpndKSgNUGs1h5Htoy9MmA2fJ", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "5NXJYzXQMdBfqpKA5cKSpndKSgNUGs1h5Htoy9MmA2fJ", recipient: "5NXJYzXQMdBfqpKA5cKSpndKSgNUGs1h5Htoy9MmA2fJ", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973935, batch_id: 61 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "5NXJYzXQMdBfqpKA5cKSpndKSgNUGs1h5Htoy9MmA2fJ", recipient: "5NXJYzXQMdBfqpKA5cKSpndKSgNUGs1h5Htoy9MmA2fJ", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973935, batch_id: 61 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (16169808549262717829517200283339736250720187001639831155686577734966288477778, 13056122971765120973146707070356503669729199409013883025346800493634022059031), b: (QuadExtField(3340872168305667511535710006773715860733147259209989070829073933031070433160 + 12985972062116487693862322250825339018677185664540388745157838141295651417113 * u), QuadExtField(4829713669078311919590009873877476121027783876450952216398177360627016204881 + 11047754649466790320461870193908587168313474621506977266833107374011920846479 * u)), c: (13740327342602054207617871794001704348179589713505620803896496291560685873827, 6987807244864358519565377843045432280701481768354470465359027179244562801274) }
Serialized proof bytes: [82, 110, 202, 95, 185, 70, 2, 137, 11, 11, 47, 1, 184, 177, 99, 14, 218, 131, 161, 10, 30, 104, 124, 244, 170, 119, 125, 67, 141, 201, 191, 35, 23, 172, 160, 98, 171, 139, 244, 5, 146, 151, 193, 56, 75, 163, 149, 76, 186, 38, 130, 191, 203, 106, 132, 26, 243, 207, 93, 79, 244, 128, 221, 156, 136, 255, 178, 73, 224, 34, 30, 205, 30, 114, 255, 210, 130, 142, 99, 186, 153, 253, 80, 109, 185, 103, 92, 103, 217, 228, 17, 244, 219, 221, 98, 7, 25, 108, 215, 66, 213, 174, 161, 219, 188, 135, 244, 243, 101, 143, 11, 247, 164, 248, 234, 98, 219, 74, 109, 99, 205, 5, 95, 116, 186, 204, 181, 28, 81, 2, 233, 142, 230, 143, 254, 170, 22, 142, 29, 167, 34, 142, 133, 171, 229, 221, 254, 218, 37, 80, 4, 192, 139, 240, 90, 121, 100, 133, 173, 10, 143, 142, 74, 142, 220, 81, 84, 180, 173, 89, 130, 44, 189, 170, 26, 215, 239, 206, 46, 158, 64, 248, 51, 52, 214, 113, 139, 248, 186, 206, 108, 152, 163, 170, 148, 133, 68, 132, 214, 84, 199, 61, 164, 145, 90, 68, 239, 45, 177, 165, 254, 201, 170, 9, 2, 97, 133, 240, 151, 234, 234, 191, 96, 30, 122, 226, 73, 133, 146, 209, 139, 116, 83, 195, 229, 139, 92, 21, 46, 201, 42, 179, 88, 104, 229, 169, 16, 19, 131, 175, 235, 31, 112, 245, 114, 15]
Proof generated: Proof { data: [82, 110, 202, 95, 185, 70, 2, 137, 11, 11, 47, 1, 184, 177, 99, 14, 218, 131, 161, 10, 30, 104, 124, 244, 170, 119, 125, 67, 141, 201, 191, 35, 23, 172, 160, 98, 171, 139, 244, 5, 146, 151, 193, 56, 75, 163, 149, 76, 186, 38, 130, 191, 203, 106, 132, 26, 243, 207, 93, 79, 244, 128, 221, 156, 136, 255, 178, 73, 224, 34, 30, 205, 30, 114, 255, 210, 130, 142, 99, 186, 153, 253, 80, 109, 185, 103, 92, 103, 217, 228, 17, 244, 219, 221, 98, 7, 25, 108, 215, 66, 213, 174, 161, 219, 188, 135, 244, 243, 101, 143, 11, 247, 164, 248, 234, 98, 219, 74, 109, 99, 205, 5, 95, 116, 186, 204, 181, 28, 81, 2, 233, 142, 230, 143, 254, 170, 22, 142, 29, 167, 34, 142, 133, 171, 229, 221, 254, 218, 37, 80, 4, 192, 139, 240, 90, 121, 100, 133, 173, 10, 143, 142, 74, 142, 220, 81, 84, 180, 173, 89, 130, 44, 189, 170, 26, 215, 239, 206, 46, 158, 64, 248, 51, 52, 214, 113, 139, 248, 186, 206, 108, 152, 163, 170, 148, 133, 68, 132, 214, 84, 199, 61, 164, 145, 90, 68, 239, 45, 177, 165, 254, 201, 170, 9, 2, 97, 133, 240, 151, 234, 234, 191, 96, 30, 122, 226, 73, 133, 146, 209, 139, 116, 83, 195, 229, 139, 92, 21, 46, 201, 42, 179, 88, 104, 229, 169, 16, 19, 131, 175, 235, 31, 112, 245, 114, 15] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [82, 110, 202, 95, 185, 70, 2, 137, 11, 11, 47, 1, 184, 177, 99, 14, 218, 131, 161, 10, 30, 104, 124, 244, 170, 119, 125, 67, 141, 201, 191, 35, 23, 172, 160, 98, 171, 139, 244, 5, 146, 151, 193, 56, 75, 163, 149, 76, 186, 38, 130, 191, 203, 106, 132, 26, 243, 207, 93, 79, 244, 128, 221, 156, 136, 255, 178, 73, 224, 34, 30, 205, 30, 114, 255, 210, 130, 142, 99, 186, 153, 253, 80, 109, 185, 103, 92, 103, 217, 228, 17, 244, 219, 221, 98, 7, 25, 108, 215, 66, 213, 174, 161, 219, 188, 135, 244, 243, 101, 143, 11, 247, 164, 248, 234, 98, 219, 74, 109, 99, 205, 5, 95, 116, 186, 204, 181, 28, 81, 2, 233, 142, 230, 143, 254, 170, 22, 142, 29, 167, 34, 142, 133, 171, 229, 221, 254, 218, 37, 80, 4, 192, 139, 240, 90, 121, 100, 133, 173, 10, 143, 142, 74, 142, 220, 81, 84, 180, 173, 89, 130, 44, 189, 170, 26, 215, 239, 206, 46, 158, 64, 248, 51, 52, 214, 113, 139, 248, 186, 206, 108, 152, 163, 170, 148, 133, 68, 132, 214, 84, 199, 61, 164, 145, 90, 68, 239, 45, 177, 165, 254, 201, 170, 9, 2, 97, 133, 240, 151, 234, 234, 191, 96, 30, 122, 226, 73, 133, 146, 209, 139, 116, 83, 195, 229, 139, 92, 21, 46, 201, 42, 179, 88, 104, 229, 169, 16, 19, 131, 175, 235, 31, 112, 245, 114, 15] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [82, 110, 202, 95, 185, 70, 2, 137, 11, 11, 47, 1, 184, 177, 99, 14, 218, 131, 161, 10, 30, 104, 124, 244, 170, 119, 125, 67, 141, 201, 191, 35, 23, 172, 160, 98, 171, 139, 244, 5, 146, 151, 193, 56, 75, 163, 149, 76, 186, 38, 130, 191, 203, 106, 132, 26, 243, 207, 93, 79, 244, 128, 221, 156, 136, 255, 178, 73, 224, 34, 30, 205, 30, 114, 255, 210, 130, 142, 99, 186, 153, 253, 80, 109, 185, 103, 92, 103, 217, 228, 17, 244, 219, 221, 98, 7, 25, 108, 215, 66, 213, 174, 161, 219, 188, 135, 244, 243, 101, 143, 11, 247, 164, 248, 234, 98, 219, 74, 109, 99, 205, 5, 95, 116, 186, 204, 181, 28, 81, 2, 233, 142, 230, 143, 254, 170, 22, 142, 29, 167, 34, 142, 133, 171, 229, 221, 254, 218, 37, 80, 4, 192, 139, 240, 90, 121, 100, 133, 173, 10, 143, 142, 74, 142, 220, 81, 84, 180, 173, 89, 130, 44, 189, 170, 26, 215, 239, 206, 46, 158, 64, 248, 51, 52, 214, 113, 139, 248, 186, 206, 108, 152, 163, 170, 148, 133, 68, 132, 214, 84, 199, 61, 164, 145, 90, 68, 239, 45, 177, 165, 254, 201, 170, 9, 2, 97, 133, 240, 151, 234, 234, 191, 96, 30, 122, 226, 73, 133, 146, 209, 139, 116, 83, 195, 229, 139, 92, 21, 46, 201, 42, 179, 88, 104, 229, 169, 16, 19, 131, 175, 235, 31, 112, 245, 114, 15] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "6GJifyXATvPWKaKMAaUpCRjdzQszbgKJTy27YVCCNg4i", recipient: "6GJifyXATvPWKaKMAaUpCRjdzQszbgKJTy27YVCCNg4i", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "6GJifyXATvPWKaKMAaUpCRjdzQszbgKJTy27YVCCNg4i", recipient: "6GJifyXATvPWKaKMAaUpCRjdzQszbgKJTy27YVCCNg4i", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973943, batch_id: 63 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "6GJifyXATvPWKaKMAaUpCRjdzQszbgKJTy27YVCCNg4i", recipient: "6GJifyXATvPWKaKMAaUpCRjdzQszbgKJTy27YVCCNg4i", amount: 0, nonce: 1 }], programs: [], timestamp: 1728973943, batch_id: 63 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (6637118965953721555462278569593697286713906412428188091288146468154166120278, 21794135331953927352287675293460492071684177788986062229086819673338620298282), b: (QuadExtField(9191306058243933337876903166500971343956793281687802391529180646184679146453 + 16461232058966669486783660601240724172408312238407843398136721383172476207811 * u), QuadExtField(16607512646657086268354648067531225291429006004332953701119403741953564109277 + 18773200571720496414586562010713814696769085792327679946846570296618005926571 * u)), c: (12881657118008412937072829405165522543003556743150403243373576497534816586874, 10412567741314503362900399238228464635020559095372096300263732657042847811878) }
Serialized proof bytes: [86, 143, 90, 43, 190, 176, 166, 1, 91, 24, 107, 172, 244, 165, 88, 80, 113, 165, 92, 113, 131, 174, 209, 7, 53, 123, 225, 233, 232, 121, 172, 14, 42, 68, 10, 243, 66, 98, 4, 47, 2, 43, 16, 13, 197, 130, 151, 61, 13, 238, 54, 216, 217, 7, 57, 5, 130, 99, 211, 56, 32, 11, 47, 176, 213, 131, 216, 153, 114, 56, 85, 11, 18, 115, 31, 187, 250, 220, 60, 219, 86, 98, 89, 95, 217, 95, 249, 42, 152, 86, 17, 164, 73, 24, 82, 20, 195, 130, 67, 235, 10, 94, 136, 224, 233, 213, 9, 97, 5, 135, 64, 18, 147, 197, 233, 63, 11, 13, 16, 177, 64, 80, 151, 2, 40, 186, 100, 36, 221, 105, 184, 143, 78, 84, 236, 78, 95, 95, 2, 208, 33, 226, 43, 204, 188, 120, 218, 121, 21, 230, 251, 19, 67, 29, 229, 144, 224, 132, 183, 36, 171, 146, 145, 219, 206, 54, 219, 212, 129, 200, 148, 235, 51, 73, 166, 105, 180, 127, 221, 96, 247, 23, 246, 97, 239, 48, 130, 73, 70, 65, 129, 169, 122, 140, 53, 114, 21, 161, 112, 50, 154, 70, 226, 234, 168, 134, 63, 162, 94, 16, 2, 160, 148, 231, 232, 183, 197, 163, 178, 33, 114, 194, 122, 28, 38, 201, 93, 248, 69, 69, 143, 72, 218, 187, 16, 21, 251, 233, 206, 64, 90, 185, 167, 3, 87, 179, 184, 37, 124, 7, 247, 26, 243, 77, 5, 23]
Proof generated: Proof { data: [86, 143, 90, 43, 190, 176, 166, 1, 91, 24, 107, 172, 244, 165, 88, 80, 113, 165, 92, 113, 131, 174, 209, 7, 53, 123, 225, 233, 232, 121, 172, 14, 42, 68, 10, 243, 66, 98, 4, 47, 2, 43, 16, 13, 197, 130, 151, 61, 13, 238, 54, 216, 217, 7, 57, 5, 130, 99, 211, 56, 32, 11, 47, 176, 213, 131, 216, 153, 114, 56, 85, 11, 18, 115, 31, 187, 250, 220, 60, 219, 86, 98, 89, 95, 217, 95, 249, 42, 152, 86, 17, 164, 73, 24, 82, 20, 195, 130, 67, 235, 10, 94, 136, 224, 233, 213, 9, 97, 5, 135, 64, 18, 147, 197, 233, 63, 11, 13, 16, 177, 64, 80, 151, 2, 40, 186, 100, 36, 221, 105, 184, 143, 78, 84, 236, 78, 95, 95, 2, 208, 33, 226, 43, 204, 188, 120, 218, 121, 21, 230, 251, 19, 67, 29, 229, 144, 224, 132, 183, 36, 171, 146, 145, 219, 206, 54, 219, 212, 129, 200, 148, 235, 51, 73, 166, 105, 180, 127, 221, 96, 247, 23, 246, 97, 239, 48, 130, 73, 70, 65, 129, 169, 122, 140, 53, 114, 21, 161, 112, 50, 154, 70, 226, 234, 168, 134, 63, 162, 94, 16, 2, 160, 148, 231, 232, 183, 197, 163, 178, 33, 114, 194, 122, 28, 38, 201, 93, 248, 69, 69, 143, 72, 218, 187, 16, 21, 251, 233, 206, 64, 90, 185, 167, 3, 87, 179, 184, 37, 124, 7, 247, 26, 243, 77, 5, 23] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [86, 143, 90, 43, 190, 176, 166, 1, 91, 24, 107, 172, 244, 165, 88, 80, 113, 165, 92, 113, 131, 174, 209, 7, 53, 123, 225, 233, 232, 121, 172, 14, 42, 68, 10, 243, 66, 98, 4, 47, 2, 43, 16, 13, 197, 130, 151, 61, 13, 238, 54, 216, 217, 7, 57, 5, 130, 99, 211, 56, 32, 11, 47, 176, 213, 131, 216, 153, 114, 56, 85, 11, 18, 115, 31, 187, 250, 220, 60, 219, 86, 98, 89, 95, 217, 95, 249, 42, 152, 86, 17, 164, 73, 24, 82, 20, 195, 130, 67, 235, 10, 94, 136, 224, 233, 213, 9, 97, 5, 135, 64, 18, 147, 197, 233, 63, 11, 13, 16, 177, 64, 80, 151, 2, 40, 186, 100, 36, 221, 105, 184, 143, 78, 84, 236, 78, 95, 95, 2, 208, 33, 226, 43, 204, 188, 120, 218, 121, 21, 230, 251, 19, 67, 29, 229, 144, 224, 132, 183, 36, 171, 146, 145, 219, 206, 54, 219, 212, 129, 200, 148, 235, 51, 73, 166, 105, 180, 127, 221, 96, 247, 23, 246, 97, 239, 48, 130, 73, 70, 65, 129, 169, 122, 140, 53, 114, 21, 161, 112, 50, 154, 70, 226, 234, 168, 134, 63, 162, 94, 16, 2, 160, 148, 231, 232, 183, 197, 163, 178, 33, 114, 194, 122, 28, 38, 201, 93, 248, 69, 69, 143, 72, 218, 187, 16, 21, 251, 233, 206, 64, 90, 185, 167, 3, 87, 179, 184, 37, 124, 7, 247, 26, 243, 77, 5, 23] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [86, 143, 90, 43, 190, 176, 166, 1, 91, 24, 107, 172, 244, 165, 88, 80, 113, 165, 92, 113, 131, 174, 209, 7, 53, 123, 225, 233, 232, 121, 172, 14, 42, 68, 10, 243, 66, 98, 4, 47, 2, 43, 16, 13, 197, 130, 151, 61, 13, 238, 54, 216, 217, 7, 57, 5, 130, 99, 211, 56, 32, 11, 47, 176, 213, 131, 216, 153, 114, 56, 85, 11, 18, 115, 31, 187, 250, 220, 60, 219, 86, 98, 89, 95, 217, 95, 249, 42, 152, 86, 17, 164, 73, 24, 82, 20, 195, 130, 67, 235, 10, 94, 136, 224, 233, 213, 9, 97, 5, 135, 64, 18, 147, 197, 233, 63, 11, 13, 16, 177, 64, 80, 151, 2, 40, 186, 100, 36, 221, 105, 184, 143, 78, 84, 236, 78, 95, 95, 2, 208, 33, 226, 43, 204, 188, 120, 218, 121, 21, 230, 251, 19, 67, 29, 229, 144, 224, 132, 183, 36, 171, 146, 145, 219, 206, 54, 219, 212, 129, 200, 148, 235, 51, 73, 166, 105, 180, 127, 221, 96, 247, 23, 246, 97, 239, 48, 130, 73, 70, 65, 129, 169, 122, 140, 53, 114, 21, 161, 112, 50, 154, 70, 226, 234, 168, 134, 63, 162, 94, 16, 2, 160, 148, 231, 232, 183, 197, 163, 178, 33, 114, 194, 122, 28, 38, 201, 93, 248, 69, 69, 143, 72, 218, 187, 16, 21, 251, 233, 206, 64, 90, 185, 167, 3, 87, 179, 184, 37, 124, 7, 247, 26, 243, 77, 5, 23] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "HC9w3NsSisiXpa3UVBMtoYtFK292GH38XFJb6PkDHuqQ", recipient: "HC9w3NsSisiXpa3UVBMtoYtFK292GH38XFJb6PkDHuqQ", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "HC9w3NsSisiXpa3UVBMtoYtFK292GH38XFJb6PkDHuqQ", recipient: "HC9w3NsSisiXpa3UVBMtoYtFK292GH38XFJb6PkDHuqQ", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974208, batch_id: 65 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "HC9w3NsSisiXpa3UVBMtoYtFK292GH38XFJb6PkDHuqQ", recipient: "HC9w3NsSisiXpa3UVBMtoYtFK292GH38XFJb6PkDHuqQ", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974208, batch_id: 65 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (11306600714495345783250218144990679439340680500576824255596667286841711716836, 5661480704936450363052566023395340853720842931250365820163302114888709223336), b: (QuadExtField(2646343101969939617408556071927717541394402276176270871695745258278593398234 + 5748122738120218730677734376178755234069996524868418845958146634913243752144 * u), QuadExtField(4005332969819848663602524524261488738400307646704792142818196233239592290927 + 1425519822457171091993692597772228440589700416418131865426323056211030932817 * u)), c: (15526583375188535425835763349246455510408645083886412689065968441189826040320, 17315870233712829966222981186342021202960540317946734789070894271748375675176) }
Serialized proof bytes: [228, 233, 180, 137, 240, 216, 183, 51, 169, 239, 36, 73, 50, 95, 44, 229, 192, 4, 90, 155, 216, 153, 25, 116, 194, 39, 191, 34, 41, 79, 255, 24, 168, 179, 10, 137, 168, 159, 223, 80, 61, 40, 55, 133, 204, 72, 136, 67, 148, 238, 15, 2, 69, 230, 202, 80, 181, 55, 9, 135, 214, 72, 132, 12, 218, 133, 86, 226, 72, 64, 210, 71, 202, 114, 54, 179, 137, 131, 11, 170, 38, 214, 210, 180, 124, 64, 70, 238, 241, 153, 71, 27, 241, 198, 217, 5, 208, 102, 232, 251, 79, 115, 123, 103, 75, 140, 154, 91, 90, 13, 32, 23, 149, 92, 135, 202, 19, 66, 228, 17, 247, 73, 195, 38, 122, 82, 181, 12, 111, 202, 77, 109, 169, 45, 26, 203, 5, 73, 105, 208, 195, 175, 88, 223, 31, 101, 57, 214, 207, 167, 185, 136, 190, 233, 63, 223, 40, 240, 218, 8, 81, 125, 3, 135, 79, 235, 115, 118, 57, 93, 24, 255, 95, 185, 208, 18, 140, 158, 75, 114, 213, 214, 7, 180, 203, 199, 16, 239, 204, 208, 38, 3, 0, 18, 116, 10, 42, 162, 147, 217, 39, 48, 169, 141, 142, 227, 83, 37, 105, 196, 24, 11, 27, 13, 147, 239, 184, 98, 74, 139, 25, 188, 83, 34, 40, 129, 17, 221, 239, 230, 237, 25, 203, 62, 30, 85, 123, 248, 53, 93, 189, 29, 17, 223, 171, 0, 226, 186, 239, 119, 1, 193, 107, 111, 72, 166]
Proof generated: Proof { data: [228, 233, 180, 137, 240, 216, 183, 51, 169, 239, 36, 73, 50, 95, 44, 229, 192, 4, 90, 155, 216, 153, 25, 116, 194, 39, 191, 34, 41, 79, 255, 24, 168, 179, 10, 137, 168, 159, 223, 80, 61, 40, 55, 133, 204, 72, 136, 67, 148, 238, 15, 2, 69, 230, 202, 80, 181, 55, 9, 135, 214, 72, 132, 12, 218, 133, 86, 226, 72, 64, 210, 71, 202, 114, 54, 179, 137, 131, 11, 170, 38, 214, 210, 180, 124, 64, 70, 238, 241, 153, 71, 27, 241, 198, 217, 5, 208, 102, 232, 251, 79, 115, 123, 103, 75, 140, 154, 91, 90, 13, 32, 23, 149, 92, 135, 202, 19, 66, 228, 17, 247, 73, 195, 38, 122, 82, 181, 12, 111, 202, 77, 109, 169, 45, 26, 203, 5, 73, 105, 208, 195, 175, 88, 223, 31, 101, 57, 214, 207, 167, 185, 136, 190, 233, 63, 223, 40, 240, 218, 8, 81, 125, 3, 135, 79, 235, 115, 118, 57, 93, 24, 255, 95, 185, 208, 18, 140, 158, 75, 114, 213, 214, 7, 180, 203, 199, 16, 239, 204, 208, 38, 3, 0, 18, 116, 10, 42, 162, 147, 217, 39, 48, 169, 141, 142, 227, 83, 37, 105, 196, 24, 11, 27, 13, 147, 239, 184, 98, 74, 139, 25, 188, 83, 34, 40, 129, 17, 221, 239, 230, 237, 25, 203, 62, 30, 85, 123, 248, 53, 93, 189, 29, 17, 223, 171, 0, 226, 186, 239, 119, 1, 193, 107, 111, 72, 166] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [228, 233, 180, 137, 240, 216, 183, 51, 169, 239, 36, 73, 50, 95, 44, 229, 192, 4, 90, 155, 216, 153, 25, 116, 194, 39, 191, 34, 41, 79, 255, 24, 168, 179, 10, 137, 168, 159, 223, 80, 61, 40, 55, 133, 204, 72, 136, 67, 148, 238, 15, 2, 69, 230, 202, 80, 181, 55, 9, 135, 214, 72, 132, 12, 218, 133, 86, 226, 72, 64, 210, 71, 202, 114, 54, 179, 137, 131, 11, 170, 38, 214, 210, 180, 124, 64, 70, 238, 241, 153, 71, 27, 241, 198, 217, 5, 208, 102, 232, 251, 79, 115, 123, 103, 75, 140, 154, 91, 90, 13, 32, 23, 149, 92, 135, 202, 19, 66, 228, 17, 247, 73, 195, 38, 122, 82, 181, 12, 111, 202, 77, 109, 169, 45, 26, 203, 5, 73, 105, 208, 195, 175, 88, 223, 31, 101, 57, 214, 207, 167, 185, 136, 190, 233, 63, 223, 40, 240, 218, 8, 81, 125, 3, 135, 79, 235, 115, 118, 57, 93, 24, 255, 95, 185, 208, 18, 140, 158, 75, 114, 213, 214, 7, 180, 203, 199, 16, 239, 204, 208, 38, 3, 0, 18, 116, 10, 42, 162, 147, 217, 39, 48, 169, 141, 142, 227, 83, 37, 105, 196, 24, 11, 27, 13, 147, 239, 184, 98, 74, 139, 25, 188, 83, 34, 40, 129, 17, 221, 239, 230, 237, 25, 203, 62, 30, 85, 123, 248, 53, 93, 189, 29, 17, 223, 171, 0, 226, 186, 239, 119, 1, 193, 107, 111, 72, 166] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [228, 233, 180, 137, 240, 216, 183, 51, 169, 239, 36, 73, 50, 95, 44, 229, 192, 4, 90, 155, 216, 153, 25, 116, 194, 39, 191, 34, 41, 79, 255, 24, 168, 179, 10, 137, 168, 159, 223, 80, 61, 40, 55, 133, 204, 72, 136, 67, 148, 238, 15, 2, 69, 230, 202, 80, 181, 55, 9, 135, 214, 72, 132, 12, 218, 133, 86, 226, 72, 64, 210, 71, 202, 114, 54, 179, 137, 131, 11, 170, 38, 214, 210, 180, 124, 64, 70, 238, 241, 153, 71, 27, 241, 198, 217, 5, 208, 102, 232, 251, 79, 115, 123, 103, 75, 140, 154, 91, 90, 13, 32, 23, 149, 92, 135, 202, 19, 66, 228, 17, 247, 73, 195, 38, 122, 82, 181, 12, 111, 202, 77, 109, 169, 45, 26, 203, 5, 73, 105, 208, 195, 175, 88, 223, 31, 101, 57, 214, 207, 167, 185, 136, 190, 233, 63, 223, 40, 240, 218, 8, 81, 125, 3, 135, 79, 235, 115, 118, 57, 93, 24, 255, 95, 185, 208, 18, 140, 158, 75, 114, 213, 214, 7, 180, 203, 199, 16, 239, 204, 208, 38, 3, 0, 18, 116, 10, 42, 162, 147, 217, 39, 48, 169, 141, 142, 227, 83, 37, 105, 196, 24, 11, 27, 13, 147, 239, 184, 98, 74, 139, 25, 188, 83, 34, 40, 129, 17, 221, 239, 230, 237, 25, 203, 62, 30, 85, 123, 248, 53, 93, 189, 29, 17, 223, 171, 0, 226, 186, 239, 119, 1, 193, 107, 111, 72, 166] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "8rjNfCYRw8a7xBE9C4vAUvDVC18Lh4sqPQWGD8qWkdoy", recipient: "8rjNfCYRw8a7xBE9C4vAUvDVC18Lh4sqPQWGD8qWkdoy", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8rjNfCYRw8a7xBE9C4vAUvDVC18Lh4sqPQWGD8qWkdoy", recipient: "8rjNfCYRw8a7xBE9C4vAUvDVC18Lh4sqPQWGD8qWkdoy", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974220, batch_id: 67 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8rjNfCYRw8a7xBE9C4vAUvDVC18Lh4sqPQWGD8qWkdoy", recipient: "8rjNfCYRw8a7xBE9C4vAUvDVC18Lh4sqPQWGD8qWkdoy", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974220, batch_id: 67 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (20699296753696435005961492598717263716425052259572826940832380256927370388304, 5012659910927877721247118634997693008248071949238874663063303828932793367923), b: (QuadExtField(8701037879644915100340306085208582601238375797577994766996760355716719568286 + 10583147539678179166272113340869122598751758333437472596044060275603618250408 * u), QuadExtField(12049483157832454077691021323689271065670204940231208236670286259013408778683 + 13687743445460658810102980301052293751015526379046951613982677690203525836781 * u)), c: (2495080778270414016354777756151769382457564962375780325210038223252416975724, 10402527296952724981655317385162126335200336266961035247042968126433683006288) }
Serialized proof bytes: [80, 35, 203, 57, 125, 24, 152, 59, 123, 201, 191, 211, 137, 235, 40, 148, 196, 40, 65, 208, 201, 44, 186, 139, 230, 116, 79, 86, 4, 99, 195, 45, 115, 125, 158, 87, 4, 157, 144, 217, 103, 173, 13, 29, 124, 112, 243, 226, 44, 41, 169, 162, 137, 11, 4, 33, 72, 129, 171, 186, 161, 16, 21, 11, 158, 229, 209, 155, 199, 49, 17, 157, 63, 221, 183, 213, 122, 236, 231, 87, 135, 108, 67, 231, 106, 105, 171, 212, 15, 42, 151, 52, 232, 156, 60, 19, 168, 190, 249, 199, 60, 90, 123, 85, 199, 52, 77, 205, 133, 169, 173, 118, 217, 142, 255, 77, 82, 153, 166, 70, 60, 162, 98, 122, 103, 217, 101, 23, 187, 233, 51, 211, 42, 246, 228, 76, 145, 213, 189, 21, 17, 215, 168, 169, 23, 115, 51, 110, 239, 162, 140, 146, 164, 251, 150, 106, 10, 196, 163, 26, 237, 111, 163, 254, 19, 181, 151, 46, 122, 250, 88, 201, 26, 200, 173, 232, 34, 131, 154, 53, 135, 119, 157, 149, 72, 138, 243, 196, 253, 252, 66, 158, 108, 83, 161, 75, 134, 107, 146, 129, 15, 120, 122, 156, 254, 176, 23, 234, 14, 81, 209, 78, 63, 14, 137, 13, 107, 181, 53, 177, 105, 42, 132, 5, 80, 99, 31, 95, 230, 38, 195, 198, 233, 126, 85, 233, 207, 22, 115, 85, 51, 92, 172, 20, 112, 182, 125, 128, 82, 133, 84, 83, 46, 159, 255, 22]
Proof generated: Proof { data: [80, 35, 203, 57, 125, 24, 152, 59, 123, 201, 191, 211, 137, 235, 40, 148, 196, 40, 65, 208, 201, 44, 186, 139, 230, 116, 79, 86, 4, 99, 195, 45, 115, 125, 158, 87, 4, 157, 144, 217, 103, 173, 13, 29, 124, 112, 243, 226, 44, 41, 169, 162, 137, 11, 4, 33, 72, 129, 171, 186, 161, 16, 21, 11, 158, 229, 209, 155, 199, 49, 17, 157, 63, 221, 183, 213, 122, 236, 231, 87, 135, 108, 67, 231, 106, 105, 171, 212, 15, 42, 151, 52, 232, 156, 60, 19, 168, 190, 249, 199, 60, 90, 123, 85, 199, 52, 77, 205, 133, 169, 173, 118, 217, 142, 255, 77, 82, 153, 166, 70, 60, 162, 98, 122, 103, 217, 101, 23, 187, 233, 51, 211, 42, 246, 228, 76, 145, 213, 189, 21, 17, 215, 168, 169, 23, 115, 51, 110, 239, 162, 140, 146, 164, 251, 150, 106, 10, 196, 163, 26, 237, 111, 163, 254, 19, 181, 151, 46, 122, 250, 88, 201, 26, 200, 173, 232, 34, 131, 154, 53, 135, 119, 157, 149, 72, 138, 243, 196, 253, 252, 66, 158, 108, 83, 161, 75, 134, 107, 146, 129, 15, 120, 122, 156, 254, 176, 23, 234, 14, 81, 209, 78, 63, 14, 137, 13, 107, 181, 53, 177, 105, 42, 132, 5, 80, 99, 31, 95, 230, 38, 195, 198, 233, 126, 85, 233, 207, 22, 115, 85, 51, 92, 172, 20, 112, 182, 125, 128, 82, 133, 84, 83, 46, 159, 255, 22] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [80, 35, 203, 57, 125, 24, 152, 59, 123, 201, 191, 211, 137, 235, 40, 148, 196, 40, 65, 208, 201, 44, 186, 139, 230, 116, 79, 86, 4, 99, 195, 45, 115, 125, 158, 87, 4, 157, 144, 217, 103, 173, 13, 29, 124, 112, 243, 226, 44, 41, 169, 162, 137, 11, 4, 33, 72, 129, 171, 186, 161, 16, 21, 11, 158, 229, 209, 155, 199, 49, 17, 157, 63, 221, 183, 213, 122, 236, 231, 87, 135, 108, 67, 231, 106, 105, 171, 212, 15, 42, 151, 52, 232, 156, 60, 19, 168, 190, 249, 199, 60, 90, 123, 85, 199, 52, 77, 205, 133, 169, 173, 118, 217, 142, 255, 77, 82, 153, 166, 70, 60, 162, 98, 122, 103, 217, 101, 23, 187, 233, 51, 211, 42, 246, 228, 76, 145, 213, 189, 21, 17, 215, 168, 169, 23, 115, 51, 110, 239, 162, 140, 146, 164, 251, 150, 106, 10, 196, 163, 26, 237, 111, 163, 254, 19, 181, 151, 46, 122, 250, 88, 201, 26, 200, 173, 232, 34, 131, 154, 53, 135, 119, 157, 149, 72, 138, 243, 196, 253, 252, 66, 158, 108, 83, 161, 75, 134, 107, 146, 129, 15, 120, 122, 156, 254, 176, 23, 234, 14, 81, 209, 78, 63, 14, 137, 13, 107, 181, 53, 177, 105, 42, 132, 5, 80, 99, 31, 95, 230, 38, 195, 198, 233, 126, 85, 233, 207, 22, 115, 85, 51, 92, 172, 20, 112, 182, 125, 128, 82, 133, 84, 83, 46, 159, 255, 22] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [80, 35, 203, 57, 125, 24, 152, 59, 123, 201, 191, 211, 137, 235, 40, 148, 196, 40, 65, 208, 201, 44, 186, 139, 230, 116, 79, 86, 4, 99, 195, 45, 115, 125, 158, 87, 4, 157, 144, 217, 103, 173, 13, 29, 124, 112, 243, 226, 44, 41, 169, 162, 137, 11, 4, 33, 72, 129, 171, 186, 161, 16, 21, 11, 158, 229, 209, 155, 199, 49, 17, 157, 63, 221, 183, 213, 122, 236, 231, 87, 135, 108, 67, 231, 106, 105, 171, 212, 15, 42, 151, 52, 232, 156, 60, 19, 168, 190, 249, 199, 60, 90, 123, 85, 199, 52, 77, 205, 133, 169, 173, 118, 217, 142, 255, 77, 82, 153, 166, 70, 60, 162, 98, 122, 103, 217, 101, 23, 187, 233, 51, 211, 42, 246, 228, 76, 145, 213, 189, 21, 17, 215, 168, 169, 23, 115, 51, 110, 239, 162, 140, 146, 164, 251, 150, 106, 10, 196, 163, 26, 237, 111, 163, 254, 19, 181, 151, 46, 122, 250, 88, 201, 26, 200, 173, 232, 34, 131, 154, 53, 135, 119, 157, 149, 72, 138, 243, 196, 253, 252, 66, 158, 108, 83, 161, 75, 134, 107, 146, 129, 15, 120, 122, 156, 254, 176, 23, 234, 14, 81, 209, 78, 63, 14, 137, 13, 107, 181, 53, 177, 105, 42, 132, 5, 80, 99, 31, 95, 230, 38, 195, 198, 233, 126, 85, 233, 207, 22, 115, 85, 51, 92, 172, 20, 112, 182, 125, 128, 82, 133, 84, 83, 46, 159, 255, 22] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "9wRH6ax5EXmXH3y1mBGiekokvdxvDdN5KQCfJqqb18rn", recipient: "9wRH6ax5EXmXH3y1mBGiekokvdxvDdN5KQCfJqqb18rn", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "9wRH6ax5EXmXH3y1mBGiekokvdxvDdN5KQCfJqqb18rn", recipient: "9wRH6ax5EXmXH3y1mBGiekokvdxvDdN5KQCfJqqb18rn", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974532, batch_id: 69 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "9wRH6ax5EXmXH3y1mBGiekokvdxvDdN5KQCfJqqb18rn", recipient: "9wRH6ax5EXmXH3y1mBGiekokvdxvDdN5KQCfJqqb18rn", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974532, batch_id: 69 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (1960634714897605752657770324004078755219088328482505636787969770931752317528, 10928001454046647798239157223945249401567031012998076226743909229566400154445), b: (QuadExtField(11203520113299270818348217088199356380933511128151023429950879033488965071215 + 12724552500078024895499800816788883928187924299690119501645960893402431466510 * u), QuadExtField(4559622358055161990975590870844436580775261379079566903407423776019524625171 + 3414914441296444219657671068159727123635979469356472039303982399136634858145 * u)), c: (9558938308608761217997635935493347349372162674294446479892315708929970456171, 15115334204903091592010604035297435907328218344117597927378067004092125247655) }
Serialized proof bytes: [88, 178, 132, 83, 152, 172, 239, 172, 179, 112, 105, 6, 58, 237, 148, 4, 56, 243, 167, 224, 125, 20, 12, 6, 113, 168, 255, 111, 15, 174, 85, 4, 77, 75, 12, 197, 175, 7, 154, 55, 101, 68, 112, 17, 125, 179, 213, 15, 26, 174, 162, 39, 75, 60, 27, 0, 14, 90, 169, 20, 150, 7, 41, 24, 111, 113, 167, 149, 62, 110, 255, 121, 247, 209, 253, 25, 101, 103, 179, 192, 153, 236, 217, 190, 185, 217, 242, 67, 41, 211, 208, 34, 185, 247, 196, 24, 14, 172, 5, 180, 86, 58, 109, 173, 184, 140, 120, 54, 48, 249, 86, 134, 0, 210, 231, 45, 165, 105, 196, 68, 140, 213, 247, 250, 107, 215, 33, 28, 19, 35, 116, 24, 59, 1, 115, 43, 159, 96, 26, 109, 221, 176, 200, 222, 68, 0, 15, 160, 238, 37, 90, 85, 206, 107, 254, 243, 160, 167, 20, 10, 161, 106, 129, 16, 0, 15, 95, 184, 219, 146, 194, 36, 0, 182, 145, 193, 142, 202, 82, 122, 70, 86, 0, 77, 187, 201, 77, 127, 232, 197, 140, 7, 107, 198, 30, 155, 145, 229, 219, 132, 248, 95, 217, 73, 139, 192, 175, 45, 251, 231, 218, 146, 182, 121, 244, 129, 54, 222, 238, 174, 215, 42, 34, 21, 167, 120, 167, 177, 236, 27, 120, 80, 84, 16, 40, 104, 164, 19, 54, 232, 121, 242, 254, 29, 250, 36, 249, 194, 50, 39, 117, 6, 218, 249, 106, 161]
Proof generated: Proof { data: [88, 178, 132, 83, 152, 172, 239, 172, 179, 112, 105, 6, 58, 237, 148, 4, 56, 243, 167, 224, 125, 20, 12, 6, 113, 168, 255, 111, 15, 174, 85, 4, 77, 75, 12, 197, 175, 7, 154, 55, 101, 68, 112, 17, 125, 179, 213, 15, 26, 174, 162, 39, 75, 60, 27, 0, 14, 90, 169, 20, 150, 7, 41, 24, 111, 113, 167, 149, 62, 110, 255, 121, 247, 209, 253, 25, 101, 103, 179, 192, 153, 236, 217, 190, 185, 217, 242, 67, 41, 211, 208, 34, 185, 247, 196, 24, 14, 172, 5, 180, 86, 58, 109, 173, 184, 140, 120, 54, 48, 249, 86, 134, 0, 210, 231, 45, 165, 105, 196, 68, 140, 213, 247, 250, 107, 215, 33, 28, 19, 35, 116, 24, 59, 1, 115, 43, 159, 96, 26, 109, 221, 176, 200, 222, 68, 0, 15, 160, 238, 37, 90, 85, 206, 107, 254, 243, 160, 167, 20, 10, 161, 106, 129, 16, 0, 15, 95, 184, 219, 146, 194, 36, 0, 182, 145, 193, 142, 202, 82, 122, 70, 86, 0, 77, 187, 201, 77, 127, 232, 197, 140, 7, 107, 198, 30, 155, 145, 229, 219, 132, 248, 95, 217, 73, 139, 192, 175, 45, 251, 231, 218, 146, 182, 121, 244, 129, 54, 222, 238, 174, 215, 42, 34, 21, 167, 120, 167, 177, 236, 27, 120, 80, 84, 16, 40, 104, 164, 19, 54, 232, 121, 242, 254, 29, 250, 36, 249, 194, 50, 39, 117, 6, 218, 249, 106, 161] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [88, 178, 132, 83, 152, 172, 239, 172, 179, 112, 105, 6, 58, 237, 148, 4, 56, 243, 167, 224, 125, 20, 12, 6, 113, 168, 255, 111, 15, 174, 85, 4, 77, 75, 12, 197, 175, 7, 154, 55, 101, 68, 112, 17, 125, 179, 213, 15, 26, 174, 162, 39, 75, 60, 27, 0, 14, 90, 169, 20, 150, 7, 41, 24, 111, 113, 167, 149, 62, 110, 255, 121, 247, 209, 253, 25, 101, 103, 179, 192, 153, 236, 217, 190, 185, 217, 242, 67, 41, 211, 208, 34, 185, 247, 196, 24, 14, 172, 5, 180, 86, 58, 109, 173, 184, 140, 120, 54, 48, 249, 86, 134, 0, 210, 231, 45, 165, 105, 196, 68, 140, 213, 247, 250, 107, 215, 33, 28, 19, 35, 116, 24, 59, 1, 115, 43, 159, 96, 26, 109, 221, 176, 200, 222, 68, 0, 15, 160, 238, 37, 90, 85, 206, 107, 254, 243, 160, 167, 20, 10, 161, 106, 129, 16, 0, 15, 95, 184, 219, 146, 194, 36, 0, 182, 145, 193, 142, 202, 82, 122, 70, 86, 0, 77, 187, 201, 77, 127, 232, 197, 140, 7, 107, 198, 30, 155, 145, 229, 219, 132, 248, 95, 217, 73, 139, 192, 175, 45, 251, 231, 218, 146, 182, 121, 244, 129, 54, 222, 238, 174, 215, 42, 34, 21, 167, 120, 167, 177, 236, 27, 120, 80, 84, 16, 40, 104, 164, 19, 54, 232, 121, 242, 254, 29, 250, 36, 249, 194, 50, 39, 117, 6, 218, 249, 106, 161] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [88, 178, 132, 83, 152, 172, 239, 172, 179, 112, 105, 6, 58, 237, 148, 4, 56, 243, 167, 224, 125, 20, 12, 6, 113, 168, 255, 111, 15, 174, 85, 4, 77, 75, 12, 197, 175, 7, 154, 55, 101, 68, 112, 17, 125, 179, 213, 15, 26, 174, 162, 39, 75, 60, 27, 0, 14, 90, 169, 20, 150, 7, 41, 24, 111, 113, 167, 149, 62, 110, 255, 121, 247, 209, 253, 25, 101, 103, 179, 192, 153, 236, 217, 190, 185, 217, 242, 67, 41, 211, 208, 34, 185, 247, 196, 24, 14, 172, 5, 180, 86, 58, 109, 173, 184, 140, 120, 54, 48, 249, 86, 134, 0, 210, 231, 45, 165, 105, 196, 68, 140, 213, 247, 250, 107, 215, 33, 28, 19, 35, 116, 24, 59, 1, 115, 43, 159, 96, 26, 109, 221, 176, 200, 222, 68, 0, 15, 160, 238, 37, 90, 85, 206, 107, 254, 243, 160, 167, 20, 10, 161, 106, 129, 16, 0, 15, 95, 184, 219, 146, 194, 36, 0, 182, 145, 193, 142, 202, 82, 122, 70, 86, 0, 77, 187, 201, 77, 127, 232, 197, 140, 7, 107, 198, 30, 155, 145, 229, 219, 132, 248, 95, 217, 73, 139, 192, 175, 45, 251, 231, 218, 146, 182, 121, 244, 129, 54, 222, 238, 174, 215, 42, 34, 21, 167, 120, 167, 177, 236, 27, 120, 80, 84, 16, 40, 104, 164, 19, 54, 232, 121, 242, 254, 29, 250, 36, 249, 194, 50, 39, 117, 6, 218, 249, 106, 161] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "4boUCBDQBga4CBfNsNcMPNZfKEvwqBBsXS3oh3sS32Mo", recipient: "4boUCBDQBga4CBfNsNcMPNZfKEvwqBBsXS3oh3sS32Mo", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "4boUCBDQBga4CBfNsNcMPNZfKEvwqBBsXS3oh3sS32Mo", recipient: "4boUCBDQBga4CBfNsNcMPNZfKEvwqBBsXS3oh3sS32Mo", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974779, batch_id: 71 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "4boUCBDQBga4CBfNsNcMPNZfKEvwqBBsXS3oh3sS32Mo", recipient: "4boUCBDQBga4CBfNsNcMPNZfKEvwqBBsXS3oh3sS32Mo", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974779, batch_id: 71 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (13500088446860984597428120295655877370975936478642770195966518487210005174769, 3476651162325925902538312962972412542814376198601803330643259186676366802649), b: (QuadExtField(7380637596069991329245443240147123355608686556107792999248839394693852487696 + 15480719950850553273971198726983102557166103098352352846837036285312046865357 * u), QuadExtField(20251505847117056533909024041874508383132241544558022976953882709620695227995 + 17312186300704511764778492931477561352682013439087910430315827017760153743433 * u)), c: (14416495341232005668178664616295290501667207925867316677736547434180876885111, 2510779008310750142050811267529845750742528060349657904252489368137988691457) }
Serialized proof bytes: [241, 25, 41, 158, 96, 43, 28, 230, 149, 119, 231, 202, 45, 107, 207, 187, 1, 76, 174, 82, 146, 208, 135, 218, 231, 235, 234, 4, 127, 199, 216, 29, 217, 126, 199, 68, 81, 165, 58, 210, 68, 53, 158, 220, 129, 109, 27, 70, 182, 141, 123, 241, 46, 20, 100, 97, 78, 137, 61, 192, 254, 182, 175, 7, 16, 224, 172, 212, 230, 169, 189, 69, 89, 193, 17, 61, 62, 253, 186, 196, 87, 30, 124, 245, 67, 20, 212, 50, 155, 100, 98, 172, 247, 74, 81, 16, 205, 27, 210, 109, 163, 230, 28, 206, 67, 142, 205, 133, 52, 59, 220, 121, 137, 104, 175, 153, 54, 110, 69, 209, 147, 205, 111, 150, 232, 198, 57, 34, 91, 222, 159, 144, 3, 46, 6, 204, 146, 216, 41, 225, 28, 216, 157, 82, 154, 204, 39, 34, 41, 63, 146, 179, 141, 96, 243, 124, 52, 242, 197, 44, 73, 48, 179, 55, 235, 243, 154, 25, 202, 106, 123, 5, 201, 104, 69, 197, 163, 84, 173, 198, 23, 77, 119, 244, 210, 237, 141, 21, 167, 89, 70, 166, 119, 220, 178, 97, 139, 152, 250, 158, 133, 29, 126, 109, 40, 13, 69, 50, 100, 226, 133, 165, 72, 167, 128, 230, 119, 90, 25, 233, 123, 114, 223, 31, 1, 214, 165, 241, 22, 1, 114, 11, 249, 237, 10, 195, 112, 236, 81, 199, 127, 121, 78, 88, 95, 72, 180, 61, 118, 220, 11, 104, 241, 12, 141, 5]
Proof generated: Proof { data: [241, 25, 41, 158, 96, 43, 28, 230, 149, 119, 231, 202, 45, 107, 207, 187, 1, 76, 174, 82, 146, 208, 135, 218, 231, 235, 234, 4, 127, 199, 216, 29, 217, 126, 199, 68, 81, 165, 58, 210, 68, 53, 158, 220, 129, 109, 27, 70, 182, 141, 123, 241, 46, 20, 100, 97, 78, 137, 61, 192, 254, 182, 175, 7, 16, 224, 172, 212, 230, 169, 189, 69, 89, 193, 17, 61, 62, 253, 186, 196, 87, 30, 124, 245, 67, 20, 212, 50, 155, 100, 98, 172, 247, 74, 81, 16, 205, 27, 210, 109, 163, 230, 28, 206, 67, 142, 205, 133, 52, 59, 220, 121, 137, 104, 175, 153, 54, 110, 69, 209, 147, 205, 111, 150, 232, 198, 57, 34, 91, 222, 159, 144, 3, 46, 6, 204, 146, 216, 41, 225, 28, 216, 157, 82, 154, 204, 39, 34, 41, 63, 146, 179, 141, 96, 243, 124, 52, 242, 197, 44, 73, 48, 179, 55, 235, 243, 154, 25, 202, 106, 123, 5, 201, 104, 69, 197, 163, 84, 173, 198, 23, 77, 119, 244, 210, 237, 141, 21, 167, 89, 70, 166, 119, 220, 178, 97, 139, 152, 250, 158, 133, 29, 126, 109, 40, 13, 69, 50, 100, 226, 133, 165, 72, 167, 128, 230, 119, 90, 25, 233, 123, 114, 223, 31, 1, 214, 165, 241, 22, 1, 114, 11, 249, 237, 10, 195, 112, 236, 81, 199, 127, 121, 78, 88, 95, 72, 180, 61, 118, 220, 11, 104, 241, 12, 141, 5] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [241, 25, 41, 158, 96, 43, 28, 230, 149, 119, 231, 202, 45, 107, 207, 187, 1, 76, 174, 82, 146, 208, 135, 218, 231, 235, 234, 4, 127, 199, 216, 29, 217, 126, 199, 68, 81, 165, 58, 210, 68, 53, 158, 220, 129, 109, 27, 70, 182, 141, 123, 241, 46, 20, 100, 97, 78, 137, 61, 192, 254, 182, 175, 7, 16, 224, 172, 212, 230, 169, 189, 69, 89, 193, 17, 61, 62, 253, 186, 196, 87, 30, 124, 245, 67, 20, 212, 50, 155, 100, 98, 172, 247, 74, 81, 16, 205, 27, 210, 109, 163, 230, 28, 206, 67, 142, 205, 133, 52, 59, 220, 121, 137, 104, 175, 153, 54, 110, 69, 209, 147, 205, 111, 150, 232, 198, 57, 34, 91, 222, 159, 144, 3, 46, 6, 204, 146, 216, 41, 225, 28, 216, 157, 82, 154, 204, 39, 34, 41, 63, 146, 179, 141, 96, 243, 124, 52, 242, 197, 44, 73, 48, 179, 55, 235, 243, 154, 25, 202, 106, 123, 5, 201, 104, 69, 197, 163, 84, 173, 198, 23, 77, 119, 244, 210, 237, 141, 21, 167, 89, 70, 166, 119, 220, 178, 97, 139, 152, 250, 158, 133, 29, 126, 109, 40, 13, 69, 50, 100, 226, 133, 165, 72, 167, 128, 230, 119, 90, 25, 233, 123, 114, 223, 31, 1, 214, 165, 241, 22, 1, 114, 11, 249, 237, 10, 195, 112, 236, 81, 199, 127, 121, 78, 88, 95, 72, 180, 61, 118, 220, 11, 104, 241, 12, 141, 5] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [241, 25, 41, 158, 96, 43, 28, 230, 149, 119, 231, 202, 45, 107, 207, 187, 1, 76, 174, 82, 146, 208, 135, 218, 231, 235, 234, 4, 127, 199, 216, 29, 217, 126, 199, 68, 81, 165, 58, 210, 68, 53, 158, 220, 129, 109, 27, 70, 182, 141, 123, 241, 46, 20, 100, 97, 78, 137, 61, 192, 254, 182, 175, 7, 16, 224, 172, 212, 230, 169, 189, 69, 89, 193, 17, 61, 62, 253, 186, 196, 87, 30, 124, 245, 67, 20, 212, 50, 155, 100, 98, 172, 247, 74, 81, 16, 205, 27, 210, 109, 163, 230, 28, 206, 67, 142, 205, 133, 52, 59, 220, 121, 137, 104, 175, 153, 54, 110, 69, 209, 147, 205, 111, 150, 232, 198, 57, 34, 91, 222, 159, 144, 3, 46, 6, 204, 146, 216, 41, 225, 28, 216, 157, 82, 154, 204, 39, 34, 41, 63, 146, 179, 141, 96, 243, 124, 52, 242, 197, 44, 73, 48, 179, 55, 235, 243, 154, 25, 202, 106, 123, 5, 201, 104, 69, 197, 163, 84, 173, 198, 23, 77, 119, 244, 210, 237, 141, 21, 167, 89, 70, 166, 119, 220, 178, 97, 139, 152, 250, 158, 133, 29, 126, 109, 40, 13, 69, 50, 100, 226, 133, 165, 72, 167, 128, 230, 119, 90, 25, 233, 123, 114, 223, 31, 1, 214, 165, 241, 22, 1, 114, 11, 249, 237, 10, 195, 112, 236, 81, 199, 127, 121, 78, 88, 95, 72, 180, 61, 118, 220, 11, 104, 241, 12, 141, 5] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "HjkJynqoaLowwYfeU5Wkdc3gRQDJ8wHDiTT3TErEENrY", recipient: "HjkJynqoaLowwYfeU5Wkdc3gRQDJ8wHDiTT3TErEENrY", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "HjkJynqoaLowwYfeU5Wkdc3gRQDJ8wHDiTT3TErEENrY", recipient: "HjkJynqoaLowwYfeU5Wkdc3gRQDJ8wHDiTT3TErEENrY", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974787, batch_id: 73 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "HjkJynqoaLowwYfeU5Wkdc3gRQDJ8wHDiTT3TErEENrY", recipient: "HjkJynqoaLowwYfeU5Wkdc3gRQDJ8wHDiTT3TErEENrY", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974787, batch_id: 73 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (3031858591498406983816787792618852532782199301005526831905732388124693886796, 17088177810749664896736408919975905468245200569928916068712428931977666072559), b: (QuadExtField(697385443018963309758842465414500964270615574175534553727789048381089558108 + 1940933996541393381557854250411841331119753249505690678216402936901628936143 * u), QuadExtField(1464522462775983641730998360613496691436018220050085179878076186447604059671 + 20142892822011559678649912197814414764555000267671521761541665820252349917360 * u)), c: (4683190798450183328518279695490541738113103740344777201990601304664499796204, 10264893683481564866159749589853301117211575651265852723701425142220350075814) }
Serialized proof bytes: [76, 247, 251, 121, 11, 181, 168, 200, 49, 87, 140, 74, 146, 197, 186, 221, 39, 199, 13, 239, 243, 119, 19, 240, 226, 18, 35, 91, 157, 248, 179, 6, 239, 143, 55, 118, 106, 248, 26, 132, 167, 63, 35, 20, 145, 199, 76, 4, 112, 255, 53, 38, 44, 191, 11, 109, 53, 20, 144, 101, 222, 144, 199, 165, 92, 174, 12, 164, 98, 82, 229, 80, 20, 211, 198, 185, 131, 172, 201, 109, 26, 100, 161, 219, 89, 210, 229, 211, 239, 224, 23, 191, 199, 180, 138, 1, 207, 63, 157, 218, 110, 20, 186, 117, 236, 9, 4, 224, 33, 116, 4, 87, 173, 44, 109, 0, 51, 201, 249, 5, 138, 5, 53, 46, 155, 135, 74, 4, 23, 142, 251, 41, 61, 254, 251, 203, 154, 34, 32, 39, 79, 111, 186, 240, 180, 130, 255, 54, 79, 233, 105, 247, 35, 241, 121, 68, 237, 227, 60, 3, 176, 232, 135, 242, 26, 235, 148, 42, 41, 98, 228, 26, 121, 120, 199, 205, 153, 228, 114, 192, 134, 155, 10, 71, 73, 82, 253, 122, 43, 121, 136, 172, 236, 184, 163, 154, 209, 142, 104, 214, 134, 244, 121, 179, 198, 74, 55, 233, 60, 226, 31, 194, 25, 44, 233, 54, 248, 172, 0, 37, 145, 151, 90, 10, 166, 179, 176, 165, 28, 147, 213, 123, 226, 17, 57, 37, 195, 194, 20, 206, 134, 100, 151, 218, 56, 210, 19, 198, 224, 98, 133, 222, 83, 185, 177, 22]
Proof generated: Proof { data: [76, 247, 251, 121, 11, 181, 168, 200, 49, 87, 140, 74, 146, 197, 186, 221, 39, 199, 13, 239, 243, 119, 19, 240, 226, 18, 35, 91, 157, 248, 179, 6, 239, 143, 55, 118, 106, 248, 26, 132, 167, 63, 35, 20, 145, 199, 76, 4, 112, 255, 53, 38, 44, 191, 11, 109, 53, 20, 144, 101, 222, 144, 199, 165, 92, 174, 12, 164, 98, 82, 229, 80, 20, 211, 198, 185, 131, 172, 201, 109, 26, 100, 161, 219, 89, 210, 229, 211, 239, 224, 23, 191, 199, 180, 138, 1, 207, 63, 157, 218, 110, 20, 186, 117, 236, 9, 4, 224, 33, 116, 4, 87, 173, 44, 109, 0, 51, 201, 249, 5, 138, 5, 53, 46, 155, 135, 74, 4, 23, 142, 251, 41, 61, 254, 251, 203, 154, 34, 32, 39, 79, 111, 186, 240, 180, 130, 255, 54, 79, 233, 105, 247, 35, 241, 121, 68, 237, 227, 60, 3, 176, 232, 135, 242, 26, 235, 148, 42, 41, 98, 228, 26, 121, 120, 199, 205, 153, 228, 114, 192, 134, 155, 10, 71, 73, 82, 253, 122, 43, 121, 136, 172, 236, 184, 163, 154, 209, 142, 104, 214, 134, 244, 121, 179, 198, 74, 55, 233, 60, 226, 31, 194, 25, 44, 233, 54, 248, 172, 0, 37, 145, 151, 90, 10, 166, 179, 176, 165, 28, 147, 213, 123, 226, 17, 57, 37, 195, 194, 20, 206, 134, 100, 151, 218, 56, 210, 19, 198, 224, 98, 133, 222, 83, 185, 177, 22] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [76, 247, 251, 121, 11, 181, 168, 200, 49, 87, 140, 74, 146, 197, 186, 221, 39, 199, 13, 239, 243, 119, 19, 240, 226, 18, 35, 91, 157, 248, 179, 6, 239, 143, 55, 118, 106, 248, 26, 132, 167, 63, 35, 20, 145, 199, 76, 4, 112, 255, 53, 38, 44, 191, 11, 109, 53, 20, 144, 101, 222, 144, 199, 165, 92, 174, 12, 164, 98, 82, 229, 80, 20, 211, 198, 185, 131, 172, 201, 109, 26, 100, 161, 219, 89, 210, 229, 211, 239, 224, 23, 191, 199, 180, 138, 1, 207, 63, 157, 218, 110, 20, 186, 117, 236, 9, 4, 224, 33, 116, 4, 87, 173, 44, 109, 0, 51, 201, 249, 5, 138, 5, 53, 46, 155, 135, 74, 4, 23, 142, 251, 41, 61, 254, 251, 203, 154, 34, 32, 39, 79, 111, 186, 240, 180, 130, 255, 54, 79, 233, 105, 247, 35, 241, 121, 68, 237, 227, 60, 3, 176, 232, 135, 242, 26, 235, 148, 42, 41, 98, 228, 26, 121, 120, 199, 205, 153, 228, 114, 192, 134, 155, 10, 71, 73, 82, 253, 122, 43, 121, 136, 172, 236, 184, 163, 154, 209, 142, 104, 214, 134, 244, 121, 179, 198, 74, 55, 233, 60, 226, 31, 194, 25, 44, 233, 54, 248, 172, 0, 37, 145, 151, 90, 10, 166, 179, 176, 165, 28, 147, 213, 123, 226, 17, 57, 37, 195, 194, 20, 206, 134, 100, 151, 218, 56, 210, 19, 198, 224, 98, 133, 222, 83, 185, 177, 22] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [76, 247, 251, 121, 11, 181, 168, 200, 49, 87, 140, 74, 146, 197, 186, 221, 39, 199, 13, 239, 243, 119, 19, 240, 226, 18, 35, 91, 157, 248, 179, 6, 239, 143, 55, 118, 106, 248, 26, 132, 167, 63, 35, 20, 145, 199, 76, 4, 112, 255, 53, 38, 44, 191, 11, 109, 53, 20, 144, 101, 222, 144, 199, 165, 92, 174, 12, 164, 98, 82, 229, 80, 20, 211, 198, 185, 131, 172, 201, 109, 26, 100, 161, 219, 89, 210, 229, 211, 239, 224, 23, 191, 199, 180, 138, 1, 207, 63, 157, 218, 110, 20, 186, 117, 236, 9, 4, 224, 33, 116, 4, 87, 173, 44, 109, 0, 51, 201, 249, 5, 138, 5, 53, 46, 155, 135, 74, 4, 23, 142, 251, 41, 61, 254, 251, 203, 154, 34, 32, 39, 79, 111, 186, 240, 180, 130, 255, 54, 79, 233, 105, 247, 35, 241, 121, 68, 237, 227, 60, 3, 176, 232, 135, 242, 26, 235, 148, 42, 41, 98, 228, 26, 121, 120, 199, 205, 153, 228, 114, 192, 134, 155, 10, 71, 73, 82, 253, 122, 43, 121, 136, 172, 236, 184, 163, 154, 209, 142, 104, 214, 134, 244, 121, 179, 198, 74, 55, 233, 60, 226, 31, 194, 25, 44, 233, 54, 248, 172, 0, 37, 145, 151, 90, 10, 166, 179, 176, 165, 28, 147, 213, 123, 226, 17, 57, 37, 195, 194, 20, 206, 134, 100, 151, 218, 56, 210, 19, 198, 224, 98, 133, 222, 83, 185, 177, 22] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "5DoxodyEv7GvGhT6PK8xcAqTPXpZnHCpeeXMihLWnxPX", recipient: "5DoxodyEv7GvGhT6PK8xcAqTPXpZnHCpeeXMihLWnxPX", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "5DoxodyEv7GvGhT6PK8xcAqTPXpZnHCpeeXMihLWnxPX", recipient: "5DoxodyEv7GvGhT6PK8xcAqTPXpZnHCpeeXMihLWnxPX", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974980, batch_id: 75 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "5DoxodyEv7GvGhT6PK8xcAqTPXpZnHCpeeXMihLWnxPX", recipient: "5DoxodyEv7GvGhT6PK8xcAqTPXpZnHCpeeXMihLWnxPX", amount: 0, nonce: 1 }], programs: [], timestamp: 1728974980, batch_id: 75 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (8373804029498436005010599361725844155036512215936891301657972028029177137422, 9511684495389277016237194319162617402698731892729098072880421857601412350656), b: (QuadExtField(9529065692021846831147548131009133560946825488569404708713994748155883229661 + 10824124554681069317559149780406240513334171758178050940178317049183629906190 * u), QuadExtField(6230095044071690321961814271929807290737886419796178208985868288369996300683 + 11656687515226130180935958108620207172357769759645349293508834305491906591099 * u)), c: (8273775289347958318997995769717873853934467356183405646101249687031385103629, 16827458219549490681533113142965773865705685809317265198032397696226485374418) }
Serialized proof bytes: [14, 137, 151, 99, 74, 26, 191, 132, 212, 233, 55, 242, 92, 152, 6, 142, 250, 172, 123, 46, 89, 93, 142, 200, 199, 155, 209, 27, 182, 103, 131, 18, 192, 66, 187, 44, 68, 131, 235, 198, 77, 37, 47, 77, 161, 244, 250, 115, 158, 122, 246, 211, 234, 190, 206, 12, 132, 17, 67, 86, 50, 108, 7, 21, 221, 17, 105, 12, 12, 237, 104, 24, 98, 96, 238, 86, 228, 200, 109, 224, 6, 23, 28, 209, 227, 227, 182, 21, 147, 144, 99, 192, 146, 66, 17, 21, 14, 145, 158, 151, 111, 79, 172, 225, 183, 66, 61, 154, 32, 78, 67, 213, 202, 115, 235, 244, 154, 122, 226, 223, 33, 38, 132, 189, 197, 60, 238, 23, 139, 129, 255, 19, 94, 237, 248, 25, 165, 191, 68, 60, 245, 50, 143, 186, 107, 150, 13, 32, 169, 226, 31, 18, 47, 79, 129, 145, 220, 27, 198, 13, 123, 249, 207, 107, 171, 155, 4, 167, 144, 173, 51, 142, 182, 6, 28, 40, 0, 44, 20, 101, 49, 109, 217, 27, 205, 111, 251, 71, 138, 115, 197, 153, 13, 29, 239, 153, 145, 164, 98, 50, 71, 179, 89, 124, 255, 255, 199, 36, 108, 28, 96, 60, 189, 124, 241, 231, 75, 105, 50, 237, 117, 202, 74, 18, 210, 141, 108, 177, 24, 106, 144, 28, 61, 67, 242, 230, 150, 5, 170, 66, 195, 227, 158, 24, 40, 72, 185, 171, 170, 188, 172, 72, 251, 0, 52, 165]
Proof generated: Proof { data: [14, 137, 151, 99, 74, 26, 191, 132, 212, 233, 55, 242, 92, 152, 6, 142, 250, 172, 123, 46, 89, 93, 142, 200, 199, 155, 209, 27, 182, 103, 131, 18, 192, 66, 187, 44, 68, 131, 235, 198, 77, 37, 47, 77, 161, 244, 250, 115, 158, 122, 246, 211, 234, 190, 206, 12, 132, 17, 67, 86, 50, 108, 7, 21, 221, 17, 105, 12, 12, 237, 104, 24, 98, 96, 238, 86, 228, 200, 109, 224, 6, 23, 28, 209, 227, 227, 182, 21, 147, 144, 99, 192, 146, 66, 17, 21, 14, 145, 158, 151, 111, 79, 172, 225, 183, 66, 61, 154, 32, 78, 67, 213, 202, 115, 235, 244, 154, 122, 226, 223, 33, 38, 132, 189, 197, 60, 238, 23, 139, 129, 255, 19, 94, 237, 248, 25, 165, 191, 68, 60, 245, 50, 143, 186, 107, 150, 13, 32, 169, 226, 31, 18, 47, 79, 129, 145, 220, 27, 198, 13, 123, 249, 207, 107, 171, 155, 4, 167, 144, 173, 51, 142, 182, 6, 28, 40, 0, 44, 20, 101, 49, 109, 217, 27, 205, 111, 251, 71, 138, 115, 197, 153, 13, 29, 239, 153, 145, 164, 98, 50, 71, 179, 89, 124, 255, 255, 199, 36, 108, 28, 96, 60, 189, 124, 241, 231, 75, 105, 50, 237, 117, 202, 74, 18, 210, 141, 108, 177, 24, 106, 144, 28, 61, 67, 242, 230, 150, 5, 170, 66, 195, 227, 158, 24, 40, 72, 185, 171, 170, 188, 172, 72, 251, 0, 52, 165] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [14, 137, 151, 99, 74, 26, 191, 132, 212, 233, 55, 242, 92, 152, 6, 142, 250, 172, 123, 46, 89, 93, 142, 200, 199, 155, 209, 27, 182, 103, 131, 18, 192, 66, 187, 44, 68, 131, 235, 198, 77, 37, 47, 77, 161, 244, 250, 115, 158, 122, 246, 211, 234, 190, 206, 12, 132, 17, 67, 86, 50, 108, 7, 21, 221, 17, 105, 12, 12, 237, 104, 24, 98, 96, 238, 86, 228, 200, 109, 224, 6, 23, 28, 209, 227, 227, 182, 21, 147, 144, 99, 192, 146, 66, 17, 21, 14, 145, 158, 151, 111, 79, 172, 225, 183, 66, 61, 154, 32, 78, 67, 213, 202, 115, 235, 244, 154, 122, 226, 223, 33, 38, 132, 189, 197, 60, 238, 23, 139, 129, 255, 19, 94, 237, 248, 25, 165, 191, 68, 60, 245, 50, 143, 186, 107, 150, 13, 32, 169, 226, 31, 18, 47, 79, 129, 145, 220, 27, 198, 13, 123, 249, 207, 107, 171, 155, 4, 167, 144, 173, 51, 142, 182, 6, 28, 40, 0, 44, 20, 101, 49, 109, 217, 27, 205, 111, 251, 71, 138, 115, 197, 153, 13, 29, 239, 153, 145, 164, 98, 50, 71, 179, 89, 124, 255, 255, 199, 36, 108, 28, 96, 60, 189, 124, 241, 231, 75, 105, 50, 237, 117, 202, 74, 18, 210, 141, 108, 177, 24, 106, 144, 28, 61, 67, 242, 230, 150, 5, 170, 66, 195, 227, 158, 24, 40, 72, 185, 171, 170, 188, 172, 72, 251, 0, 52, 165] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [14, 137, 151, 99, 74, 26, 191, 132, 212, 233, 55, 242, 92, 152, 6, 142, 250, 172, 123, 46, 89, 93, 142, 200, 199, 155, 209, 27, 182, 103, 131, 18, 192, 66, 187, 44, 68, 131, 235, 198, 77, 37, 47, 77, 161, 244, 250, 115, 158, 122, 246, 211, 234, 190, 206, 12, 132, 17, 67, 86, 50, 108, 7, 21, 221, 17, 105, 12, 12, 237, 104, 24, 98, 96, 238, 86, 228, 200, 109, 224, 6, 23, 28, 209, 227, 227, 182, 21, 147, 144, 99, 192, 146, 66, 17, 21, 14, 145, 158, 151, 111, 79, 172, 225, 183, 66, 61, 154, 32, 78, 67, 213, 202, 115, 235, 244, 154, 122, 226, 223, 33, 38, 132, 189, 197, 60, 238, 23, 139, 129, 255, 19, 94, 237, 248, 25, 165, 191, 68, 60, 245, 50, 143, 186, 107, 150, 13, 32, 169, 226, 31, 18, 47, 79, 129, 145, 220, 27, 198, 13, 123, 249, 207, 107, 171, 155, 4, 167, 144, 173, 51, 142, 182, 6, 28, 40, 0, 44, 20, 101, 49, 109, 217, 27, 205, 111, 251, 71, 138, 115, 197, 153, 13, 29, 239, 153, 145, 164, 98, 50, 71, 179, 89, 124, 255, 255, 199, 36, 108, 28, 96, 60, 189, 124, 241, 231, 75, 105, 50, 237, 117, 202, 74, 18, 210, 141, 108, 177, 24, 106, 144, 28, 61, 67, 242, 230, 150, 5, 170, 66, 195, 227, 158, 24, 40, 72, 185, 171, 170, 188, 172, 72, 251, 0, 52, 165] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "41wXcJ1GfsVCGJp5ivU1tGRYnScYdCv6azvtv3QbmfNx", recipient: "41wXcJ1GfsVCGJp5ivU1tGRYnScYdCv6azvtv3QbmfNx", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "41wXcJ1GfsVCGJp5ivU1tGRYnScYdCv6azvtv3QbmfNx", recipient: "41wXcJ1GfsVCGJp5ivU1tGRYnScYdCv6azvtv3QbmfNx", amount: 0, nonce: 1 }], programs: [], timestamp: 1728975010, batch_id: 77 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "41wXcJ1GfsVCGJp5ivU1tGRYnScYdCv6azvtv3QbmfNx", recipient: "41wXcJ1GfsVCGJp5ivU1tGRYnScYdCv6azvtv3QbmfNx", amount: 0, nonce: 1 }], programs: [], timestamp: 1728975010, batch_id: 77 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (2517809102532944926137369750359829588056209738801627569950710282038618251255, 21549910816529838981241473492579501769579445811156142836929412047631808282470), b: (QuadExtField(9319010724950570826571825194249229404199859175245194509976971813707584129706 + 2073161399153332027675176885020432594225112659216520440654683589539961860793 * u), QuadExtField(16338278663897386859981562704249013654146483270709740962101880301631015583960 + 19446608321931722269125107927337352409567660384049038306713118804187690256148 * u)), c: (21768245612381411323402296127615416344608463778606440489449526045909231041573, 12830761509415741284514878043499195734349416961543930603301481676375676716553) }
Serialized proof bytes: [247, 95, 230, 243, 196, 47, 96, 144, 221, 154, 173, 206, 199, 164, 67, 33, 31, 67, 157, 42, 146, 99, 196, 40, 156, 4, 254, 23, 138, 7, 145, 5, 102, 63, 221, 54, 88, 209, 23, 204, 208, 0, 229, 209, 141, 28, 182, 116, 210, 59, 95, 246, 167, 90, 80, 219, 232, 225, 112, 121, 57, 209, 164, 175, 170, 74, 200, 167, 66, 130, 38, 123, 238, 134, 85, 60, 213, 178, 165, 116, 38, 186, 170, 20, 179, 127, 205, 225, 156, 243, 58, 254, 134, 95, 154, 20, 185, 114, 17, 98, 162, 130, 186, 108, 169, 250, 38, 178, 6, 181, 215, 75, 143, 49, 214, 18, 51, 156, 202, 254, 148, 252, 141, 33, 38, 94, 149, 4, 216, 128, 149, 103, 188, 170, 45, 140, 163, 174, 116, 65, 185, 52, 109, 63, 161, 11, 0, 246, 119, 32, 118, 62, 255, 183, 35, 30, 85, 35, 31, 36, 20, 71, 223, 27, 175, 207, 60, 230, 59, 18, 215, 158, 79, 242, 21, 65, 182, 88, 231, 250, 198, 115, 164, 101, 187, 176, 40, 250, 231, 99, 254, 170, 37, 124, 71, 225, 156, 159, 190, 174, 20, 56, 104, 141, 42, 212, 114, 57, 71, 161, 211, 102, 95, 192, 156, 111, 184, 200, 180, 38, 241, 99, 32, 48, 9, 134, 92, 2, 73, 81, 211, 69, 201, 161, 187, 12, 6, 210, 104, 197, 121, 196, 57, 145, 191, 56, 197, 111, 31, 44, 88, 22, 35, 244, 93, 156]
Proof generated: Proof { data: [247, 95, 230, 243, 196, 47, 96, 144, 221, 154, 173, 206, 199, 164, 67, 33, 31, 67, 157, 42, 146, 99, 196, 40, 156, 4, 254, 23, 138, 7, 145, 5, 102, 63, 221, 54, 88, 209, 23, 204, 208, 0, 229, 209, 141, 28, 182, 116, 210, 59, 95, 246, 167, 90, 80, 219, 232, 225, 112, 121, 57, 209, 164, 175, 170, 74, 200, 167, 66, 130, 38, 123, 238, 134, 85, 60, 213, 178, 165, 116, 38, 186, 170, 20, 179, 127, 205, 225, 156, 243, 58, 254, 134, 95, 154, 20, 185, 114, 17, 98, 162, 130, 186, 108, 169, 250, 38, 178, 6, 181, 215, 75, 143, 49, 214, 18, 51, 156, 202, 254, 148, 252, 141, 33, 38, 94, 149, 4, 216, 128, 149, 103, 188, 170, 45, 140, 163, 174, 116, 65, 185, 52, 109, 63, 161, 11, 0, 246, 119, 32, 118, 62, 255, 183, 35, 30, 85, 35, 31, 36, 20, 71, 223, 27, 175, 207, 60, 230, 59, 18, 215, 158, 79, 242, 21, 65, 182, 88, 231, 250, 198, 115, 164, 101, 187, 176, 40, 250, 231, 99, 254, 170, 37, 124, 71, 225, 156, 159, 190, 174, 20, 56, 104, 141, 42, 212, 114, 57, 71, 161, 211, 102, 95, 192, 156, 111, 184, 200, 180, 38, 241, 99, 32, 48, 9, 134, 92, 2, 73, 81, 211, 69, 201, 161, 187, 12, 6, 210, 104, 197, 121, 196, 57, 145, 191, 56, 197, 111, 31, 44, 88, 22, 35, 244, 93, 156] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [247, 95, 230, 243, 196, 47, 96, 144, 221, 154, 173, 206, 199, 164, 67, 33, 31, 67, 157, 42, 146, 99, 196, 40, 156, 4, 254, 23, 138, 7, 145, 5, 102, 63, 221, 54, 88, 209, 23, 204, 208, 0, 229, 209, 141, 28, 182, 116, 210, 59, 95, 246, 167, 90, 80, 219, 232, 225, 112, 121, 57, 209, 164, 175, 170, 74, 200, 167, 66, 130, 38, 123, 238, 134, 85, 60, 213, 178, 165, 116, 38, 186, 170, 20, 179, 127, 205, 225, 156, 243, 58, 254, 134, 95, 154, 20, 185, 114, 17, 98, 162, 130, 186, 108, 169, 250, 38, 178, 6, 181, 215, 75, 143, 49, 214, 18, 51, 156, 202, 254, 148, 252, 141, 33, 38, 94, 149, 4, 216, 128, 149, 103, 188, 170, 45, 140, 163, 174, 116, 65, 185, 52, 109, 63, 161, 11, 0, 246, 119, 32, 118, 62, 255, 183, 35, 30, 85, 35, 31, 36, 20, 71, 223, 27, 175, 207, 60, 230, 59, 18, 215, 158, 79, 242, 21, 65, 182, 88, 231, 250, 198, 115, 164, 101, 187, 176, 40, 250, 231, 99, 254, 170, 37, 124, 71, 225, 156, 159, 190, 174, 20, 56, 104, 141, 42, 212, 114, 57, 71, 161, 211, 102, 95, 192, 156, 111, 184, 200, 180, 38, 241, 99, 32, 48, 9, 134, 92, 2, 73, 81, 211, 69, 201, 161, 187, 12, 6, 210, 104, 197, 121, 196, 57, 145, 191, 56, 197, 111, 31, 44, 88, 22, 35, 244, 93, 156] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [247, 95, 230, 243, 196, 47, 96, 144, 221, 154, 173, 206, 199, 164, 67, 33, 31, 67, 157, 42, 146, 99, 196, 40, 156, 4, 254, 23, 138, 7, 145, 5, 102, 63, 221, 54, 88, 209, 23, 204, 208, 0, 229, 209, 141, 28, 182, 116, 210, 59, 95, 246, 167, 90, 80, 219, 232, 225, 112, 121, 57, 209, 164, 175, 170, 74, 200, 167, 66, 130, 38, 123, 238, 134, 85, 60, 213, 178, 165, 116, 38, 186, 170, 20, 179, 127, 205, 225, 156, 243, 58, 254, 134, 95, 154, 20, 185, 114, 17, 98, 162, 130, 186, 108, 169, 250, 38, 178, 6, 181, 215, 75, 143, 49, 214, 18, 51, 156, 202, 254, 148, 252, 141, 33, 38, 94, 149, 4, 216, 128, 149, 103, 188, 170, 45, 140, 163, 174, 116, 65, 185, 52, 109, 63, 161, 11, 0, 246, 119, 32, 118, 62, 255, 183, 35, 30, 85, 35, 31, 36, 20, 71, 223, 27, 175, 207, 60, 230, 59, 18, 215, 158, 79, 242, 21, 65, 182, 88, 231, 250, 198, 115, 164, 101, 187, 176, 40, 250, 231, 99, 254, 170, 37, 124, 71, 225, 156, 159, 190, 174, 20, 56, 104, 141, 42, 212, 114, 57, 71, 161, 211, 102, 95, 192, 156, 111, 184, 200, 180, 38, 241, 99, 32, 48, 9, 134, 92, 2, 73, 81, 211, 69, 201, 161, 187, 12, 6, 210, 104, 197, 121, 196, 57, 145, 191, 56, 197, 111, 31, 44, 88, 22, 35, 244, 93, 156] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "DXNrLpFMgLtDDX6ewyAj7zdgyQUgisRfEsoToFFxoCFG", recipient: "DXNrLpFMgLtDDX6ewyAj7zdgyQUgisRfEsoToFFxoCFG", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "DXNrLpFMgLtDDX6ewyAj7zdgyQUgisRfEsoToFFxoCFG", recipient: "DXNrLpFMgLtDDX6ewyAj7zdgyQUgisRfEsoToFFxoCFG", amount: 0, nonce: 1 }], programs: [], timestamp: 1728975064, batch_id: 79 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "DXNrLpFMgLtDDX6ewyAj7zdgyQUgisRfEsoToFFxoCFG", recipient: "DXNrLpFMgLtDDX6ewyAj7zdgyQUgisRfEsoToFFxoCFG", amount: 0, nonce: 1 }], programs: [], timestamp: 1728975064, batch_id: 79 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (21317226356099945171338127302621667576827366995298828919987402915852685311400, 14038921480973958411104802985579111272626577800587921330324411023825408312925), b: (QuadExtField(13026422698341689496810676797170500228708171934820863977591281529770723462023 + 6959576408338171205118271752272630624890888682829501817360885316081752870826 * u), QuadExtField(7793489450682272818369070100245235908201682049881585949522891610734501676800 + 12168373432364774543352945674886705332350568182994191327739375223632068108391 * u)), c: (18095414224853199720084432936672541233059666625059243961138947496123526876525, 13162408419461580784390815107052934500309540590695990365900125021054449387071) }
Serialized proof bytes: [168, 125, 154, 108, 187, 67, 186, 108, 75, 35, 31, 2, 60, 37, 203, 100, 42, 146, 125, 147, 76, 222, 173, 20, 93, 23, 11, 40, 95, 31, 33, 47, 93, 70, 127, 217, 176, 17, 170, 98, 121, 134, 94, 174, 105, 171, 143, 44, 47, 243, 110, 136, 195, 8, 75, 91, 226, 158, 253, 15, 123, 191, 9, 159, 135, 75, 39, 41, 120, 25, 147, 228, 132, 63, 225, 119, 85, 196, 128, 40, 130, 29, 24, 187, 28, 229, 24, 240, 55, 181, 1, 241, 167, 177, 204, 28, 170, 15, 18, 229, 13, 164, 252, 2, 251, 70, 209, 72, 40, 16, 171, 52, 106, 46, 117, 175, 224, 115, 78, 47, 28, 177, 42, 51, 12, 251, 98, 15, 0, 199, 237, 93, 188, 40, 217, 28, 87, 94, 143, 182, 215, 231, 79, 27, 147, 66, 203, 173, 19, 229, 160, 45, 16, 94, 209, 14, 110, 245, 58, 17, 103, 96, 204, 199, 164, 174, 189, 6, 97, 148, 190, 14, 230, 169, 229, 90, 78, 102, 226, 40, 47, 6, 88, 133, 53, 49, 185, 202, 39, 14, 231, 154, 109, 13, 105, 202, 8, 251, 99, 69, 139, 245, 193, 210, 33, 181, 224, 143, 4, 134, 222, 229, 41, 98, 141, 112, 21, 217, 173, 107, 57, 164, 1, 40, 63, 134, 150, 111, 73, 132, 225, 229, 245, 111, 199, 110, 1, 245, 56, 151, 248, 131, 10, 225, 65, 139, 59, 236, 4, 74, 91, 172, 190, 168, 25, 157]
Proof generated: Proof { data: [168, 125, 154, 108, 187, 67, 186, 108, 75, 35, 31, 2, 60, 37, 203, 100, 42, 146, 125, 147, 76, 222, 173, 20, 93, 23, 11, 40, 95, 31, 33, 47, 93, 70, 127, 217, 176, 17, 170, 98, 121, 134, 94, 174, 105, 171, 143, 44, 47, 243, 110, 136, 195, 8, 75, 91, 226, 158, 253, 15, 123, 191, 9, 159, 135, 75, 39, 41, 120, 25, 147, 228, 132, 63, 225, 119, 85, 196, 128, 40, 130, 29, 24, 187, 28, 229, 24, 240, 55, 181, 1, 241, 167, 177, 204, 28, 170, 15, 18, 229, 13, 164, 252, 2, 251, 70, 209, 72, 40, 16, 171, 52, 106, 46, 117, 175, 224, 115, 78, 47, 28, 177, 42, 51, 12, 251, 98, 15, 0, 199, 237, 93, 188, 40, 217, 28, 87, 94, 143, 182, 215, 231, 79, 27, 147, 66, 203, 173, 19, 229, 160, 45, 16, 94, 209, 14, 110, 245, 58, 17, 103, 96, 204, 199, 164, 174, 189, 6, 97, 148, 190, 14, 230, 169, 229, 90, 78, 102, 226, 40, 47, 6, 88, 133, 53, 49, 185, 202, 39, 14, 231, 154, 109, 13, 105, 202, 8, 251, 99, 69, 139, 245, 193, 210, 33, 181, 224, 143, 4, 134, 222, 229, 41, 98, 141, 112, 21, 217, 173, 107, 57, 164, 1, 40, 63, 134, 150, 111, 73, 132, 225, 229, 245, 111, 199, 110, 1, 245, 56, 151, 248, 131, 10, 225, 65, 139, 59, 236, 4, 74, 91, 172, 190, 168, 25, 157] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [168, 125, 154, 108, 187, 67, 186, 108, 75, 35, 31, 2, 60, 37, 203, 100, 42, 146, 125, 147, 76, 222, 173, 20, 93, 23, 11, 40, 95, 31, 33, 47, 93, 70, 127, 217, 176, 17, 170, 98, 121, 134, 94, 174, 105, 171, 143, 44, 47, 243, 110, 136, 195, 8, 75, 91, 226, 158, 253, 15, 123, 191, 9, 159, 135, 75, 39, 41, 120, 25, 147, 228, 132, 63, 225, 119, 85, 196, 128, 40, 130, 29, 24, 187, 28, 229, 24, 240, 55, 181, 1, 241, 167, 177, 204, 28, 170, 15, 18, 229, 13, 164, 252, 2, 251, 70, 209, 72, 40, 16, 171, 52, 106, 46, 117, 175, 224, 115, 78, 47, 28, 177, 42, 51, 12, 251, 98, 15, 0, 199, 237, 93, 188, 40, 217, 28, 87, 94, 143, 182, 215, 231, 79, 27, 147, 66, 203, 173, 19, 229, 160, 45, 16, 94, 209, 14, 110, 245, 58, 17, 103, 96, 204, 199, 164, 174, 189, 6, 97, 148, 190, 14, 230, 169, 229, 90, 78, 102, 226, 40, 47, 6, 88, 133, 53, 49, 185, 202, 39, 14, 231, 154, 109, 13, 105, 202, 8, 251, 99, 69, 139, 245, 193, 210, 33, 181, 224, 143, 4, 134, 222, 229, 41, 98, 141, 112, 21, 217, 173, 107, 57, 164, 1, 40, 63, 134, 150, 111, 73, 132, 225, 229, 245, 111, 199, 110, 1, 245, 56, 151, 248, 131, 10, 225, 65, 139, 59, 236, 4, 74, 91, 172, 190, 168, 25, 157] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [168, 125, 154, 108, 187, 67, 186, 108, 75, 35, 31, 2, 60, 37, 203, 100, 42, 146, 125, 147, 76, 222, 173, 20, 93, 23, 11, 40, 95, 31, 33, 47, 93, 70, 127, 217, 176, 17, 170, 98, 121, 134, 94, 174, 105, 171, 143, 44, 47, 243, 110, 136, 195, 8, 75, 91, 226, 158, 253, 15, 123, 191, 9, 159, 135, 75, 39, 41, 120, 25, 147, 228, 132, 63, 225, 119, 85, 196, 128, 40, 130, 29, 24, 187, 28, 229, 24, 240, 55, 181, 1, 241, 167, 177, 204, 28, 170, 15, 18, 229, 13, 164, 252, 2, 251, 70, 209, 72, 40, 16, 171, 52, 106, 46, 117, 175, 224, 115, 78, 47, 28, 177, 42, 51, 12, 251, 98, 15, 0, 199, 237, 93, 188, 40, 217, 28, 87, 94, 143, 182, 215, 231, 79, 27, 147, 66, 203, 173, 19, 229, 160, 45, 16, 94, 209, 14, 110, 245, 58, 17, 103, 96, 204, 199, 164, 174, 189, 6, 97, 148, 190, 14, 230, 169, 229, 90, 78, 102, 226, 40, 47, 6, 88, 133, 53, 49, 185, 202, 39, 14, 231, 154, 109, 13, 105, 202, 8, 251, 99, 69, 139, 245, 193, 210, 33, 181, 224, 143, 4, 134, 222, 229, 41, 98, 141, 112, 21, 217, 173, 107, 57, 164, 1, 40, 63, 134, 150, 111, 73, 132, 225, 229, 245, 111, 199, 110, 1, 245, 56, 151, 248, 131, 10, 225, 65, 139, 59, 236, 4, 74, 91, 172, 190, 168, 25, 157] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "9oH16jpwKgTpA11UDDWyjfPZFaKUR7rm59wFkobmR4ZE", recipient: "9oH16jpwKgTpA11UDDWyjfPZFaKUR7rm59wFkobmR4ZE", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "9oH16jpwKgTpA11UDDWyjfPZFaKUR7rm59wFkobmR4ZE", recipient: "9oH16jpwKgTpA11UDDWyjfPZFaKUR7rm59wFkobmR4ZE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728975090, batch_id: 81 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "9oH16jpwKgTpA11UDDWyjfPZFaKUR7rm59wFkobmR4ZE", recipient: "9oH16jpwKgTpA11UDDWyjfPZFaKUR7rm59wFkobmR4ZE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728975090, batch_id: 81 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (21153761676279683030266320246351747231960586821976897243084174543012579825200, 8469880782469162392111101996878718644469749759045495102591254383404696781852), b: (QuadExtField(12780595962865854790363120507949626915314505229263113254485082532020786098081 + 18335055011814577950470488168387746313799515066836274807785840243030337934363 * u), QuadExtField(7884946885398889767891101233126096421566320751412914848368360838654509466166 + 10251787787525420627814573032908823270105142037708261914966993136132489567416 * u)), c: (19139317497141549689695927902695915088655183017848850515048183608722981534644, 11506061414012905947373858062854578934246171590799162012786502860198819525806) }
Serialized proof bytes: [48, 214, 136, 22, 48, 143, 247, 134, 243, 186, 123, 79, 142, 64, 88, 250, 131, 45, 21, 181, 215, 181, 80, 23, 63, 102, 197, 50, 213, 154, 196, 46, 28, 196, 80, 212, 54, 136, 20, 148, 71, 64, 218, 29, 72, 177, 45, 11, 70, 173, 214, 52, 215, 200, 61, 246, 228, 231, 113, 240, 90, 200, 185, 18, 161, 239, 192, 49, 250, 76, 214, 214, 10, 52, 187, 80, 125, 142, 248, 151, 193, 34, 217, 168, 224, 129, 105, 43, 84, 176, 147, 140, 155, 143, 65, 28, 27, 84, 78, 26, 105, 66, 116, 36, 1, 3, 34, 192, 210, 41, 70, 102, 168, 161, 240, 249, 44, 159, 198, 13, 119, 5, 235, 58, 252, 69, 137, 40, 54, 66, 4, 51, 138, 45, 192, 59, 189, 229, 100, 14, 83, 18, 229, 50, 222, 140, 131, 14, 176, 155, 222, 174, 150, 219, 5, 218, 198, 184, 110, 17, 184, 92, 61, 118, 25, 152, 129, 211, 51, 57, 62, 100, 67, 208, 8, 4, 14, 30, 216, 240, 40, 234, 8, 131, 118, 192, 153, 43, 103, 78, 170, 22, 180, 59, 154, 183, 76, 63, 170, 232, 1, 209, 195, 9, 10, 246, 39, 65, 61, 211, 29, 240, 30, 151, 234, 151, 53, 165, 182, 205, 69, 120, 80, 42, 174, 244, 217, 156, 243, 163, 10, 232, 68, 232, 34, 87, 132, 143, 44, 165, 29, 102, 192, 136, 139, 27, 26, 212, 126, 224, 161, 171, 49, 51, 112, 153]
Proof generated: Proof { data: [48, 214, 136, 22, 48, 143, 247, 134, 243, 186, 123, 79, 142, 64, 88, 250, 131, 45, 21, 181, 215, 181, 80, 23, 63, 102, 197, 50, 213, 154, 196, 46, 28, 196, 80, 212, 54, 136, 20, 148, 71, 64, 218, 29, 72, 177, 45, 11, 70, 173, 214, 52, 215, 200, 61, 246, 228, 231, 113, 240, 90, 200, 185, 18, 161, 239, 192, 49, 250, 76, 214, 214, 10, 52, 187, 80, 125, 142, 248, 151, 193, 34, 217, 168, 224, 129, 105, 43, 84, 176, 147, 140, 155, 143, 65, 28, 27, 84, 78, 26, 105, 66, 116, 36, 1, 3, 34, 192, 210, 41, 70, 102, 168, 161, 240, 249, 44, 159, 198, 13, 119, 5, 235, 58, 252, 69, 137, 40, 54, 66, 4, 51, 138, 45, 192, 59, 189, 229, 100, 14, 83, 18, 229, 50, 222, 140, 131, 14, 176, 155, 222, 174, 150, 219, 5, 218, 198, 184, 110, 17, 184, 92, 61, 118, 25, 152, 129, 211, 51, 57, 62, 100, 67, 208, 8, 4, 14, 30, 216, 240, 40, 234, 8, 131, 118, 192, 153, 43, 103, 78, 170, 22, 180, 59, 154, 183, 76, 63, 170, 232, 1, 209, 195, 9, 10, 246, 39, 65, 61, 211, 29, 240, 30, 151, 234, 151, 53, 165, 182, 205, 69, 120, 80, 42, 174, 244, 217, 156, 243, 163, 10, 232, 68, 232, 34, 87, 132, 143, 44, 165, 29, 102, 192, 136, 139, 27, 26, 212, 126, 224, 161, 171, 49, 51, 112, 153] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [48, 214, 136, 22, 48, 143, 247, 134, 243, 186, 123, 79, 142, 64, 88, 250, 131, 45, 21, 181, 215, 181, 80, 23, 63, 102, 197, 50, 213, 154, 196, 46, 28, 196, 80, 212, 54, 136, 20, 148, 71, 64, 218, 29, 72, 177, 45, 11, 70, 173, 214, 52, 215, 200, 61, 246, 228, 231, 113, 240, 90, 200, 185, 18, 161, 239, 192, 49, 250, 76, 214, 214, 10, 52, 187, 80, 125, 142, 248, 151, 193, 34, 217, 168, 224, 129, 105, 43, 84, 176, 147, 140, 155, 143, 65, 28, 27, 84, 78, 26, 105, 66, 116, 36, 1, 3, 34, 192, 210, 41, 70, 102, 168, 161, 240, 249, 44, 159, 198, 13, 119, 5, 235, 58, 252, 69, 137, 40, 54, 66, 4, 51, 138, 45, 192, 59, 189, 229, 100, 14, 83, 18, 229, 50, 222, 140, 131, 14, 176, 155, 222, 174, 150, 219, 5, 218, 198, 184, 110, 17, 184, 92, 61, 118, 25, 152, 129, 211, 51, 57, 62, 100, 67, 208, 8, 4, 14, 30, 216, 240, 40, 234, 8, 131, 118, 192, 153, 43, 103, 78, 170, 22, 180, 59, 154, 183, 76, 63, 170, 232, 1, 209, 195, 9, 10, 246, 39, 65, 61, 211, 29, 240, 30, 151, 234, 151, 53, 165, 182, 205, 69, 120, 80, 42, 174, 244, 217, 156, 243, 163, 10, 232, 68, 232, 34, 87, 132, 143, 44, 165, 29, 102, 192, 136, 139, 27, 26, 212, 126, 224, 161, 171, 49, 51, 112, 153] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [48, 214, 136, 22, 48, 143, 247, 134, 243, 186, 123, 79, 142, 64, 88, 250, 131, 45, 21, 181, 215, 181, 80, 23, 63, 102, 197, 50, 213, 154, 196, 46, 28, 196, 80, 212, 54, 136, 20, 148, 71, 64, 218, 29, 72, 177, 45, 11, 70, 173, 214, 52, 215, 200, 61, 246, 228, 231, 113, 240, 90, 200, 185, 18, 161, 239, 192, 49, 250, 76, 214, 214, 10, 52, 187, 80, 125, 142, 248, 151, 193, 34, 217, 168, 224, 129, 105, 43, 84, 176, 147, 140, 155, 143, 65, 28, 27, 84, 78, 26, 105, 66, 116, 36, 1, 3, 34, 192, 210, 41, 70, 102, 168, 161, 240, 249, 44, 159, 198, 13, 119, 5, 235, 58, 252, 69, 137, 40, 54, 66, 4, 51, 138, 45, 192, 59, 189, 229, 100, 14, 83, 18, 229, 50, 222, 140, 131, 14, 176, 155, 222, 174, 150, 219, 5, 218, 198, 184, 110, 17, 184, 92, 61, 118, 25, 152, 129, 211, 51, 57, 62, 100, 67, 208, 8, 4, 14, 30, 216, 240, 40, 234, 8, 131, 118, 192, 153, 43, 103, 78, 170, 22, 180, 59, 154, 183, 76, 63, 170, 232, 1, 209, 195, 9, 10, 246, 39, 65, 61, 211, 29, 240, 30, 151, 234, 151, 53, 165, 182, 205, 69, 120, 80, 42, 174, 244, 217, 156, 243, 163, 10, 232, 68, 232, 34, 87, 132, 143, 44, 165, 29, 102, 192, 136, 139, 27, 26, 212, 126, 224, 161, 171, 49, 51, 112, 153] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", recipient: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", recipient: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", amount: 0, nonce: 1 }], programs: [], timestamp: 1728996369, batch_id: 83 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", recipient: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", amount: 0, nonce: 1 }], programs: [], timestamp: 1728996369, batch_id: 83 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (16473388216895616561027778522170557791114623510854303843520225188867360357732, 19981050501702014368473423414592510803063720204930057783378364870425695316653), b: (QuadExtField(19136316187715380728995891180123511403399509295783122371870657411707799411323 + 10852086953284707619561859856988706158813549236312434551100006778857398019199 * u), QuadExtField(9901716789415664774878870723244711141476442136380267089870901187809764332183 + 20405898750931854190585727442206507577541641931615409846800750804285154679510 * u)), c: (13063567509751288721770509823088148985947531406761263833232579505985015167506, 9271542055722410592255465118563361826046598292815252351864957690144190703195) }
Serialized proof bytes: [100, 253, 98, 9, 166, 172, 185, 253, 116, 251, 190, 246, 102, 25, 123, 122, 254, 13, 138, 120, 7, 255, 166, 113, 77, 201, 187, 247, 120, 155, 107, 36, 173, 106, 165, 206, 151, 94, 138, 140, 4, 165, 41, 189, 186, 27, 1, 112, 127, 243, 112, 178, 60, 226, 134, 235, 149, 250, 91, 46, 178, 223, 44, 172, 123, 26, 73, 164, 141, 117, 106, 30, 57, 151, 171, 39, 253, 207, 223, 88, 135, 58, 241, 52, 190, 110, 255, 67, 102, 53, 187, 12, 105, 197, 78, 42, 127, 36, 161, 250, 175, 142, 103, 133, 119, 220, 41, 143, 250, 170, 20, 188, 187, 31, 189, 27, 23, 158, 197, 158, 141, 126, 202, 191, 68, 16, 254, 23, 151, 82, 98, 91, 20, 198, 135, 84, 162, 132, 17, 87, 162, 28, 211, 243, 79, 65, 174, 159, 170, 171, 227, 122, 130, 65, 57, 45, 80, 44, 228, 21, 214, 90, 188, 22, 14, 170, 186, 40, 71, 248, 43, 199, 142, 186, 88, 155, 126, 7, 77, 21, 219, 154, 118, 195, 181, 179, 150, 146, 83, 84, 29, 173, 18, 186, 74, 38, 102, 196, 246, 13, 225, 45, 99, 64, 78, 141, 169, 150, 10, 235, 195, 244, 92, 34, 253, 185, 230, 101, 38, 146, 153, 183, 225, 28, 91, 38, 65, 244, 251, 92, 178, 44, 181, 251, 165, 11, 26, 68, 150, 15, 209, 72, 166, 92, 225, 3, 124, 71, 203, 241, 197, 49, 192, 129, 127, 20]
Proof generated: Proof { data: [100, 253, 98, 9, 166, 172, 185, 253, 116, 251, 190, 246, 102, 25, 123, 122, 254, 13, 138, 120, 7, 255, 166, 113, 77, 201, 187, 247, 120, 155, 107, 36, 173, 106, 165, 206, 151, 94, 138, 140, 4, 165, 41, 189, 186, 27, 1, 112, 127, 243, 112, 178, 60, 226, 134, 235, 149, 250, 91, 46, 178, 223, 44, 172, 123, 26, 73, 164, 141, 117, 106, 30, 57, 151, 171, 39, 253, 207, 223, 88, 135, 58, 241, 52, 190, 110, 255, 67, 102, 53, 187, 12, 105, 197, 78, 42, 127, 36, 161, 250, 175, 142, 103, 133, 119, 220, 41, 143, 250, 170, 20, 188, 187, 31, 189, 27, 23, 158, 197, 158, 141, 126, 202, 191, 68, 16, 254, 23, 151, 82, 98, 91, 20, 198, 135, 84, 162, 132, 17, 87, 162, 28, 211, 243, 79, 65, 174, 159, 170, 171, 227, 122, 130, 65, 57, 45, 80, 44, 228, 21, 214, 90, 188, 22, 14, 170, 186, 40, 71, 248, 43, 199, 142, 186, 88, 155, 126, 7, 77, 21, 219, 154, 118, 195, 181, 179, 150, 146, 83, 84, 29, 173, 18, 186, 74, 38, 102, 196, 246, 13, 225, 45, 99, 64, 78, 141, 169, 150, 10, 235, 195, 244, 92, 34, 253, 185, 230, 101, 38, 146, 153, 183, 225, 28, 91, 38, 65, 244, 251, 92, 178, 44, 181, 251, 165, 11, 26, 68, 150, 15, 209, 72, 166, 92, 225, 3, 124, 71, 203, 241, 197, 49, 192, 129, 127, 20] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [100, 253, 98, 9, 166, 172, 185, 253, 116, 251, 190, 246, 102, 25, 123, 122, 254, 13, 138, 120, 7, 255, 166, 113, 77, 201, 187, 247, 120, 155, 107, 36, 173, 106, 165, 206, 151, 94, 138, 140, 4, 165, 41, 189, 186, 27, 1, 112, 127, 243, 112, 178, 60, 226, 134, 235, 149, 250, 91, 46, 178, 223, 44, 172, 123, 26, 73, 164, 141, 117, 106, 30, 57, 151, 171, 39, 253, 207, 223, 88, 135, 58, 241, 52, 190, 110, 255, 67, 102, 53, 187, 12, 105, 197, 78, 42, 127, 36, 161, 250, 175, 142, 103, 133, 119, 220, 41, 143, 250, 170, 20, 188, 187, 31, 189, 27, 23, 158, 197, 158, 141, 126, 202, 191, 68, 16, 254, 23, 151, 82, 98, 91, 20, 198, 135, 84, 162, 132, 17, 87, 162, 28, 211, 243, 79, 65, 174, 159, 170, 171, 227, 122, 130, 65, 57, 45, 80, 44, 228, 21, 214, 90, 188, 22, 14, 170, 186, 40, 71, 248, 43, 199, 142, 186, 88, 155, 126, 7, 77, 21, 219, 154, 118, 195, 181, 179, 150, 146, 83, 84, 29, 173, 18, 186, 74, 38, 102, 196, 246, 13, 225, 45, 99, 64, 78, 141, 169, 150, 10, 235, 195, 244, 92, 34, 253, 185, 230, 101, 38, 146, 153, 183, 225, 28, 91, 38, 65, 244, 251, 92, 178, 44, 181, 251, 165, 11, 26, 68, 150, 15, 209, 72, 166, 92, 225, 3, 124, 71, 203, 241, 197, 49, 192, 129, 127, 20] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [100, 253, 98, 9, 166, 172, 185, 253, 116, 251, 190, 246, 102, 25, 123, 122, 254, 13, 138, 120, 7, 255, 166, 113, 77, 201, 187, 247, 120, 155, 107, 36, 173, 106, 165, 206, 151, 94, 138, 140, 4, 165, 41, 189, 186, 27, 1, 112, 127, 243, 112, 178, 60, 226, 134, 235, 149, 250, 91, 46, 178, 223, 44, 172, 123, 26, 73, 164, 141, 117, 106, 30, 57, 151, 171, 39, 253, 207, 223, 88, 135, 58, 241, 52, 190, 110, 255, 67, 102, 53, 187, 12, 105, 197, 78, 42, 127, 36, 161, 250, 175, 142, 103, 133, 119, 220, 41, 143, 250, 170, 20, 188, 187, 31, 189, 27, 23, 158, 197, 158, 141, 126, 202, 191, 68, 16, 254, 23, 151, 82, 98, 91, 20, 198, 135, 84, 162, 132, 17, 87, 162, 28, 211, 243, 79, 65, 174, 159, 170, 171, 227, 122, 130, 65, 57, 45, 80, 44, 228, 21, 214, 90, 188, 22, 14, 170, 186, 40, 71, 248, 43, 199, 142, 186, 88, 155, 126, 7, 77, 21, 219, 154, 118, 195, 181, 179, 150, 146, 83, 84, 29, 173, 18, 186, 74, 38, 102, 196, 246, 13, 225, 45, 99, 64, 78, 141, 169, 150, 10, 235, 195, 244, 92, 34, 253, 185, 230, 101, 38, 146, 153, 183, 225, 28, 91, 38, 65, 244, 251, 92, 178, 44, 181, 251, 165, 11, 26, 68, 150, 15, 209, 72, 166, 92, 225, 3, 124, 71, 203, 241, 197, 49, 192, 129, 127, 20] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", recipient: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", recipient: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", amount: 0, nonce: 1 }], programs: [], timestamp: 1728996394, batch_id: 84 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", recipient: "62YoGzUP58xRHrNsEy3bWx5KgcUMbjunKvYtYzpiba6h", amount: 0, nonce: 1 }], programs: [], timestamp: 1728996394, batch_id: 84 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (7740998125044240545553148080098172637502671655941098185957314276272331334297, 4182945452708843303443811322853292286206024708210631356425329138521639169459), b: (QuadExtField(2811506862994272583482635983353825114564934813323628516670000883572891832869 + 21506373441931616905558112835222259879318224927049770843789604132236562390836 * u), QuadExtField(3803833397191037753147292602591472006138009290809059166652743827929260978144 + 15128433208420297477616586069093761577849922082251953512914636776836251400651 * u)), c: (13572735091675066614377168972035839246137978644452538904111072584062851100959, 9914840188720963104039005019198977792994234717930511101753315673397732966778) }
Serialized proof bytes: [153, 162, 24, 146, 121, 220, 122, 22, 105, 197, 92, 188, 231, 89, 184, 180, 85, 4, 97, 170, 174, 224, 248, 214, 39, 60, 40, 148, 234, 63, 29, 17, 179, 45, 183, 122, 127, 243, 206, 85, 97, 172, 69, 241, 150, 246, 122, 160, 53, 200, 33, 144, 1, 159, 105, 122, 43, 196, 3, 3, 150, 118, 63, 9, 37, 210, 145, 150, 16, 36, 6, 40, 72, 34, 208, 202, 146, 43, 104, 137, 108, 50, 238, 21, 13, 92, 206, 203, 1, 17, 59, 125, 169, 65, 55, 6, 52, 223, 189, 231, 28, 191, 249, 172, 169, 102, 74, 231, 229, 47, 95, 124, 184, 174, 73, 78, 126, 21, 145, 10, 244, 147, 120, 127, 14, 45, 140, 47, 224, 111, 13, 251, 255, 82, 68, 231, 7, 180, 211, 42, 104, 89, 120, 173, 106, 29, 71, 245, 183, 66, 244, 28, 164, 115, 156, 84, 182, 228, 104, 8, 203, 57, 254, 217, 65, 52, 173, 229, 149, 159, 2, 4, 44, 97, 59, 84, 50, 103, 131, 162, 173, 108, 42, 157, 26, 216, 193, 17, 199, 99, 114, 161, 31, 49, 244, 197, 108, 120, 43, 206, 54, 200, 249, 21, 150, 109, 122, 150, 208, 190, 16, 13, 22, 32, 27, 55, 85, 126, 64, 214, 84, 229, 1, 30, 122, 1, 46, 2, 185, 12, 250, 253, 250, 32, 140, 51, 251, 41, 110, 227, 236, 114, 166, 102, 204, 238, 157, 167, 227, 187, 97, 28, 198, 153, 235, 21]
Proof generated: Proof { data: [153, 162, 24, 146, 121, 220, 122, 22, 105, 197, 92, 188, 231, 89, 184, 180, 85, 4, 97, 170, 174, 224, 248, 214, 39, 60, 40, 148, 234, 63, 29, 17, 179, 45, 183, 122, 127, 243, 206, 85, 97, 172, 69, 241, 150, 246, 122, 160, 53, 200, 33, 144, 1, 159, 105, 122, 43, 196, 3, 3, 150, 118, 63, 9, 37, 210, 145, 150, 16, 36, 6, 40, 72, 34, 208, 202, 146, 43, 104, 137, 108, 50, 238, 21, 13, 92, 206, 203, 1, 17, 59, 125, 169, 65, 55, 6, 52, 223, 189, 231, 28, 191, 249, 172, 169, 102, 74, 231, 229, 47, 95, 124, 184, 174, 73, 78, 126, 21, 145, 10, 244, 147, 120, 127, 14, 45, 140, 47, 224, 111, 13, 251, 255, 82, 68, 231, 7, 180, 211, 42, 104, 89, 120, 173, 106, 29, 71, 245, 183, 66, 244, 28, 164, 115, 156, 84, 182, 228, 104, 8, 203, 57, 254, 217, 65, 52, 173, 229, 149, 159, 2, 4, 44, 97, 59, 84, 50, 103, 131, 162, 173, 108, 42, 157, 26, 216, 193, 17, 199, 99, 114, 161, 31, 49, 244, 197, 108, 120, 43, 206, 54, 200, 249, 21, 150, 109, 122, 150, 208, 190, 16, 13, 22, 32, 27, 55, 85, 126, 64, 214, 84, 229, 1, 30, 122, 1, 46, 2, 185, 12, 250, 253, 250, 32, 140, 51, 251, 41, 110, 227, 236, 114, 166, 102, 204, 238, 157, 167, 227, 187, 97, 28, 198, 153, 235, 21] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [153, 162, 24, 146, 121, 220, 122, 22, 105, 197, 92, 188, 231, 89, 184, 180, 85, 4, 97, 170, 174, 224, 248, 214, 39, 60, 40, 148, 234, 63, 29, 17, 179, 45, 183, 122, 127, 243, 206, 85, 97, 172, 69, 241, 150, 246, 122, 160, 53, 200, 33, 144, 1, 159, 105, 122, 43, 196, 3, 3, 150, 118, 63, 9, 37, 210, 145, 150, 16, 36, 6, 40, 72, 34, 208, 202, 146, 43, 104, 137, 108, 50, 238, 21, 13, 92, 206, 203, 1, 17, 59, 125, 169, 65, 55, 6, 52, 223, 189, 231, 28, 191, 249, 172, 169, 102, 74, 231, 229, 47, 95, 124, 184, 174, 73, 78, 126, 21, 145, 10, 244, 147, 120, 127, 14, 45, 140, 47, 224, 111, 13, 251, 255, 82, 68, 231, 7, 180, 211, 42, 104, 89, 120, 173, 106, 29, 71, 245, 183, 66, 244, 28, 164, 115, 156, 84, 182, 228, 104, 8, 203, 57, 254, 217, 65, 52, 173, 229, 149, 159, 2, 4, 44, 97, 59, 84, 50, 103, 131, 162, 173, 108, 42, 157, 26, 216, 193, 17, 199, 99, 114, 161, 31, 49, 244, 197, 108, 120, 43, 206, 54, 200, 249, 21, 150, 109, 122, 150, 208, 190, 16, 13, 22, 32, 27, 55, 85, 126, 64, 214, 84, 229, 1, 30, 122, 1, 46, 2, 185, 12, 250, 253, 250, 32, 140, 51, 251, 41, 110, 227, 236, 114, 166, 102, 204, 238, 157, 167, 227, 187, 97, 28, 198, 153, 235, 21] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [153, 162, 24, 146, 121, 220, 122, 22, 105, 197, 92, 188, 231, 89, 184, 180, 85, 4, 97, 170, 174, 224, 248, 214, 39, 60, 40, 148, 234, 63, 29, 17, 179, 45, 183, 122, 127, 243, 206, 85, 97, 172, 69, 241, 150, 246, 122, 160, 53, 200, 33, 144, 1, 159, 105, 122, 43, 196, 3, 3, 150, 118, 63, 9, 37, 210, 145, 150, 16, 36, 6, 40, 72, 34, 208, 202, 146, 43, 104, 137, 108, 50, 238, 21, 13, 92, 206, 203, 1, 17, 59, 125, 169, 65, 55, 6, 52, 223, 189, 231, 28, 191, 249, 172, 169, 102, 74, 231, 229, 47, 95, 124, 184, 174, 73, 78, 126, 21, 145, 10, 244, 147, 120, 127, 14, 45, 140, 47, 224, 111, 13, 251, 255, 82, 68, 231, 7, 180, 211, 42, 104, 89, 120, 173, 106, 29, 71, 245, 183, 66, 244, 28, 164, 115, 156, 84, 182, 228, 104, 8, 203, 57, 254, 217, 65, 52, 173, 229, 149, 159, 2, 4, 44, 97, 59, 84, 50, 103, 131, 162, 173, 108, 42, 157, 26, 216, 193, 17, 199, 99, 114, 161, 31, 49, 244, 197, 108, 120, 43, 206, 54, 200, 249, 21, 150, 109, 122, 150, 208, 190, 16, 13, 22, 32, 27, 55, 85, 126, 64, 214, 84, 229, 1, 30, 122, 1, 46, 2, 185, 12, 250, 253, 250, 32, 140, 51, 251, 41, 110, 227, 236, 114, 166, 102, 204, 238, 157, 167, 227, 187, 97, 28, 198, 153, 235, 21] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "GQZHkBPGubYrxk1jUWGjKVQNzbuSD1GEJpEatpu62oLm", recipient: "GQZHkBPGubYrxk1jUWGjKVQNzbuSD1GEJpEatpu62oLm", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "GQZHkBPGubYrxk1jUWGjKVQNzbuSD1GEJpEatpu62oLm", recipient: "GQZHkBPGubYrxk1jUWGjKVQNzbuSD1GEJpEatpu62oLm", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998501, batch_id: 86 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "GQZHkBPGubYrxk1jUWGjKVQNzbuSD1GEJpEatpu62oLm", recipient: "GQZHkBPGubYrxk1jUWGjKVQNzbuSD1GEJpEatpu62oLm", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998501, batch_id: 86 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (4626782958245385264385165890161569181117715477799729943047256415858113952497, 14804336559524423723039477110721876492727549804011590849352371508011555856869), b: (QuadExtField(1868297190950813496965968603358803165789942534510183426595497420036033824862 + 12477164680104997468387149668172415894513735120923548034207601273206334576114 * u), QuadExtField(14673861569699852859986664392285177683334047164017797855881650879155780653433 + 5388510891749997134683014713450838304940632131964606332728207630433674996888 * u)), c: (19503922784014219618260363225819679354978931076717248826965192440984632370172, 11335161347088313966448438390510426899155345495129222729380035040447596336883) }
Serialized proof bytes: [241, 186, 100, 229, 182, 63, 80, 102, 233, 155, 204, 174, 157, 86, 193, 170, 115, 79, 136, 121, 74, 195, 66, 151, 35, 44, 242, 16, 150, 170, 58, 10, 229, 161, 31, 244, 168, 99, 7, 48, 205, 22, 253, 187, 0, 52, 110, 168, 88, 16, 98, 4, 55, 225, 110, 187, 8, 34, 254, 59, 34, 245, 186, 160, 94, 72, 161, 114, 39, 37, 67, 133, 34, 164, 122, 254, 28, 172, 121, 254, 192, 75, 82, 6, 114, 208, 166, 204, 183, 220, 226, 81, 50, 107, 33, 4, 242, 85, 164, 171, 48, 212, 131, 31, 6, 35, 202, 245, 199, 253, 228, 20, 5, 24, 131, 245, 123, 194, 221, 7, 105, 58, 240, 190, 47, 211, 149, 27, 121, 17, 135, 4, 99, 58, 7, 83, 60, 105, 23, 134, 188, 7, 221, 32, 37, 194, 174, 135, 72, 0, 81, 175, 226, 117, 252, 226, 127, 28, 113, 32, 152, 44, 162, 189, 115, 112, 234, 242, 54, 94, 82, 189, 27, 134, 34, 110, 235, 235, 50, 80, 26, 136, 195, 177, 176, 107, 96, 109, 1, 202, 233, 11, 252, 35, 113, 93, 135, 95, 123, 153, 103, 58, 97, 65, 248, 217, 250, 172, 201, 163, 230, 187, 70, 124, 24, 168, 36, 210, 172, 135, 63, 212, 30, 43, 243, 22, 208, 171, 155, 207, 155, 158, 102, 36, 87, 124, 41, 120, 90, 9, 51, 101, 19, 48, 5, 15, 81, 89, 191, 29, 101, 224, 85, 121, 15, 153]
Proof generated: Proof { data: [241, 186, 100, 229, 182, 63, 80, 102, 233, 155, 204, 174, 157, 86, 193, 170, 115, 79, 136, 121, 74, 195, 66, 151, 35, 44, 242, 16, 150, 170, 58, 10, 229, 161, 31, 244, 168, 99, 7, 48, 205, 22, 253, 187, 0, 52, 110, 168, 88, 16, 98, 4, 55, 225, 110, 187, 8, 34, 254, 59, 34, 245, 186, 160, 94, 72, 161, 114, 39, 37, 67, 133, 34, 164, 122, 254, 28, 172, 121, 254, 192, 75, 82, 6, 114, 208, 166, 204, 183, 220, 226, 81, 50, 107, 33, 4, 242, 85, 164, 171, 48, 212, 131, 31, 6, 35, 202, 245, 199, 253, 228, 20, 5, 24, 131, 245, 123, 194, 221, 7, 105, 58, 240, 190, 47, 211, 149, 27, 121, 17, 135, 4, 99, 58, 7, 83, 60, 105, 23, 134, 188, 7, 221, 32, 37, 194, 174, 135, 72, 0, 81, 175, 226, 117, 252, 226, 127, 28, 113, 32, 152, 44, 162, 189, 115, 112, 234, 242, 54, 94, 82, 189, 27, 134, 34, 110, 235, 235, 50, 80, 26, 136, 195, 177, 176, 107, 96, 109, 1, 202, 233, 11, 252, 35, 113, 93, 135, 95, 123, 153, 103, 58, 97, 65, 248, 217, 250, 172, 201, 163, 230, 187, 70, 124, 24, 168, 36, 210, 172, 135, 63, 212, 30, 43, 243, 22, 208, 171, 155, 207, 155, 158, 102, 36, 87, 124, 41, 120, 90, 9, 51, 101, 19, 48, 5, 15, 81, 89, 191, 29, 101, 224, 85, 121, 15, 153] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [241, 186, 100, 229, 182, 63, 80, 102, 233, 155, 204, 174, 157, 86, 193, 170, 115, 79, 136, 121, 74, 195, 66, 151, 35, 44, 242, 16, 150, 170, 58, 10, 229, 161, 31, 244, 168, 99, 7, 48, 205, 22, 253, 187, 0, 52, 110, 168, 88, 16, 98, 4, 55, 225, 110, 187, 8, 34, 254, 59, 34, 245, 186, 160, 94, 72, 161, 114, 39, 37, 67, 133, 34, 164, 122, 254, 28, 172, 121, 254, 192, 75, 82, 6, 114, 208, 166, 204, 183, 220, 226, 81, 50, 107, 33, 4, 242, 85, 164, 171, 48, 212, 131, 31, 6, 35, 202, 245, 199, 253, 228, 20, 5, 24, 131, 245, 123, 194, 221, 7, 105, 58, 240, 190, 47, 211, 149, 27, 121, 17, 135, 4, 99, 58, 7, 83, 60, 105, 23, 134, 188, 7, 221, 32, 37, 194, 174, 135, 72, 0, 81, 175, 226, 117, 252, 226, 127, 28, 113, 32, 152, 44, 162, 189, 115, 112, 234, 242, 54, 94, 82, 189, 27, 134, 34, 110, 235, 235, 50, 80, 26, 136, 195, 177, 176, 107, 96, 109, 1, 202, 233, 11, 252, 35, 113, 93, 135, 95, 123, 153, 103, 58, 97, 65, 248, 217, 250, 172, 201, 163, 230, 187, 70, 124, 24, 168, 36, 210, 172, 135, 63, 212, 30, 43, 243, 22, 208, 171, 155, 207, 155, 158, 102, 36, 87, 124, 41, 120, 90, 9, 51, 101, 19, 48, 5, 15, 81, 89, 191, 29, 101, 224, 85, 121, 15, 153] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [241, 186, 100, 229, 182, 63, 80, 102, 233, 155, 204, 174, 157, 86, 193, 170, 115, 79, 136, 121, 74, 195, 66, 151, 35, 44, 242, 16, 150, 170, 58, 10, 229, 161, 31, 244, 168, 99, 7, 48, 205, 22, 253, 187, 0, 52, 110, 168, 88, 16, 98, 4, 55, 225, 110, 187, 8, 34, 254, 59, 34, 245, 186, 160, 94, 72, 161, 114, 39, 37, 67, 133, 34, 164, 122, 254, 28, 172, 121, 254, 192, 75, 82, 6, 114, 208, 166, 204, 183, 220, 226, 81, 50, 107, 33, 4, 242, 85, 164, 171, 48, 212, 131, 31, 6, 35, 202, 245, 199, 253, 228, 20, 5, 24, 131, 245, 123, 194, 221, 7, 105, 58, 240, 190, 47, 211, 149, 27, 121, 17, 135, 4, 99, 58, 7, 83, 60, 105, 23, 134, 188, 7, 221, 32, 37, 194, 174, 135, 72, 0, 81, 175, 226, 117, 252, 226, 127, 28, 113, 32, 152, 44, 162, 189, 115, 112, 234, 242, 54, 94, 82, 189, 27, 134, 34, 110, 235, 235, 50, 80, 26, 136, 195, 177, 176, 107, 96, 109, 1, 202, 233, 11, 252, 35, 113, 93, 135, 95, 123, 153, 103, 58, 97, 65, 248, 217, 250, 172, 201, 163, 230, 187, 70, 124, 24, 168, 36, 210, 172, 135, 63, 212, 30, 43, 243, 22, 208, 171, 155, 207, 155, 158, 102, 36, 87, 124, 41, 120, 90, 9, 51, 101, 19, 48, 5, 15, 81, 89, 191, 29, 101, 224, 85, 121, 15, 153] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "waK1k2YnSJ7vJTTnmBkWcXdv9jgsSPyFTNmYHWQvexQ", recipient: "waK1k2YnSJ7vJTTnmBkWcXdv9jgsSPyFTNmYHWQvexQ", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "waK1k2YnSJ7vJTTnmBkWcXdv9jgsSPyFTNmYHWQvexQ", recipient: "waK1k2YnSJ7vJTTnmBkWcXdv9jgsSPyFTNmYHWQvexQ", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998584, batch_id: 88 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "waK1k2YnSJ7vJTTnmBkWcXdv9jgsSPyFTNmYHWQvexQ", recipient: "waK1k2YnSJ7vJTTnmBkWcXdv9jgsSPyFTNmYHWQvexQ", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998584, batch_id: 88 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (9989347266971740499001229326658369004219050410008476288752384596023720189601, 17280806765309092576358009203350657527666046327672546597359512532367399797270), b: (QuadExtField(4731480064778672330174344630535418726574126765625193652000504599920892100099 + 10486328875302944152403126952256980232437703311612778597754122457973999243654 * u), QuadExtField(14724730044058234971847635647270197794611819908589184742070788240103915884530 + 20541896839966844428157016006657329489951371368604388811532607825813068849138 * u)), c: (1572861437021378145121164897848101183140861523053735802352049506995546213881, 19911465061144270588798820828455077107659755290950796378399448964139764405835) }
Serialized proof bytes: [161, 158, 158, 5, 239, 183, 73, 205, 211, 188, 189, 10, 136, 177, 137, 132, 225, 152, 195, 221, 164, 105, 248, 155, 56, 94, 115, 61, 43, 197, 21, 22, 22, 66, 29, 9, 175, 15, 32, 116, 27, 209, 53, 195, 45, 55, 156, 67, 188, 1, 161, 97, 9, 109, 140, 79, 4, 114, 96, 109, 11, 151, 52, 166, 3, 190, 246, 102, 141, 59, 121, 99, 30, 13, 255, 166, 11, 220, 10, 158, 200, 0, 249, 213, 130, 57, 29, 72, 60, 94, 209, 148, 61, 236, 117, 10, 134, 145, 203, 193, 147, 136, 36, 102, 6, 176, 60, 94, 161, 121, 77, 187, 141, 232, 16, 49, 104, 211, 172, 22, 118, 154, 193, 159, 67, 13, 47, 23, 242, 143, 183, 72, 204, 151, 23, 172, 254, 173, 195, 49, 44, 84, 161, 182, 103, 18, 156, 171, 7, 243, 180, 244, 216, 47, 97, 119, 224, 230, 141, 32, 242, 31, 248, 205, 144, 120, 165, 243, 11, 126, 108, 214, 205, 116, 254, 18, 198, 83, 100, 48, 44, 150, 138, 195, 29, 118, 80, 14, 53, 77, 106, 173, 249, 205, 45, 69, 147, 110, 173, 51, 160, 235, 235, 207, 181, 15, 156, 35, 214, 216, 66, 107, 224, 186, 188, 149, 157, 250, 237, 41, 65, 53, 122, 3, 75, 214, 167, 76, 30, 11, 174, 199, 178, 244, 175, 64, 26, 142, 90, 63, 224, 92, 20, 224, 20, 74, 181, 136, 204, 184, 108, 189, 102, 125, 5, 172]
Proof generated: Proof { data: [161, 158, 158, 5, 239, 183, 73, 205, 211, 188, 189, 10, 136, 177, 137, 132, 225, 152, 195, 221, 164, 105, 248, 155, 56, 94, 115, 61, 43, 197, 21, 22, 22, 66, 29, 9, 175, 15, 32, 116, 27, 209, 53, 195, 45, 55, 156, 67, 188, 1, 161, 97, 9, 109, 140, 79, 4, 114, 96, 109, 11, 151, 52, 166, 3, 190, 246, 102, 141, 59, 121, 99, 30, 13, 255, 166, 11, 220, 10, 158, 200, 0, 249, 213, 130, 57, 29, 72, 60, 94, 209, 148, 61, 236, 117, 10, 134, 145, 203, 193, 147, 136, 36, 102, 6, 176, 60, 94, 161, 121, 77, 187, 141, 232, 16, 49, 104, 211, 172, 22, 118, 154, 193, 159, 67, 13, 47, 23, 242, 143, 183, 72, 204, 151, 23, 172, 254, 173, 195, 49, 44, 84, 161, 182, 103, 18, 156, 171, 7, 243, 180, 244, 216, 47, 97, 119, 224, 230, 141, 32, 242, 31, 248, 205, 144, 120, 165, 243, 11, 126, 108, 214, 205, 116, 254, 18, 198, 83, 100, 48, 44, 150, 138, 195, 29, 118, 80, 14, 53, 77, 106, 173, 249, 205, 45, 69, 147, 110, 173, 51, 160, 235, 235, 207, 181, 15, 156, 35, 214, 216, 66, 107, 224, 186, 188, 149, 157, 250, 237, 41, 65, 53, 122, 3, 75, 214, 167, 76, 30, 11, 174, 199, 178, 244, 175, 64, 26, 142, 90, 63, 224, 92, 20, 224, 20, 74, 181, 136, 204, 184, 108, 189, 102, 125, 5, 172] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [161, 158, 158, 5, 239, 183, 73, 205, 211, 188, 189, 10, 136, 177, 137, 132, 225, 152, 195, 221, 164, 105, 248, 155, 56, 94, 115, 61, 43, 197, 21, 22, 22, 66, 29, 9, 175, 15, 32, 116, 27, 209, 53, 195, 45, 55, 156, 67, 188, 1, 161, 97, 9, 109, 140, 79, 4, 114, 96, 109, 11, 151, 52, 166, 3, 190, 246, 102, 141, 59, 121, 99, 30, 13, 255, 166, 11, 220, 10, 158, 200, 0, 249, 213, 130, 57, 29, 72, 60, 94, 209, 148, 61, 236, 117, 10, 134, 145, 203, 193, 147, 136, 36, 102, 6, 176, 60, 94, 161, 121, 77, 187, 141, 232, 16, 49, 104, 211, 172, 22, 118, 154, 193, 159, 67, 13, 47, 23, 242, 143, 183, 72, 204, 151, 23, 172, 254, 173, 195, 49, 44, 84, 161, 182, 103, 18, 156, 171, 7, 243, 180, 244, 216, 47, 97, 119, 224, 230, 141, 32, 242, 31, 248, 205, 144, 120, 165, 243, 11, 126, 108, 214, 205, 116, 254, 18, 198, 83, 100, 48, 44, 150, 138, 195, 29, 118, 80, 14, 53, 77, 106, 173, 249, 205, 45, 69, 147, 110, 173, 51, 160, 235, 235, 207, 181, 15, 156, 35, 214, 216, 66, 107, 224, 186, 188, 149, 157, 250, 237, 41, 65, 53, 122, 3, 75, 214, 167, 76, 30, 11, 174, 199, 178, 244, 175, 64, 26, 142, 90, 63, 224, 92, 20, 224, 20, 74, 181, 136, 204, 184, 108, 189, 102, 125, 5, 172] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [161, 158, 158, 5, 239, 183, 73, 205, 211, 188, 189, 10, 136, 177, 137, 132, 225, 152, 195, 221, 164, 105, 248, 155, 56, 94, 115, 61, 43, 197, 21, 22, 22, 66, 29, 9, 175, 15, 32, 116, 27, 209, 53, 195, 45, 55, 156, 67, 188, 1, 161, 97, 9, 109, 140, 79, 4, 114, 96, 109, 11, 151, 52, 166, 3, 190, 246, 102, 141, 59, 121, 99, 30, 13, 255, 166, 11, 220, 10, 158, 200, 0, 249, 213, 130, 57, 29, 72, 60, 94, 209, 148, 61, 236, 117, 10, 134, 145, 203, 193, 147, 136, 36, 102, 6, 176, 60, 94, 161, 121, 77, 187, 141, 232, 16, 49, 104, 211, 172, 22, 118, 154, 193, 159, 67, 13, 47, 23, 242, 143, 183, 72, 204, 151, 23, 172, 254, 173, 195, 49, 44, 84, 161, 182, 103, 18, 156, 171, 7, 243, 180, 244, 216, 47, 97, 119, 224, 230, 141, 32, 242, 31, 248, 205, 144, 120, 165, 243, 11, 126, 108, 214, 205, 116, 254, 18, 198, 83, 100, 48, 44, 150, 138, 195, 29, 118, 80, 14, 53, 77, 106, 173, 249, 205, 45, 69, 147, 110, 173, 51, 160, 235, 235, 207, 181, 15, 156, 35, 214, 216, 66, 107, 224, 186, 188, 149, 157, 250, 237, 41, 65, 53, 122, 3, 75, 214, 167, 76, 30, 11, 174, 199, 178, 244, 175, 64, 26, 142, 90, 63, 224, 92, 20, 224, 20, 74, 181, 136, 204, 184, 108, 189, 102, 125, 5, 172] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "Bcrj3yxd8Ze64bVgVLfqYwp531fMz7mUFEtZEGCuXwSH", recipient: "Bcrj3yxd8Ze64bVgVLfqYwp531fMz7mUFEtZEGCuXwSH", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "Bcrj3yxd8Ze64bVgVLfqYwp531fMz7mUFEtZEGCuXwSH", recipient: "Bcrj3yxd8Ze64bVgVLfqYwp531fMz7mUFEtZEGCuXwSH", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998608, batch_id: 90 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "Bcrj3yxd8Ze64bVgVLfqYwp531fMz7mUFEtZEGCuXwSH", recipient: "Bcrj3yxd8Ze64bVgVLfqYwp531fMz7mUFEtZEGCuXwSH", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998608, batch_id: 90 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (10925266546539863728745860319126506866692641687762815739006103139169105436896, 12343604086763705066657736482254893176798207370654863777577524344000660598101), b: (QuadExtField(2190597856621050343963468672621900059978110028714894517901222896625938349365 + 12833209448977550589774722193441118969065309579020004128289027495863713450256 * u), QuadExtField(6525449421278792550685647011591085579211739414953978433318433348475697173843 + 1978931022786733641643485121706833679951342684150549114537204584531531550497 * u)), c: (8900419888946249846483925397189993492645550073635712497247909972852959554688, 1608670655632947421961097079093919748406397813672769825128039211522645683191) }
Serialized proof bytes: [224, 96, 45, 148, 168, 220, 93, 94, 145, 164, 160, 201, 222, 206, 8, 154, 195, 222, 241, 20, 47, 170, 134, 167, 157, 8, 39, 185, 82, 123, 39, 24, 85, 109, 127, 22, 197, 90, 122, 242, 100, 32, 132, 26, 86, 165, 14, 248, 155, 20, 205, 5, 17, 150, 203, 207, 61, 200, 179, 0, 122, 59, 74, 155, 53, 61, 196, 236, 117, 152, 159, 110, 53, 206, 125, 71, 253, 210, 160, 24, 44, 172, 199, 65, 152, 236, 18, 242, 180, 234, 66, 111, 158, 213, 215, 4, 16, 201, 82, 81, 0, 141, 242, 176, 67, 18, 29, 23, 100, 127, 187, 213, 224, 164, 108, 31, 144, 199, 175, 211, 31, 134, 74, 54, 210, 86, 95, 28, 83, 21, 187, 58, 234, 21, 242, 123, 27, 199, 104, 183, 110, 59, 81, 108, 198, 52, 51, 110, 171, 151, 111, 72, 40, 39, 72, 75, 3, 70, 109, 14, 33, 79, 126, 161, 252, 213, 154, 116, 44, 6, 201, 138, 222, 69, 75, 227, 248, 115, 63, 167, 9, 93, 57, 68, 220, 161, 14, 55, 7, 9, 96, 4, 128, 44, 3, 70, 140, 132, 241, 11, 157, 95, 170, 157, 233, 103, 78, 51, 44, 100, 172, 17, 183, 26, 148, 128, 230, 111, 50, 245, 137, 117, 173, 19, 247, 235, 5, 19, 171, 61, 147, 227, 197, 73, 96, 195, 133, 204, 114, 166, 41, 38, 166, 120, 72, 3, 44, 111, 33, 177, 45, 231, 174, 121, 142, 3]
Proof generated: Proof { data: [224, 96, 45, 148, 168, 220, 93, 94, 145, 164, 160, 201, 222, 206, 8, 154, 195, 222, 241, 20, 47, 170, 134, 167, 157, 8, 39, 185, 82, 123, 39, 24, 85, 109, 127, 22, 197, 90, 122, 242, 100, 32, 132, 26, 86, 165, 14, 248, 155, 20, 205, 5, 17, 150, 203, 207, 61, 200, 179, 0, 122, 59, 74, 155, 53, 61, 196, 236, 117, 152, 159, 110, 53, 206, 125, 71, 253, 210, 160, 24, 44, 172, 199, 65, 152, 236, 18, 242, 180, 234, 66, 111, 158, 213, 215, 4, 16, 201, 82, 81, 0, 141, 242, 176, 67, 18, 29, 23, 100, 127, 187, 213, 224, 164, 108, 31, 144, 199, 175, 211, 31, 134, 74, 54, 210, 86, 95, 28, 83, 21, 187, 58, 234, 21, 242, 123, 27, 199, 104, 183, 110, 59, 81, 108, 198, 52, 51, 110, 171, 151, 111, 72, 40, 39, 72, 75, 3, 70, 109, 14, 33, 79, 126, 161, 252, 213, 154, 116, 44, 6, 201, 138, 222, 69, 75, 227, 248, 115, 63, 167, 9, 93, 57, 68, 220, 161, 14, 55, 7, 9, 96, 4, 128, 44, 3, 70, 140, 132, 241, 11, 157, 95, 170, 157, 233, 103, 78, 51, 44, 100, 172, 17, 183, 26, 148, 128, 230, 111, 50, 245, 137, 117, 173, 19, 247, 235, 5, 19, 171, 61, 147, 227, 197, 73, 96, 195, 133, 204, 114, 166, 41, 38, 166, 120, 72, 3, 44, 111, 33, 177, 45, 231, 174, 121, 142, 3] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [224, 96, 45, 148, 168, 220, 93, 94, 145, 164, 160, 201, 222, 206, 8, 154, 195, 222, 241, 20, 47, 170, 134, 167, 157, 8, 39, 185, 82, 123, 39, 24, 85, 109, 127, 22, 197, 90, 122, 242, 100, 32, 132, 26, 86, 165, 14, 248, 155, 20, 205, 5, 17, 150, 203, 207, 61, 200, 179, 0, 122, 59, 74, 155, 53, 61, 196, 236, 117, 152, 159, 110, 53, 206, 125, 71, 253, 210, 160, 24, 44, 172, 199, 65, 152, 236, 18, 242, 180, 234, 66, 111, 158, 213, 215, 4, 16, 201, 82, 81, 0, 141, 242, 176, 67, 18, 29, 23, 100, 127, 187, 213, 224, 164, 108, 31, 144, 199, 175, 211, 31, 134, 74, 54, 210, 86, 95, 28, 83, 21, 187, 58, 234, 21, 242, 123, 27, 199, 104, 183, 110, 59, 81, 108, 198, 52, 51, 110, 171, 151, 111, 72, 40, 39, 72, 75, 3, 70, 109, 14, 33, 79, 126, 161, 252, 213, 154, 116, 44, 6, 201, 138, 222, 69, 75, 227, 248, 115, 63, 167, 9, 93, 57, 68, 220, 161, 14, 55, 7, 9, 96, 4, 128, 44, 3, 70, 140, 132, 241, 11, 157, 95, 170, 157, 233, 103, 78, 51, 44, 100, 172, 17, 183, 26, 148, 128, 230, 111, 50, 245, 137, 117, 173, 19, 247, 235, 5, 19, 171, 61, 147, 227, 197, 73, 96, 195, 133, 204, 114, 166, 41, 38, 166, 120, 72, 3, 44, 111, 33, 177, 45, 231, 174, 121, 142, 3] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [224, 96, 45, 148, 168, 220, 93, 94, 145, 164, 160, 201, 222, 206, 8, 154, 195, 222, 241, 20, 47, 170, 134, 167, 157, 8, 39, 185, 82, 123, 39, 24, 85, 109, 127, 22, 197, 90, 122, 242, 100, 32, 132, 26, 86, 165, 14, 248, 155, 20, 205, 5, 17, 150, 203, 207, 61, 200, 179, 0, 122, 59, 74, 155, 53, 61, 196, 236, 117, 152, 159, 110, 53, 206, 125, 71, 253, 210, 160, 24, 44, 172, 199, 65, 152, 236, 18, 242, 180, 234, 66, 111, 158, 213, 215, 4, 16, 201, 82, 81, 0, 141, 242, 176, 67, 18, 29, 23, 100, 127, 187, 213, 224, 164, 108, 31, 144, 199, 175, 211, 31, 134, 74, 54, 210, 86, 95, 28, 83, 21, 187, 58, 234, 21, 242, 123, 27, 199, 104, 183, 110, 59, 81, 108, 198, 52, 51, 110, 171, 151, 111, 72, 40, 39, 72, 75, 3, 70, 109, 14, 33, 79, 126, 161, 252, 213, 154, 116, 44, 6, 201, 138, 222, 69, 75, 227, 248, 115, 63, 167, 9, 93, 57, 68, 220, 161, 14, 55, 7, 9, 96, 4, 128, 44, 3, 70, 140, 132, 241, 11, 157, 95, 170, 157, 233, 103, 78, 51, 44, 100, 172, 17, 183, 26, 148, 128, 230, 111, 50, 245, 137, 117, 173, 19, 247, 235, 5, 19, 171, 61, 147, 227, 197, 73, 96, 195, 133, 204, 114, 166, 41, 38, 166, 120, 72, 3, 44, 111, 33, 177, 45, 231, 174, 121, 142, 3] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "75iFTp75UntccehzwbCswiXJtF8WMPcS6QdVqv1S6qDE", recipient: "75iFTp75UntccehzwbCswiXJtF8WMPcS6QdVqv1S6qDE", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "75iFTp75UntccehzwbCswiXJtF8WMPcS6QdVqv1S6qDE", recipient: "75iFTp75UntccehzwbCswiXJtF8WMPcS6QdVqv1S6qDE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998672, batch_id: 92 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "75iFTp75UntccehzwbCswiXJtF8WMPcS6QdVqv1S6qDE", recipient: "75iFTp75UntccehzwbCswiXJtF8WMPcS6QdVqv1S6qDE", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998672, batch_id: 92 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (11230450522257965004605456142472300341801903432233338872426726204051681966807, 3287386922048692269129846465139628174541852125312065471701680696706415704646), b: (QuadExtField(2820214098696002134961519832669978393052041001324338910952143434898598325833 + 1819948872245623393798589231780381852682121028039730005308526569619159890598 * u), QuadExtField(12625703804692688123488140802251037454301293667580425366414035433069878369819 + 12995871937928370703610183502767761362301276021243079241456851475552891839825 * u)), c: (14910464722710225965077249204647171646550580153819881099560530410307894903047, 4034586896733487894154622435922913424391011376867494322574049801042729143731) }
Serialized proof bytes: [215, 250, 91, 94, 255, 237, 121, 109, 157, 67, 63, 112, 250, 3, 68, 153, 72, 216, 116, 71, 244, 68, 4, 202, 104, 7, 129, 133, 177, 53, 212, 24, 70, 186, 227, 31, 20, 238, 15, 26, 122, 1, 230, 26, 246, 103, 155, 195, 197, 7, 101, 115, 156, 208, 181, 137, 156, 144, 214, 232, 85, 152, 68, 7, 73, 238, 248, 13, 212, 89, 145, 241, 173, 201, 147, 141, 96, 191, 81, 75, 196, 72, 87, 104, 4, 232, 44, 213, 26, 253, 182, 207, 66, 47, 60, 6, 166, 186, 249, 138, 39, 96, 177, 8, 108, 110, 250, 210, 214, 247, 147, 6, 183, 198, 201, 4, 13, 104, 15, 154, 244, 58, 58, 130, 247, 13, 6, 4, 27, 222, 222, 28, 178, 222, 121, 178, 17, 101, 4, 230, 233, 198, 200, 190, 236, 65, 128, 93, 220, 56, 0, 215, 66, 78, 91, 23, 38, 229, 233, 27, 81, 37, 204, 238, 189, 48, 52, 208, 199, 192, 111, 151, 225, 170, 29, 124, 240, 76, 217, 1, 8, 44, 107, 140, 101, 73, 209, 65, 33, 103, 187, 156, 7, 1, 232, 46, 138, 229, 137, 23, 159, 194, 12, 163, 88, 148, 26, 60, 245, 88, 247, 148, 73, 92, 84, 154, 206, 172, 65, 151, 34, 6, 247, 32, 179, 141, 200, 146, 58, 219, 57, 181, 64, 209, 244, 230, 104, 140, 158, 108, 222, 79, 162, 219, 236, 231, 111, 213, 194, 110, 22, 84, 201, 126, 235, 8]
Proof generated: Proof { data: [215, 250, 91, 94, 255, 237, 121, 109, 157, 67, 63, 112, 250, 3, 68, 153, 72, 216, 116, 71, 244, 68, 4, 202, 104, 7, 129, 133, 177, 53, 212, 24, 70, 186, 227, 31, 20, 238, 15, 26, 122, 1, 230, 26, 246, 103, 155, 195, 197, 7, 101, 115, 156, 208, 181, 137, 156, 144, 214, 232, 85, 152, 68, 7, 73, 238, 248, 13, 212, 89, 145, 241, 173, 201, 147, 141, 96, 191, 81, 75, 196, 72, 87, 104, 4, 232, 44, 213, 26, 253, 182, 207, 66, 47, 60, 6, 166, 186, 249, 138, 39, 96, 177, 8, 108, 110, 250, 210, 214, 247, 147, 6, 183, 198, 201, 4, 13, 104, 15, 154, 244, 58, 58, 130, 247, 13, 6, 4, 27, 222, 222, 28, 178, 222, 121, 178, 17, 101, 4, 230, 233, 198, 200, 190, 236, 65, 128, 93, 220, 56, 0, 215, 66, 78, 91, 23, 38, 229, 233, 27, 81, 37, 204, 238, 189, 48, 52, 208, 199, 192, 111, 151, 225, 170, 29, 124, 240, 76, 217, 1, 8, 44, 107, 140, 101, 73, 209, 65, 33, 103, 187, 156, 7, 1, 232, 46, 138, 229, 137, 23, 159, 194, 12, 163, 88, 148, 26, 60, 245, 88, 247, 148, 73, 92, 84, 154, 206, 172, 65, 151, 34, 6, 247, 32, 179, 141, 200, 146, 58, 219, 57, 181, 64, 209, 244, 230, 104, 140, 158, 108, 222, 79, 162, 219, 236, 231, 111, 213, 194, 110, 22, 84, 201, 126, 235, 8] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [215, 250, 91, 94, 255, 237, 121, 109, 157, 67, 63, 112, 250, 3, 68, 153, 72, 216, 116, 71, 244, 68, 4, 202, 104, 7, 129, 133, 177, 53, 212, 24, 70, 186, 227, 31, 20, 238, 15, 26, 122, 1, 230, 26, 246, 103, 155, 195, 197, 7, 101, 115, 156, 208, 181, 137, 156, 144, 214, 232, 85, 152, 68, 7, 73, 238, 248, 13, 212, 89, 145, 241, 173, 201, 147, 141, 96, 191, 81, 75, 196, 72, 87, 104, 4, 232, 44, 213, 26, 253, 182, 207, 66, 47, 60, 6, 166, 186, 249, 138, 39, 96, 177, 8, 108, 110, 250, 210, 214, 247, 147, 6, 183, 198, 201, 4, 13, 104, 15, 154, 244, 58, 58, 130, 247, 13, 6, 4, 27, 222, 222, 28, 178, 222, 121, 178, 17, 101, 4, 230, 233, 198, 200, 190, 236, 65, 128, 93, 220, 56, 0, 215, 66, 78, 91, 23, 38, 229, 233, 27, 81, 37, 204, 238, 189, 48, 52, 208, 199, 192, 111, 151, 225, 170, 29, 124, 240, 76, 217, 1, 8, 44, 107, 140, 101, 73, 209, 65, 33, 103, 187, 156, 7, 1, 232, 46, 138, 229, 137, 23, 159, 194, 12, 163, 88, 148, 26, 60, 245, 88, 247, 148, 73, 92, 84, 154, 206, 172, 65, 151, 34, 6, 247, 32, 179, 141, 200, 146, 58, 219, 57, 181, 64, 209, 244, 230, 104, 140, 158, 108, 222, 79, 162, 219, 236, 231, 111, 213, 194, 110, 22, 84, 201, 126, 235, 8] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [215, 250, 91, 94, 255, 237, 121, 109, 157, 67, 63, 112, 250, 3, 68, 153, 72, 216, 116, 71, 244, 68, 4, 202, 104, 7, 129, 133, 177, 53, 212, 24, 70, 186, 227, 31, 20, 238, 15, 26, 122, 1, 230, 26, 246, 103, 155, 195, 197, 7, 101, 115, 156, 208, 181, 137, 156, 144, 214, 232, 85, 152, 68, 7, 73, 238, 248, 13, 212, 89, 145, 241, 173, 201, 147, 141, 96, 191, 81, 75, 196, 72, 87, 104, 4, 232, 44, 213, 26, 253, 182, 207, 66, 47, 60, 6, 166, 186, 249, 138, 39, 96, 177, 8, 108, 110, 250, 210, 214, 247, 147, 6, 183, 198, 201, 4, 13, 104, 15, 154, 244, 58, 58, 130, 247, 13, 6, 4, 27, 222, 222, 28, 178, 222, 121, 178, 17, 101, 4, 230, 233, 198, 200, 190, 236, 65, 128, 93, 220, 56, 0, 215, 66, 78, 91, 23, 38, 229, 233, 27, 81, 37, 204, 238, 189, 48, 52, 208, 199, 192, 111, 151, 225, 170, 29, 124, 240, 76, 217, 1, 8, 44, 107, 140, 101, 73, 209, 65, 33, 103, 187, 156, 7, 1, 232, 46, 138, 229, 137, 23, 159, 194, 12, 163, 88, 148, 26, 60, 245, 88, 247, 148, 73, 92, 84, 154, 206, 172, 65, 151, 34, 6, 247, 32, 179, 141, 200, 146, 58, 219, 57, 181, 64, 209, 244, 230, 104, 140, 158, 108, 222, 79, 162, 219, 236, 231, 111, 213, 194, 110, 22, 84, 201, 126, 235, 8] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "9HQC3JU9kWVhnQAAg19i8rZW4WRAUPDKzLTwCiH2RkNa", recipient: "9HQC3JU9kWVhnQAAg19i8rZW4WRAUPDKzLTwCiH2RkNa", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "9HQC3JU9kWVhnQAAg19i8rZW4WRAUPDKzLTwCiH2RkNa", recipient: "9HQC3JU9kWVhnQAAg19i8rZW4WRAUPDKzLTwCiH2RkNa", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998731, batch_id: 94 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "9HQC3JU9kWVhnQAAg19i8rZW4WRAUPDKzLTwCiH2RkNa", recipient: "9HQC3JU9kWVhnQAAg19i8rZW4WRAUPDKzLTwCiH2RkNa", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998731, batch_id: 94 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (21461483220788049861368951850337429316996010507827846566729647662894986292513, 16234495804293587063614978831906317692725015451961186001027024980335667496237), b: (QuadExtField(15971011454581277016473016228425321671026095054009038567701729467142933129309 + 15093852554824124506066560009698169124125722486883204166817081475305456659743 * u), QuadExtField(17529101497578502238910473682690797027793928447256324267316544244164543272628 + 14632888384279345739759449948687714889956443701353952434211762236235589301198 * u)), c: (5730219961382029123026855147944592493800077977826455336771534639504072201984, 24217741050610532457776629098719461545630523509178402936168344633240030638) }
Serialized proof bytes: [33, 237, 95, 221, 166, 254, 146, 11, 228, 141, 142, 211, 58, 54, 146, 98, 191, 115, 52, 135, 182, 146, 236, 15, 168, 233, 122, 167, 223, 196, 114, 47, 45, 197, 0, 202, 18, 83, 91, 34, 185, 105, 209, 63, 88, 104, 62, 21, 106, 73, 197, 247, 247, 99, 100, 151, 151, 71, 236, 231, 36, 102, 228, 163, 93, 40, 13, 105, 91, 12, 56, 101, 245, 243, 231, 35, 160, 211, 150, 137, 233, 141, 109, 154, 118, 4, 138, 15, 66, 66, 72, 51, 171, 69, 79, 35, 31, 237, 153, 101, 45, 152, 222, 201, 172, 140, 7, 187, 114, 80, 78, 0, 106, 102, 151, 67, 203, 159, 97, 212, 71, 147, 215, 86, 91, 209, 94, 33, 180, 86, 254, 118, 78, 68, 136, 37, 27, 124, 250, 101, 235, 128, 164, 222, 158, 200, 230, 219, 90, 70, 93, 49, 213, 99, 142, 232, 174, 30, 193, 38, 206, 51, 231, 155, 1, 200, 82, 62, 104, 243, 144, 149, 182, 186, 224, 205, 156, 183, 26, 175, 172, 246, 202, 214, 144, 240, 16, 249, 219, 235, 89, 160, 0, 87, 73, 38, 239, 0, 75, 228, 5, 159, 171, 63, 142, 72, 13, 6, 43, 124, 15, 59, 235, 194, 153, 215, 221, 124, 104, 65, 135, 48, 171, 12, 174, 141, 253, 230, 48, 134, 158, 234, 107, 78, 107, 146, 84, 201, 148, 6, 121, 147, 131, 252, 43, 64, 231, 148, 109, 155, 203, 240, 237, 180, 13, 0]
Proof generated: Proof { data: [33, 237, 95, 221, 166, 254, 146, 11, 228, 141, 142, 211, 58, 54, 146, 98, 191, 115, 52, 135, 182, 146, 236, 15, 168, 233, 122, 167, 223, 196, 114, 47, 45, 197, 0, 202, 18, 83, 91, 34, 185, 105, 209, 63, 88, 104, 62, 21, 106, 73, 197, 247, 247, 99, 100, 151, 151, 71, 236, 231, 36, 102, 228, 163, 93, 40, 13, 105, 91, 12, 56, 101, 245, 243, 231, 35, 160, 211, 150, 137, 233, 141, 109, 154, 118, 4, 138, 15, 66, 66, 72, 51, 171, 69, 79, 35, 31, 237, 153, 101, 45, 152, 222, 201, 172, 140, 7, 187, 114, 80, 78, 0, 106, 102, 151, 67, 203, 159, 97, 212, 71, 147, 215, 86, 91, 209, 94, 33, 180, 86, 254, 118, 78, 68, 136, 37, 27, 124, 250, 101, 235, 128, 164, 222, 158, 200, 230, 219, 90, 70, 93, 49, 213, 99, 142, 232, 174, 30, 193, 38, 206, 51, 231, 155, 1, 200, 82, 62, 104, 243, 144, 149, 182, 186, 224, 205, 156, 183, 26, 175, 172, 246, 202, 214, 144, 240, 16, 249, 219, 235, 89, 160, 0, 87, 73, 38, 239, 0, 75, 228, 5, 159, 171, 63, 142, 72, 13, 6, 43, 124, 15, 59, 235, 194, 153, 215, 221, 124, 104, 65, 135, 48, 171, 12, 174, 141, 253, 230, 48, 134, 158, 234, 107, 78, 107, 146, 84, 201, 148, 6, 121, 147, 131, 252, 43, 64, 231, 148, 109, 155, 203, 240, 237, 180, 13, 0] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [33, 237, 95, 221, 166, 254, 146, 11, 228, 141, 142, 211, 58, 54, 146, 98, 191, 115, 52, 135, 182, 146, 236, 15, 168, 233, 122, 167, 223, 196, 114, 47, 45, 197, 0, 202, 18, 83, 91, 34, 185, 105, 209, 63, 88, 104, 62, 21, 106, 73, 197, 247, 247, 99, 100, 151, 151, 71, 236, 231, 36, 102, 228, 163, 93, 40, 13, 105, 91, 12, 56, 101, 245, 243, 231, 35, 160, 211, 150, 137, 233, 141, 109, 154, 118, 4, 138, 15, 66, 66, 72, 51, 171, 69, 79, 35, 31, 237, 153, 101, 45, 152, 222, 201, 172, 140, 7, 187, 114, 80, 78, 0, 106, 102, 151, 67, 203, 159, 97, 212, 71, 147, 215, 86, 91, 209, 94, 33, 180, 86, 254, 118, 78, 68, 136, 37, 27, 124, 250, 101, 235, 128, 164, 222, 158, 200, 230, 219, 90, 70, 93, 49, 213, 99, 142, 232, 174, 30, 193, 38, 206, 51, 231, 155, 1, 200, 82, 62, 104, 243, 144, 149, 182, 186, 224, 205, 156, 183, 26, 175, 172, 246, 202, 214, 144, 240, 16, 249, 219, 235, 89, 160, 0, 87, 73, 38, 239, 0, 75, 228, 5, 159, 171, 63, 142, 72, 13, 6, 43, 124, 15, 59, 235, 194, 153, 215, 221, 124, 104, 65, 135, 48, 171, 12, 174, 141, 253, 230, 48, 134, 158, 234, 107, 78, 107, 146, 84, 201, 148, 6, 121, 147, 131, 252, 43, 64, 231, 148, 109, 155, 203, 240, 237, 180, 13, 0] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [33, 237, 95, 221, 166, 254, 146, 11, 228, 141, 142, 211, 58, 54, 146, 98, 191, 115, 52, 135, 182, 146, 236, 15, 168, 233, 122, 167, 223, 196, 114, 47, 45, 197, 0, 202, 18, 83, 91, 34, 185, 105, 209, 63, 88, 104, 62, 21, 106, 73, 197, 247, 247, 99, 100, 151, 151, 71, 236, 231, 36, 102, 228, 163, 93, 40, 13, 105, 91, 12, 56, 101, 245, 243, 231, 35, 160, 211, 150, 137, 233, 141, 109, 154, 118, 4, 138, 15, 66, 66, 72, 51, 171, 69, 79, 35, 31, 237, 153, 101, 45, 152, 222, 201, 172, 140, 7, 187, 114, 80, 78, 0, 106, 102, 151, 67, 203, 159, 97, 212, 71, 147, 215, 86, 91, 209, 94, 33, 180, 86, 254, 118, 78, 68, 136, 37, 27, 124, 250, 101, 235, 128, 164, 222, 158, 200, 230, 219, 90, 70, 93, 49, 213, 99, 142, 232, 174, 30, 193, 38, 206, 51, 231, 155, 1, 200, 82, 62, 104, 243, 144, 149, 182, 186, 224, 205, 156, 183, 26, 175, 172, 246, 202, 214, 144, 240, 16, 249, 219, 235, 89, 160, 0, 87, 73, 38, 239, 0, 75, 228, 5, 159, 171, 63, 142, 72, 13, 6, 43, 124, 15, 59, 235, 194, 153, 215, 221, 124, 104, 65, 135, 48, 171, 12, 174, 141, 253, 230, 48, 134, 158, 234, 107, 78, 107, 146, 84, 201, 148, 6, 121, 147, 131, 252, 43, 64, 231, 148, 109, 155, 203, 240, 237, 180, 13, 0] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "HFKHgWrwvrMbDAfWkUzxKhx66qp81cEX98jQdzSUvWqV", recipient: "HFKHgWrwvrMbDAfWkUzxKhx66qp81cEX98jQdzSUvWqV", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "HFKHgWrwvrMbDAfWkUzxKhx66qp81cEX98jQdzSUvWqV", recipient: "HFKHgWrwvrMbDAfWkUzxKhx66qp81cEX98jQdzSUvWqV", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998961, batch_id: 96 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "HFKHgWrwvrMbDAfWkUzxKhx66qp81cEX98jQdzSUvWqV", recipient: "HFKHgWrwvrMbDAfWkUzxKhx66qp81cEX98jQdzSUvWqV", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998961, batch_id: 96 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (14652013871521037824969775319745753694753304415384654242831633502386610392709, 14150868866491964559170334161090096724771306093937537925252218127394959126023), b: (QuadExtField(6921627203720010922682561989142326457839822482333746564566428947399971470042 + 19798567114438926429401159105113879659386192108833149135496585902383401805422 * u), QuadExtField(16235636901086658230539520973224280666723290012388287734770716275297645744085 + 18933240292538378918095927419693477591261758975727403010394261814352689940453 * u)), c: (7580863005892665635195050097966102865038619286593198656724302779786587968960, 18674489492531209094704988479130545704507233181763041930943517367210770068246) }
Serialized proof bytes: [133, 78, 34, 77, 100, 75, 133, 31, 233, 32, 97, 150, 209, 92, 139, 121, 227, 104, 156, 107, 164, 29, 7, 144, 98, 31, 215, 184, 247, 190, 100, 32, 7, 238, 225, 19, 37, 155, 201, 240, 35, 27, 248, 45, 105, 32, 241, 86, 5, 110, 214, 145, 145, 27, 213, 230, 56, 59, 35, 95, 162, 27, 73, 159, 218, 122, 56, 60, 79, 199, 100, 36, 201, 73, 70, 243, 43, 224, 104, 135, 227, 101, 3, 226, 66, 75, 14, 93, 27, 60, 209, 247, 141, 128, 77, 15, 110, 38, 216, 96, 250, 90, 88, 250, 180, 120, 85, 77, 134, 127, 32, 157, 200, 79, 174, 118, 234, 149, 36, 113, 213, 125, 32, 40, 133, 151, 197, 43, 213, 207, 23, 126, 126, 132, 84, 48, 84, 246, 9, 65, 15, 7, 160, 31, 177, 177, 43, 241, 134, 89, 159, 93, 157, 119, 211, 137, 122, 11, 229, 35, 229, 199, 86, 158, 159, 103, 222, 209, 215, 167, 206, 242, 158, 23, 232, 0, 114, 3, 255, 137, 186, 158, 174, 249, 101, 24, 140, 116, 145, 213, 219, 169, 192, 149, 142, 231, 93, 164, 102, 2, 209, 160, 192, 247, 164, 170, 193, 192, 22, 195, 251, 47, 176, 83, 144, 118, 168, 47, 199, 227, 204, 157, 194, 16, 22, 115, 254, 139, 84, 250, 177, 69, 253, 99, 127, 117, 126, 225, 40, 157, 109, 227, 80, 66, 216, 234, 56, 242, 85, 67, 207, 221, 240, 98, 73, 169]
Proof generated: Proof { data: [133, 78, 34, 77, 100, 75, 133, 31, 233, 32, 97, 150, 209, 92, 139, 121, 227, 104, 156, 107, 164, 29, 7, 144, 98, 31, 215, 184, 247, 190, 100, 32, 7, 238, 225, 19, 37, 155, 201, 240, 35, 27, 248, 45, 105, 32, 241, 86, 5, 110, 214, 145, 145, 27, 213, 230, 56, 59, 35, 95, 162, 27, 73, 159, 218, 122, 56, 60, 79, 199, 100, 36, 201, 73, 70, 243, 43, 224, 104, 135, 227, 101, 3, 226, 66, 75, 14, 93, 27, 60, 209, 247, 141, 128, 77, 15, 110, 38, 216, 96, 250, 90, 88, 250, 180, 120, 85, 77, 134, 127, 32, 157, 200, 79, 174, 118, 234, 149, 36, 113, 213, 125, 32, 40, 133, 151, 197, 43, 213, 207, 23, 126, 126, 132, 84, 48, 84, 246, 9, 65, 15, 7, 160, 31, 177, 177, 43, 241, 134, 89, 159, 93, 157, 119, 211, 137, 122, 11, 229, 35, 229, 199, 86, 158, 159, 103, 222, 209, 215, 167, 206, 242, 158, 23, 232, 0, 114, 3, 255, 137, 186, 158, 174, 249, 101, 24, 140, 116, 145, 213, 219, 169, 192, 149, 142, 231, 93, 164, 102, 2, 209, 160, 192, 247, 164, 170, 193, 192, 22, 195, 251, 47, 176, 83, 144, 118, 168, 47, 199, 227, 204, 157, 194, 16, 22, 115, 254, 139, 84, 250, 177, 69, 253, 99, 127, 117, 126, 225, 40, 157, 109, 227, 80, 66, 216, 234, 56, 242, 85, 67, 207, 221, 240, 98, 73, 169] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [133, 78, 34, 77, 100, 75, 133, 31, 233, 32, 97, 150, 209, 92, 139, 121, 227, 104, 156, 107, 164, 29, 7, 144, 98, 31, 215, 184, 247, 190, 100, 32, 7, 238, 225, 19, 37, 155, 201, 240, 35, 27, 248, 45, 105, 32, 241, 86, 5, 110, 214, 145, 145, 27, 213, 230, 56, 59, 35, 95, 162, 27, 73, 159, 218, 122, 56, 60, 79, 199, 100, 36, 201, 73, 70, 243, 43, 224, 104, 135, 227, 101, 3, 226, 66, 75, 14, 93, 27, 60, 209, 247, 141, 128, 77, 15, 110, 38, 216, 96, 250, 90, 88, 250, 180, 120, 85, 77, 134, 127, 32, 157, 200, 79, 174, 118, 234, 149, 36, 113, 213, 125, 32, 40, 133, 151, 197, 43, 213, 207, 23, 126, 126, 132, 84, 48, 84, 246, 9, 65, 15, 7, 160, 31, 177, 177, 43, 241, 134, 89, 159, 93, 157, 119, 211, 137, 122, 11, 229, 35, 229, 199, 86, 158, 159, 103, 222, 209, 215, 167, 206, 242, 158, 23, 232, 0, 114, 3, 255, 137, 186, 158, 174, 249, 101, 24, 140, 116, 145, 213, 219, 169, 192, 149, 142, 231, 93, 164, 102, 2, 209, 160, 192, 247, 164, 170, 193, 192, 22, 195, 251, 47, 176, 83, 144, 118, 168, 47, 199, 227, 204, 157, 194, 16, 22, 115, 254, 139, 84, 250, 177, 69, 253, 99, 127, 117, 126, 225, 40, 157, 109, 227, 80, 66, 216, 234, 56, 242, 85, 67, 207, 221, 240, 98, 73, 169] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [133, 78, 34, 77, 100, 75, 133, 31, 233, 32, 97, 150, 209, 92, 139, 121, 227, 104, 156, 107, 164, 29, 7, 144, 98, 31, 215, 184, 247, 190, 100, 32, 7, 238, 225, 19, 37, 155, 201, 240, 35, 27, 248, 45, 105, 32, 241, 86, 5, 110, 214, 145, 145, 27, 213, 230, 56, 59, 35, 95, 162, 27, 73, 159, 218, 122, 56, 60, 79, 199, 100, 36, 201, 73, 70, 243, 43, 224, 104, 135, 227, 101, 3, 226, 66, 75, 14, 93, 27, 60, 209, 247, 141, 128, 77, 15, 110, 38, 216, 96, 250, 90, 88, 250, 180, 120, 85, 77, 134, 127, 32, 157, 200, 79, 174, 118, 234, 149, 36, 113, 213, 125, 32, 40, 133, 151, 197, 43, 213, 207, 23, 126, 126, 132, 84, 48, 84, 246, 9, 65, 15, 7, 160, 31, 177, 177, 43, 241, 134, 89, 159, 93, 157, 119, 211, 137, 122, 11, 229, 35, 229, 199, 86, 158, 159, 103, 222, 209, 215, 167, 206, 242, 158, 23, 232, 0, 114, 3, 255, 137, 186, 158, 174, 249, 101, 24, 140, 116, 145, 213, 219, 169, 192, 149, 142, 231, 93, 164, 102, 2, 209, 160, 192, 247, 164, 170, 193, 192, 22, 195, 251, 47, 176, 83, 144, 118, 168, 47, 199, 227, 204, 157, 194, 16, 22, 115, 254, 139, 84, 250, 177, 69, 253, 99, 127, 117, 126, 225, 40, 157, 109, 227, 80, 66, 216, 234, 56, 242, 85, 67, 207, 221, 240, 98, 73, 169] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "DJB5BWWyjibVMJJQSjyhfL4221TbVfJe3T1soTtJuP5g", recipient: "DJB5BWWyjibVMJJQSjyhfL4221TbVfJe3T1soTtJuP5g", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "DJB5BWWyjibVMJJQSjyhfL4221TbVfJe3T1soTtJuP5g", recipient: "DJB5BWWyjibVMJJQSjyhfL4221TbVfJe3T1soTtJuP5g", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998985, batch_id: 98 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "DJB5BWWyjibVMJJQSjyhfL4221TbVfJe3T1soTtJuP5g", recipient: "DJB5BWWyjibVMJJQSjyhfL4221TbVfJe3T1soTtJuP5g", amount: 0, nonce: 1 }], programs: [], timestamp: 1728998985, batch_id: 98 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (5978011951174321516520693077584779529696025463860035670174084007638523813091, 7084436913906189976529323553066454345029237033452935940844527888791828744948), b: (QuadExtField(104972206416344997591254117208256889433793284013806014443837546595461834391 + 10994969781732305456897370021057999105442419943425852534423511825492814227225 * u), QuadExtField(9889545446651832880623859028307445960427994252753165991817938333693556266239 + 20421016903457215112333840670930010716890773861912492754870989839005933117199 * u)), c: (16447334361666904302841427989831438537526468979804661458572463334569939665094, 14702729128807550624188060589336285821113581201251333072745121025304255354193) }
Serialized proof bytes: [227, 156, 89, 28, 53, 108, 103, 78, 209, 89, 25, 63, 101, 211, 189, 235, 131, 200, 178, 78, 39, 108, 98, 100, 161, 101, 86, 251, 82, 111, 55, 13, 244, 202, 12, 102, 29, 225, 23, 165, 140, 255, 83, 255, 113, 153, 194, 117, 122, 218, 157, 164, 147, 65, 231, 131, 206, 197, 142, 192, 49, 166, 169, 15, 151, 38, 35, 110, 143, 79, 90, 76, 62, 203, 222, 50, 137, 132, 7, 161, 192, 34, 75, 68, 180, 227, 71, 41, 212, 194, 114, 137, 131, 105, 59, 0, 25, 103, 42, 162, 131, 131, 180, 113, 225, 221, 247, 44, 184, 21, 193, 65, 19, 16, 238, 88, 203, 151, 254, 107, 241, 91, 5, 105, 175, 238, 78, 24, 255, 148, 183, 5, 66, 65, 23, 119, 185, 44, 225, 18, 95, 73, 242, 196, 171, 98, 1, 66, 62, 127, 16, 221, 116, 236, 115, 251, 203, 72, 221, 21, 15, 31, 144, 154, 0, 44, 1, 60, 188, 5, 231, 142, 252, 173, 18, 13, 74, 55, 58, 101, 60, 30, 191, 208, 79, 127, 21, 4, 207, 226, 37, 173, 198, 128, 25, 136, 20, 25, 63, 147, 209, 167, 232, 146, 82, 171, 77, 177, 80, 141, 167, 251, 153, 89, 67, 218, 108, 255, 94, 196, 129, 220, 92, 36, 81, 85, 253, 96, 88, 178, 188, 48, 231, 204, 142, 121, 112, 147, 233, 11, 175, 5, 103, 251, 177, 83, 56, 173, 40, 230, 37, 42, 37, 115, 129, 160]
Proof generated: Proof { data: [227, 156, 89, 28, 53, 108, 103, 78, 209, 89, 25, 63, 101, 211, 189, 235, 131, 200, 178, 78, 39, 108, 98, 100, 161, 101, 86, 251, 82, 111, 55, 13, 244, 202, 12, 102, 29, 225, 23, 165, 140, 255, 83, 255, 113, 153, 194, 117, 122, 218, 157, 164, 147, 65, 231, 131, 206, 197, 142, 192, 49, 166, 169, 15, 151, 38, 35, 110, 143, 79, 90, 76, 62, 203, 222, 50, 137, 132, 7, 161, 192, 34, 75, 68, 180, 227, 71, 41, 212, 194, 114, 137, 131, 105, 59, 0, 25, 103, 42, 162, 131, 131, 180, 113, 225, 221, 247, 44, 184, 21, 193, 65, 19, 16, 238, 88, 203, 151, 254, 107, 241, 91, 5, 105, 175, 238, 78, 24, 255, 148, 183, 5, 66, 65, 23, 119, 185, 44, 225, 18, 95, 73, 242, 196, 171, 98, 1, 66, 62, 127, 16, 221, 116, 236, 115, 251, 203, 72, 221, 21, 15, 31, 144, 154, 0, 44, 1, 60, 188, 5, 231, 142, 252, 173, 18, 13, 74, 55, 58, 101, 60, 30, 191, 208, 79, 127, 21, 4, 207, 226, 37, 173, 198, 128, 25, 136, 20, 25, 63, 147, 209, 167, 232, 146, 82, 171, 77, 177, 80, 141, 167, 251, 153, 89, 67, 218, 108, 255, 94, 196, 129, 220, 92, 36, 81, 85, 253, 96, 88, 178, 188, 48, 231, 204, 142, 121, 112, 147, 233, 11, 175, 5, 103, 251, 177, 83, 56, 173, 40, 230, 37, 42, 37, 115, 129, 160] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [227, 156, 89, 28, 53, 108, 103, 78, 209, 89, 25, 63, 101, 211, 189, 235, 131, 200, 178, 78, 39, 108, 98, 100, 161, 101, 86, 251, 82, 111, 55, 13, 244, 202, 12, 102, 29, 225, 23, 165, 140, 255, 83, 255, 113, 153, 194, 117, 122, 218, 157, 164, 147, 65, 231, 131, 206, 197, 142, 192, 49, 166, 169, 15, 151, 38, 35, 110, 143, 79, 90, 76, 62, 203, 222, 50, 137, 132, 7, 161, 192, 34, 75, 68, 180, 227, 71, 41, 212, 194, 114, 137, 131, 105, 59, 0, 25, 103, 42, 162, 131, 131, 180, 113, 225, 221, 247, 44, 184, 21, 193, 65, 19, 16, 238, 88, 203, 151, 254, 107, 241, 91, 5, 105, 175, 238, 78, 24, 255, 148, 183, 5, 66, 65, 23, 119, 185, 44, 225, 18, 95, 73, 242, 196, 171, 98, 1, 66, 62, 127, 16, 221, 116, 236, 115, 251, 203, 72, 221, 21, 15, 31, 144, 154, 0, 44, 1, 60, 188, 5, 231, 142, 252, 173, 18, 13, 74, 55, 58, 101, 60, 30, 191, 208, 79, 127, 21, 4, 207, 226, 37, 173, 198, 128, 25, 136, 20, 25, 63, 147, 209, 167, 232, 146, 82, 171, 77, 177, 80, 141, 167, 251, 153, 89, 67, 218, 108, 255, 94, 196, 129, 220, 92, 36, 81, 85, 253, 96, 88, 178, 188, 48, 231, 204, 142, 121, 112, 147, 233, 11, 175, 5, 103, 251, 177, 83, 56, 173, 40, 230, 37, 42, 37, 115, 129, 160] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [227, 156, 89, 28, 53, 108, 103, 78, 209, 89, 25, 63, 101, 211, 189, 235, 131, 200, 178, 78, 39, 108, 98, 100, 161, 101, 86, 251, 82, 111, 55, 13, 244, 202, 12, 102, 29, 225, 23, 165, 140, 255, 83, 255, 113, 153, 194, 117, 122, 218, 157, 164, 147, 65, 231, 131, 206, 197, 142, 192, 49, 166, 169, 15, 151, 38, 35, 110, 143, 79, 90, 76, 62, 203, 222, 50, 137, 132, 7, 161, 192, 34, 75, 68, 180, 227, 71, 41, 212, 194, 114, 137, 131, 105, 59, 0, 25, 103, 42, 162, 131, 131, 180, 113, 225, 221, 247, 44, 184, 21, 193, 65, 19, 16, 238, 88, 203, 151, 254, 107, 241, 91, 5, 105, 175, 238, 78, 24, 255, 148, 183, 5, 66, 65, 23, 119, 185, 44, 225, 18, 95, 73, 242, 196, 171, 98, 1, 66, 62, 127, 16, 221, 116, 236, 115, 251, 203, 72, 221, 21, 15, 31, 144, 154, 0, 44, 1, 60, 188, 5, 231, 142, 252, 173, 18, 13, 74, 55, 58, 101, 60, 30, 191, 208, 79, 127, 21, 4, 207, 226, 37, 173, 198, 128, 25, 136, 20, 25, 63, 147, 209, 167, 232, 146, 82, 171, 77, 177, 80, 141, 167, 251, 153, 89, 67, 218, 108, 255, 94, 196, 129, 220, 92, 36, 81, 85, 253, 96, 88, 178, 188, 48, 231, 204, 142, 121, 112, 147, 233, 11, 175, 5, 103, 251, 177, 83, 56, 173, 40, 230, 37, 42, 37, 115, 129, 160] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "A3DT5aZpR1rau39Tqiecmww8qqyLhhn3XgeSsZ8Y71JK", recipient: "A3DT5aZpR1rau39Tqiecmww8qqyLhhn3XgeSsZ8Y71JK", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "A3DT5aZpR1rau39Tqiecmww8qqyLhhn3XgeSsZ8Y71JK", recipient: "A3DT5aZpR1rau39Tqiecmww8qqyLhhn3XgeSsZ8Y71JK", amount: 0, nonce: 1 }], programs: [], timestamp: 1728999163, batch_id: 100 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "A3DT5aZpR1rau39Tqiecmww8qqyLhhn3XgeSsZ8Y71JK", recipient: "A3DT5aZpR1rau39Tqiecmww8qqyLhhn3XgeSsZ8Y71JK", amount: 0, nonce: 1 }], programs: [], timestamp: 1728999163, batch_id: 100 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (10951600959876205969882393027647828016410962443179298831772939463244420350048, 5606078333793903637552199530892009952632675065797185807870350216718904707562), b: (QuadExtField(6498415099946054144356207827777709484259518602555183299798556676897853188856 + 17516408418097149431840637317281275773667237655523163133407759992059374880984 * u), QuadExtField(13969756341296384035650935731651198501780680031292071258009493375950225947971 + 12174975099599952816569251051288624428788062149961391389956594059746586581947 * u)), c: (6293254090765227036924825029906843012628355351040423298459044385060953363088, 14092499293530183967930547227538449589352368151541894561715294932791793768761) }
Serialized proof bytes: [96, 0, 38, 184, 174, 174, 4, 223, 142, 177, 189, 188, 17, 125, 219, 160, 114, 246, 153, 243, 33, 169, 169, 159, 105, 85, 8, 103, 240, 98, 54, 24, 234, 201, 239, 157, 59, 146, 35, 198, 138, 85, 207, 85, 144, 18, 124, 25, 57, 145, 211, 153, 181, 228, 62, 169, 142, 131, 147, 94, 138, 237, 100, 12, 248, 170, 204, 204, 254, 236, 9, 131, 139, 147, 26, 148, 248, 221, 196, 139, 61, 111, 220, 90, 71, 87, 179, 20, 79, 47, 155, 149, 252, 248, 93, 14, 216, 72, 68, 95, 179, 109, 66, 221, 22, 220, 124, 142, 49, 21, 205, 36, 238, 157, 90, 85, 180, 108, 161, 60, 103, 79, 112, 108, 146, 239, 185, 38, 67, 61, 180, 84, 25, 67, 177, 223, 97, 13, 154, 43, 74, 241, 192, 76, 67, 105, 122, 118, 181, 159, 210, 196, 93, 144, 137, 114, 21, 154, 226, 30, 187, 219, 54, 156, 88, 191, 57, 207, 85, 120, 27, 219, 226, 239, 0, 164, 135, 57, 255, 237, 117, 245, 233, 70, 46, 164, 48, 61, 173, 202, 234, 154, 144, 146, 1, 157, 225, 242, 88, 248, 228, 181, 220, 207, 114, 243, 133, 250, 123, 70, 1, 95, 179, 237, 69, 175, 154, 37, 36, 208, 7, 219, 233, 13, 57, 89, 103, 102, 203, 158, 80, 86, 2, 212, 110, 207, 149, 112, 3, 152, 227, 196, 106, 49, 91, 47, 42, 105, 25, 184, 201, 148, 106, 18, 40, 159]
Proof generated: Proof { data: [96, 0, 38, 184, 174, 174, 4, 223, 142, 177, 189, 188, 17, 125, 219, 160, 114, 246, 153, 243, 33, 169, 169, 159, 105, 85, 8, 103, 240, 98, 54, 24, 234, 201, 239, 157, 59, 146, 35, 198, 138, 85, 207, 85, 144, 18, 124, 25, 57, 145, 211, 153, 181, 228, 62, 169, 142, 131, 147, 94, 138, 237, 100, 12, 248, 170, 204, 204, 254, 236, 9, 131, 139, 147, 26, 148, 248, 221, 196, 139, 61, 111, 220, 90, 71, 87, 179, 20, 79, 47, 155, 149, 252, 248, 93, 14, 216, 72, 68, 95, 179, 109, 66, 221, 22, 220, 124, 142, 49, 21, 205, 36, 238, 157, 90, 85, 180, 108, 161, 60, 103, 79, 112, 108, 146, 239, 185, 38, 67, 61, 180, 84, 25, 67, 177, 223, 97, 13, 154, 43, 74, 241, 192, 76, 67, 105, 122, 118, 181, 159, 210, 196, 93, 144, 137, 114, 21, 154, 226, 30, 187, 219, 54, 156, 88, 191, 57, 207, 85, 120, 27, 219, 226, 239, 0, 164, 135, 57, 255, 237, 117, 245, 233, 70, 46, 164, 48, 61, 173, 202, 234, 154, 144, 146, 1, 157, 225, 242, 88, 248, 228, 181, 220, 207, 114, 243, 133, 250, 123, 70, 1, 95, 179, 237, 69, 175, 154, 37, 36, 208, 7, 219, 233, 13, 57, 89, 103, 102, 203, 158, 80, 86, 2, 212, 110, 207, 149, 112, 3, 152, 227, 196, 106, 49, 91, 47, 42, 105, 25, 184, 201, 148, 106, 18, 40, 159] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [96, 0, 38, 184, 174, 174, 4, 223, 142, 177, 189, 188, 17, 125, 219, 160, 114, 246, 153, 243, 33, 169, 169, 159, 105, 85, 8, 103, 240, 98, 54, 24, 234, 201, 239, 157, 59, 146, 35, 198, 138, 85, 207, 85, 144, 18, 124, 25, 57, 145, 211, 153, 181, 228, 62, 169, 142, 131, 147, 94, 138, 237, 100, 12, 248, 170, 204, 204, 254, 236, 9, 131, 139, 147, 26, 148, 248, 221, 196, 139, 61, 111, 220, 90, 71, 87, 179, 20, 79, 47, 155, 149, 252, 248, 93, 14, 216, 72, 68, 95, 179, 109, 66, 221, 22, 220, 124, 142, 49, 21, 205, 36, 238, 157, 90, 85, 180, 108, 161, 60, 103, 79, 112, 108, 146, 239, 185, 38, 67, 61, 180, 84, 25, 67, 177, 223, 97, 13, 154, 43, 74, 241, 192, 76, 67, 105, 122, 118, 181, 159, 210, 196, 93, 144, 137, 114, 21, 154, 226, 30, 187, 219, 54, 156, 88, 191, 57, 207, 85, 120, 27, 219, 226, 239, 0, 164, 135, 57, 255, 237, 117, 245, 233, 70, 46, 164, 48, 61, 173, 202, 234, 154, 144, 146, 1, 157, 225, 242, 88, 248, 228, 181, 220, 207, 114, 243, 133, 250, 123, 70, 1, 95, 179, 237, 69, 175, 154, 37, 36, 208, 7, 219, 233, 13, 57, 89, 103, 102, 203, 158, 80, 86, 2, 212, 110, 207, 149, 112, 3, 152, 227, 196, 106, 49, 91, 47, 42, 105, 25, 184, 201, 148, 106, 18, 40, 159] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [96, 0, 38, 184, 174, 174, 4, 223, 142, 177, 189, 188, 17, 125, 219, 160, 114, 246, 153, 243, 33, 169, 169, 159, 105, 85, 8, 103, 240, 98, 54, 24, 234, 201, 239, 157, 59, 146, 35, 198, 138, 85, 207, 85, 144, 18, 124, 25, 57, 145, 211, 153, 181, 228, 62, 169, 142, 131, 147, 94, 138, 237, 100, 12, 248, 170, 204, 204, 254, 236, 9, 131, 139, 147, 26, 148, 248, 221, 196, 139, 61, 111, 220, 90, 71, 87, 179, 20, 79, 47, 155, 149, 252, 248, 93, 14, 216, 72, 68, 95, 179, 109, 66, 221, 22, 220, 124, 142, 49, 21, 205, 36, 238, 157, 90, 85, 180, 108, 161, 60, 103, 79, 112, 108, 146, 239, 185, 38, 67, 61, 180, 84, 25, 67, 177, 223, 97, 13, 154, 43, 74, 241, 192, 76, 67, 105, 122, 118, 181, 159, 210, 196, 93, 144, 137, 114, 21, 154, 226, 30, 187, 219, 54, 156, 88, 191, 57, 207, 85, 120, 27, 219, 226, 239, 0, 164, 135, 57, 255, 237, 117, 245, 233, 70, 46, 164, 48, 61, 173, 202, 234, 154, 144, 146, 1, 157, 225, 242, 88, 248, 228, 181, 220, 207, 114, 243, 133, 250, 123, 70, 1, 95, 179, 237, 69, 175, 154, 37, 36, 208, 7, 219, 233, 13, 57, 89, 103, 102, 203, 158, 80, 86, 2, 212, 110, 207, 149, 112, 3, 152, 227, 196, 106, 49, 91, 47, 42, 105, 25, 184, 201, 148, 106, 18, 40, 159] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "7kHpvisuRfN64ELndmwoy1k2La8ko5pL2FJuMtxV5TJw", recipient: "7kHpvisuRfN64ELndmwoy1k2La8ko5pL2FJuMtxV5TJw", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "7kHpvisuRfN64ELndmwoy1k2La8ko5pL2FJuMtxV5TJw", recipient: "7kHpvisuRfN64ELndmwoy1k2La8ko5pL2FJuMtxV5TJw", amount: 0, nonce: 1 }], programs: [], timestamp: 1728999550, batch_id: 102 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "7kHpvisuRfN64ELndmwoy1k2La8ko5pL2FJuMtxV5TJw", recipient: "7kHpvisuRfN64ELndmwoy1k2La8ko5pL2FJuMtxV5TJw", amount: 0, nonce: 1 }], programs: [], timestamp: 1728999550, batch_id: 102 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (4210240614708172096877738738891280160255004265480570906318067354475506688232, 4749667204163932399122353554811874951105702547950394778916883556510357266828), b: (QuadExtField(10535697046812312242050188525157375571517832952494510512937854782822207960542 + 20257559609745408088798647044544357152225067469142071549680503616377244667643 * u), QuadExtField(1637830453581483889075367610178405915299166785376566357480737207060604207600 + 16916610135429614147676954769262079748957097624439646641983742163017137078052 * u)), c: (9522192993686804417549269044565004171208280716731160998943290400198787038147, 8225587551610932403348036332032632292143460373000637341511160096460544011674) }
Serialized proof bytes: [232, 224, 19, 109, 217, 107, 55, 178, 138, 48, 177, 137, 191, 21, 12, 238, 230, 133, 124, 220, 167, 102, 94, 240, 246, 43, 233, 214, 103, 233, 78, 9, 140, 33, 228, 0, 226, 255, 109, 45, 215, 124, 108, 209, 143, 5, 33, 205, 131, 52, 126, 208, 163, 78, 109, 238, 149, 192, 243, 18, 100, 55, 128, 10, 222, 181, 211, 8, 28, 173, 155, 118, 199, 213, 53, 85, 33, 100, 97, 106, 111, 28, 66, 224, 242, 76, 0, 50, 35, 201, 206, 224, 66, 254, 74, 23, 251, 206, 124, 234, 125, 241, 77, 122, 160, 152, 91, 85, 98, 70, 204, 43, 149, 34, 25, 119, 197, 193, 67, 77, 53, 222, 26, 6, 87, 95, 201, 44, 240, 65, 217, 179, 132, 229, 190, 154, 13, 59, 198, 119, 137, 128, 105, 35, 179, 2, 76, 193, 231, 229, 73, 154, 197, 45, 13, 236, 171, 250, 158, 3, 36, 63, 127, 71, 75, 68, 27, 226, 89, 118, 31, 210, 182, 89, 197, 80, 170, 177, 56, 119, 147, 102, 104, 14, 162, 40, 148, 161, 71, 118, 102, 165, 195, 123, 131, 200, 162, 27, 80, 137, 171, 17, 246, 195, 222, 72, 63, 233, 59, 52, 114, 216, 52, 163, 151, 239, 152, 154, 192, 51, 200, 94, 13, 21, 154, 237, 65, 125, 143, 123, 203, 183, 138, 229, 120, 89, 221, 59, 8, 51, 241, 16, 44, 216, 159, 104, 141, 52, 123, 5, 0, 101, 127, 132, 47, 18]
Proof generated: Proof { data: [232, 224, 19, 109, 217, 107, 55, 178, 138, 48, 177, 137, 191, 21, 12, 238, 230, 133, 124, 220, 167, 102, 94, 240, 246, 43, 233, 214, 103, 233, 78, 9, 140, 33, 228, 0, 226, 255, 109, 45, 215, 124, 108, 209, 143, 5, 33, 205, 131, 52, 126, 208, 163, 78, 109, 238, 149, 192, 243, 18, 100, 55, 128, 10, 222, 181, 211, 8, 28, 173, 155, 118, 199, 213, 53, 85, 33, 100, 97, 106, 111, 28, 66, 224, 242, 76, 0, 50, 35, 201, 206, 224, 66, 254, 74, 23, 251, 206, 124, 234, 125, 241, 77, 122, 160, 152, 91, 85, 98, 70, 204, 43, 149, 34, 25, 119, 197, 193, 67, 77, 53, 222, 26, 6, 87, 95, 201, 44, 240, 65, 217, 179, 132, 229, 190, 154, 13, 59, 198, 119, 137, 128, 105, 35, 179, 2, 76, 193, 231, 229, 73, 154, 197, 45, 13, 236, 171, 250, 158, 3, 36, 63, 127, 71, 75, 68, 27, 226, 89, 118, 31, 210, 182, 89, 197, 80, 170, 177, 56, 119, 147, 102, 104, 14, 162, 40, 148, 161, 71, 118, 102, 165, 195, 123, 131, 200, 162, 27, 80, 137, 171, 17, 246, 195, 222, 72, 63, 233, 59, 52, 114, 216, 52, 163, 151, 239, 152, 154, 192, 51, 200, 94, 13, 21, 154, 237, 65, 125, 143, 123, 203, 183, 138, 229, 120, 89, 221, 59, 8, 51, 241, 16, 44, 216, 159, 104, 141, 52, 123, 5, 0, 101, 127, 132, 47, 18] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [232, 224, 19, 109, 217, 107, 55, 178, 138, 48, 177, 137, 191, 21, 12, 238, 230, 133, 124, 220, 167, 102, 94, 240, 246, 43, 233, 214, 103, 233, 78, 9, 140, 33, 228, 0, 226, 255, 109, 45, 215, 124, 108, 209, 143, 5, 33, 205, 131, 52, 126, 208, 163, 78, 109, 238, 149, 192, 243, 18, 100, 55, 128, 10, 222, 181, 211, 8, 28, 173, 155, 118, 199, 213, 53, 85, 33, 100, 97, 106, 111, 28, 66, 224, 242, 76, 0, 50, 35, 201, 206, 224, 66, 254, 74, 23, 251, 206, 124, 234, 125, 241, 77, 122, 160, 152, 91, 85, 98, 70, 204, 43, 149, 34, 25, 119, 197, 193, 67, 77, 53, 222, 26, 6, 87, 95, 201, 44, 240, 65, 217, 179, 132, 229, 190, 154, 13, 59, 198, 119, 137, 128, 105, 35, 179, 2, 76, 193, 231, 229, 73, 154, 197, 45, 13, 236, 171, 250, 158, 3, 36, 63, 127, 71, 75, 68, 27, 226, 89, 118, 31, 210, 182, 89, 197, 80, 170, 177, 56, 119, 147, 102, 104, 14, 162, 40, 148, 161, 71, 118, 102, 165, 195, 123, 131, 200, 162, 27, 80, 137, 171, 17, 246, 195, 222, 72, 63, 233, 59, 52, 114, 216, 52, 163, 151, 239, 152, 154, 192, 51, 200, 94, 13, 21, 154, 237, 65, 125, 143, 123, 203, 183, 138, 229, 120, 89, 221, 59, 8, 51, 241, 16, 44, 216, 159, 104, 141, 52, 123, 5, 0, 101, 127, 132, 47, 18] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [232, 224, 19, 109, 217, 107, 55, 178, 138, 48, 177, 137, 191, 21, 12, 238, 230, 133, 124, 220, 167, 102, 94, 240, 246, 43, 233, 214, 103, 233, 78, 9, 140, 33, 228, 0, 226, 255, 109, 45, 215, 124, 108, 209, 143, 5, 33, 205, 131, 52, 126, 208, 163, 78, 109, 238, 149, 192, 243, 18, 100, 55, 128, 10, 222, 181, 211, 8, 28, 173, 155, 118, 199, 213, 53, 85, 33, 100, 97, 106, 111, 28, 66, 224, 242, 76, 0, 50, 35, 201, 206, 224, 66, 254, 74, 23, 251, 206, 124, 234, 125, 241, 77, 122, 160, 152, 91, 85, 98, 70, 204, 43, 149, 34, 25, 119, 197, 193, 67, 77, 53, 222, 26, 6, 87, 95, 201, 44, 240, 65, 217, 179, 132, 229, 190, 154, 13, 59, 198, 119, 137, 128, 105, 35, 179, 2, 76, 193, 231, 229, 73, 154, 197, 45, 13, 236, 171, 250, 158, 3, 36, 63, 127, 71, 75, 68, 27, 226, 89, 118, 31, 210, 182, 89, 197, 80, 170, 177, 56, 119, 147, 102, 104, 14, 162, 40, 148, 161, 71, 118, 102, 165, 195, 123, 131, 200, 162, 27, 80, 137, 171, 17, 246, 195, 222, 72, 63, 233, 59, 52, 114, 216, 52, 163, 151, 239, 152, 154, 192, 51, 200, 94, 13, 21, 154, 237, 65, 125, 143, 123, 203, 183, 138, 229, 120, 89, 221, 59, 8, 51, 241, 16, 44, 216, 159, 104, 141, 52, 123, 5, 0, 101, 127, 132, 47, 18] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "YBDAtp83Sjjby3Ta7mzHExWX7LvuN8LsvK2rq4eyHv5", recipient: "YBDAtp83Sjjby3Ta7mzHExWX7LvuN8LsvK2rq4eyHv5", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "YBDAtp83Sjjby3Ta7mzHExWX7LvuN8LsvK2rq4eyHv5", recipient: "YBDAtp83Sjjby3Ta7mzHExWX7LvuN8LsvK2rq4eyHv5", amount: 0, nonce: 1 }], programs: [], timestamp: 1729000079, batch_id: 104 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "YBDAtp83Sjjby3Ta7mzHExWX7LvuN8LsvK2rq4eyHv5", recipient: "YBDAtp83Sjjby3Ta7mzHExWX7LvuN8LsvK2rq4eyHv5", amount: 0, nonce: 1 }], programs: [], timestamp: 1729000079, batch_id: 104 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (8733938903179107041205051494350819338184793669999241632700733050998913251724, 2493463404658874420803536915139127819491458064684571880720435264072182979928), b: (QuadExtField(4333931183685630922986639264194480939707072482293958544162051091929882386878 + 15564795654294368924456076642424086419046809992406220243976572542921519685199 * u), QuadExtField(456267207620776173305831618839261314614099497774866711236577754166474487136 + 11101206692416655518984233463690410899783468141708858649633408981760363960945 * u)), c: (17835891542601519494694449689742869754449383859858541735768618529899501167602, 9322555831005682528975016472570826933473039836183160079935963338166113120269) }
Serialized proof bytes: [140, 57, 232, 97, 192, 178, 212, 218, 40, 250, 38, 201, 138, 66, 139, 10, 205, 209, 16, 41, 167, 7, 160, 171, 154, 216, 118, 254, 246, 59, 79, 19, 88, 221, 52, 32, 56, 110, 201, 3, 94, 48, 247, 6, 92, 245, 161, 53, 81, 216, 169, 71, 47, 122, 108, 250, 97, 223, 130, 248, 17, 64, 131, 5, 190, 97, 207, 114, 130, 235, 126, 0, 55, 142, 111, 150, 121, 30, 236, 1, 178, 167, 26, 21, 2, 94, 36, 105, 84, 218, 37, 8, 10, 235, 148, 9, 79, 94, 248, 186, 1, 112, 129, 204, 39, 56, 100, 90, 66, 195, 31, 241, 13, 224, 65, 89, 1, 133, 233, 58, 81, 136, 66, 192, 181, 92, 105, 34, 96, 181, 198, 100, 138, 32, 153, 216, 47, 43, 83, 173, 168, 126, 103, 79, 67, 223, 47, 66, 141, 70, 36, 200, 42, 185, 33, 84, 243, 60, 2, 1, 113, 154, 255, 69, 53, 238, 100, 46, 47, 206, 253, 126, 62, 189, 92, 244, 186, 110, 122, 124, 121, 107, 138, 80, 241, 63, 134, 111, 113, 15, 139, 152, 242, 163, 25, 133, 20, 83, 172, 217, 31, 206, 253, 252, 13, 218, 62, 45, 63, 216, 125, 239, 40, 90, 175, 24, 57, 6, 204, 32, 194, 193, 110, 39, 13, 176, 91, 207, 202, 253, 54, 220, 239, 27, 98, 35, 117, 81, 115, 92, 235, 28, 125, 146, 74, 163, 239, 242, 109, 71, 241, 72, 46, 97, 156, 20]
Proof generated: Proof { data: [140, 57, 232, 97, 192, 178, 212, 218, 40, 250, 38, 201, 138, 66, 139, 10, 205, 209, 16, 41, 167, 7, 160, 171, 154, 216, 118, 254, 246, 59, 79, 19, 88, 221, 52, 32, 56, 110, 201, 3, 94, 48, 247, 6, 92, 245, 161, 53, 81, 216, 169, 71, 47, 122, 108, 250, 97, 223, 130, 248, 17, 64, 131, 5, 190, 97, 207, 114, 130, 235, 126, 0, 55, 142, 111, 150, 121, 30, 236, 1, 178, 167, 26, 21, 2, 94, 36, 105, 84, 218, 37, 8, 10, 235, 148, 9, 79, 94, 248, 186, 1, 112, 129, 204, 39, 56, 100, 90, 66, 195, 31, 241, 13, 224, 65, 89, 1, 133, 233, 58, 81, 136, 66, 192, 181, 92, 105, 34, 96, 181, 198, 100, 138, 32, 153, 216, 47, 43, 83, 173, 168, 126, 103, 79, 67, 223, 47, 66, 141, 70, 36, 200, 42, 185, 33, 84, 243, 60, 2, 1, 113, 154, 255, 69, 53, 238, 100, 46, 47, 206, 253, 126, 62, 189, 92, 244, 186, 110, 122, 124, 121, 107, 138, 80, 241, 63, 134, 111, 113, 15, 139, 152, 242, 163, 25, 133, 20, 83, 172, 217, 31, 206, 253, 252, 13, 218, 62, 45, 63, 216, 125, 239, 40, 90, 175, 24, 57, 6, 204, 32, 194, 193, 110, 39, 13, 176, 91, 207, 202, 253, 54, 220, 239, 27, 98, 35, 117, 81, 115, 92, 235, 28, 125, 146, 74, 163, 239, 242, 109, 71, 241, 72, 46, 97, 156, 20] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [140, 57, 232, 97, 192, 178, 212, 218, 40, 250, 38, 201, 138, 66, 139, 10, 205, 209, 16, 41, 167, 7, 160, 171, 154, 216, 118, 254, 246, 59, 79, 19, 88, 221, 52, 32, 56, 110, 201, 3, 94, 48, 247, 6, 92, 245, 161, 53, 81, 216, 169, 71, 47, 122, 108, 250, 97, 223, 130, 248, 17, 64, 131, 5, 190, 97, 207, 114, 130, 235, 126, 0, 55, 142, 111, 150, 121, 30, 236, 1, 178, 167, 26, 21, 2, 94, 36, 105, 84, 218, 37, 8, 10, 235, 148, 9, 79, 94, 248, 186, 1, 112, 129, 204, 39, 56, 100, 90, 66, 195, 31, 241, 13, 224, 65, 89, 1, 133, 233, 58, 81, 136, 66, 192, 181, 92, 105, 34, 96, 181, 198, 100, 138, 32, 153, 216, 47, 43, 83, 173, 168, 126, 103, 79, 67, 223, 47, 66, 141, 70, 36, 200, 42, 185, 33, 84, 243, 60, 2, 1, 113, 154, 255, 69, 53, 238, 100, 46, 47, 206, 253, 126, 62, 189, 92, 244, 186, 110, 122, 124, 121, 107, 138, 80, 241, 63, 134, 111, 113, 15, 139, 152, 242, 163, 25, 133, 20, 83, 172, 217, 31, 206, 253, 252, 13, 218, 62, 45, 63, 216, 125, 239, 40, 90, 175, 24, 57, 6, 204, 32, 194, 193, 110, 39, 13, 176, 91, 207, 202, 253, 54, 220, 239, 27, 98, 35, 117, 81, 115, 92, 235, 28, 125, 146, 74, 163, 239, 242, 109, 71, 241, 72, 46, 97, 156, 20] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [140, 57, 232, 97, 192, 178, 212, 218, 40, 250, 38, 201, 138, 66, 139, 10, 205, 209, 16, 41, 167, 7, 160, 171, 154, 216, 118, 254, 246, 59, 79, 19, 88, 221, 52, 32, 56, 110, 201, 3, 94, 48, 247, 6, 92, 245, 161, 53, 81, 216, 169, 71, 47, 122, 108, 250, 97, 223, 130, 248, 17, 64, 131, 5, 190, 97, 207, 114, 130, 235, 126, 0, 55, 142, 111, 150, 121, 30, 236, 1, 178, 167, 26, 21, 2, 94, 36, 105, 84, 218, 37, 8, 10, 235, 148, 9, 79, 94, 248, 186, 1, 112, 129, 204, 39, 56, 100, 90, 66, 195, 31, 241, 13, 224, 65, 89, 1, 133, 233, 58, 81, 136, 66, 192, 181, 92, 105, 34, 96, 181, 198, 100, 138, 32, 153, 216, 47, 43, 83, 173, 168, 126, 103, 79, 67, 223, 47, 66, 141, 70, 36, 200, 42, 185, 33, 84, 243, 60, 2, 1, 113, 154, 255, 69, 53, 238, 100, 46, 47, 206, 253, 126, 62, 189, 92, 244, 186, 110, 122, 124, 121, 107, 138, 80, 241, 63, 134, 111, 113, 15, 139, 152, 242, 163, 25, 133, 20, 83, 172, 217, 31, 206, 253, 252, 13, 218, 62, 45, 63, 216, 125, 239, 40, 90, 175, 24, 57, 6, 204, 32, 194, 193, 110, 39, 13, 176, 91, 207, 202, 253, 54, 220, 239, 27, 98, 35, 117, 81, 115, 92, 235, 28, 125, 146, 74, 163, 239, 242, 109, 71, 241, 72, 46, 97, 156, 20] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "DM6LzfiyFTEcEtSRwHwDmR7FTrHHLWzDZdFTJ1VR6WKE", recipient: "DM6LzfiyFTEcEtSRwHwDmR7FTrHHLWzDZdFTJ1VR6WKE", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "DM6LzfiyFTEcEtSRwHwDmR7FTrHHLWzDZdFTJ1VR6WKE", recipient: "DM6LzfiyFTEcEtSRwHwDmR7FTrHHLWzDZdFTJ1VR6WKE", amount: 0, nonce: 1 }], programs: [], timestamp: 1729001146, batch_id: 106 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "DM6LzfiyFTEcEtSRwHwDmR7FTrHHLWzDZdFTJ1VR6WKE", recipient: "DM6LzfiyFTEcEtSRwHwDmR7FTrHHLWzDZdFTJ1VR6WKE", amount: 0, nonce: 1 }], programs: [], timestamp: 1729001146, batch_id: 106 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (17471861280460848207870152607283739138112563090912786585161205032561715206694, 16638638693419411912551952647288885275593464586124390338166825393456312890977), b: (QuadExtField(13250025786278141462555058866974039343904130318774699148206640988309994826731 + 3527164003792441389825077481131856598107991657210993557196501173801174889829 * u), QuadExtField(6340444029446990734637717864682912107549040084594918908255490859426474958299 + 1274956350833453947580637961188931337241736095550600618797333650044319113532 * u)), c: (9968717237074600491101151097608882659009567992007723155871624618179054627061, 14277177974281889184894262688146672525748239899108879160512960596466000509068) }
Serialized proof bytes: [38, 90, 240, 163, 24, 150, 115, 184, 216, 67, 33, 120, 181, 155, 219, 52, 10, 21, 216, 97, 227, 156, 198, 68, 216, 46, 34, 65, 25, 185, 160, 38, 97, 54, 142, 83, 34, 202, 157, 106, 207, 198, 155, 238, 161, 191, 36, 205, 149, 15, 149, 41, 53, 143, 157, 252, 138, 150, 149, 206, 193, 34, 201, 164, 235, 107, 99, 188, 121, 213, 190, 230, 153, 55, 177, 116, 237, 39, 6, 139, 67, 166, 137, 234, 197, 158, 145, 158, 28, 24, 171, 110, 179, 63, 75, 29, 101, 245, 114, 81, 68, 100, 94, 136, 124, 162, 141, 17, 142, 145, 27, 53, 172, 230, 228, 165, 234, 81, 156, 123, 172, 159, 106, 44, 216, 77, 204, 7, 219, 29, 205, 55, 128, 177, 84, 181, 63, 157, 106, 224, 18, 78, 10, 147, 129, 162, 185, 154, 225, 62, 249, 43, 51, 232, 207, 235, 107, 144, 4, 14, 60, 33, 131, 171, 247, 200, 187, 115, 20, 155, 164, 51, 244, 102, 199, 95, 6, 244, 237, 241, 206, 93, 222, 98, 94, 203, 57, 98, 135, 153, 209, 2, 245, 104, 233, 5, 175, 137, 158, 141, 225, 127, 111, 21, 191, 37, 204, 67, 209, 127, 166, 102, 240, 61, 194, 77, 200, 30, 247, 230, 16, 24, 10, 22, 140, 184, 116, 211, 49, 221, 22, 28, 179, 0, 244, 109, 112, 145, 174, 243, 105, 168, 59, 14, 181, 196, 60, 166, 74, 54, 16, 145, 171, 152, 144, 159]
Proof generated: Proof { data: [38, 90, 240, 163, 24, 150, 115, 184, 216, 67, 33, 120, 181, 155, 219, 52, 10, 21, 216, 97, 227, 156, 198, 68, 216, 46, 34, 65, 25, 185, 160, 38, 97, 54, 142, 83, 34, 202, 157, 106, 207, 198, 155, 238, 161, 191, 36, 205, 149, 15, 149, 41, 53, 143, 157, 252, 138, 150, 149, 206, 193, 34, 201, 164, 235, 107, 99, 188, 121, 213, 190, 230, 153, 55, 177, 116, 237, 39, 6, 139, 67, 166, 137, 234, 197, 158, 145, 158, 28, 24, 171, 110, 179, 63, 75, 29, 101, 245, 114, 81, 68, 100, 94, 136, 124, 162, 141, 17, 142, 145, 27, 53, 172, 230, 228, 165, 234, 81, 156, 123, 172, 159, 106, 44, 216, 77, 204, 7, 219, 29, 205, 55, 128, 177, 84, 181, 63, 157, 106, 224, 18, 78, 10, 147, 129, 162, 185, 154, 225, 62, 249, 43, 51, 232, 207, 235, 107, 144, 4, 14, 60, 33, 131, 171, 247, 200, 187, 115, 20, 155, 164, 51, 244, 102, 199, 95, 6, 244, 237, 241, 206, 93, 222, 98, 94, 203, 57, 98, 135, 153, 209, 2, 245, 104, 233, 5, 175, 137, 158, 141, 225, 127, 111, 21, 191, 37, 204, 67, 209, 127, 166, 102, 240, 61, 194, 77, 200, 30, 247, 230, 16, 24, 10, 22, 140, 184, 116, 211, 49, 221, 22, 28, 179, 0, 244, 109, 112, 145, 174, 243, 105, 168, 59, 14, 181, 196, 60, 166, 74, 54, 16, 145, 171, 152, 144, 159] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [38, 90, 240, 163, 24, 150, 115, 184, 216, 67, 33, 120, 181, 155, 219, 52, 10, 21, 216, 97, 227, 156, 198, 68, 216, 46, 34, 65, 25, 185, 160, 38, 97, 54, 142, 83, 34, 202, 157, 106, 207, 198, 155, 238, 161, 191, 36, 205, 149, 15, 149, 41, 53, 143, 157, 252, 138, 150, 149, 206, 193, 34, 201, 164, 235, 107, 99, 188, 121, 213, 190, 230, 153, 55, 177, 116, 237, 39, 6, 139, 67, 166, 137, 234, 197, 158, 145, 158, 28, 24, 171, 110, 179, 63, 75, 29, 101, 245, 114, 81, 68, 100, 94, 136, 124, 162, 141, 17, 142, 145, 27, 53, 172, 230, 228, 165, 234, 81, 156, 123, 172, 159, 106, 44, 216, 77, 204, 7, 219, 29, 205, 55, 128, 177, 84, 181, 63, 157, 106, 224, 18, 78, 10, 147, 129, 162, 185, 154, 225, 62, 249, 43, 51, 232, 207, 235, 107, 144, 4, 14, 60, 33, 131, 171, 247, 200, 187, 115, 20, 155, 164, 51, 244, 102, 199, 95, 6, 244, 237, 241, 206, 93, 222, 98, 94, 203, 57, 98, 135, 153, 209, 2, 245, 104, 233, 5, 175, 137, 158, 141, 225, 127, 111, 21, 191, 37, 204, 67, 209, 127, 166, 102, 240, 61, 194, 77, 200, 30, 247, 230, 16, 24, 10, 22, 140, 184, 116, 211, 49, 221, 22, 28, 179, 0, 244, 109, 112, 145, 174, 243, 105, 168, 59, 14, 181, 196, 60, 166, 74, 54, 16, 145, 171, 152, 144, 159] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [38, 90, 240, 163, 24, 150, 115, 184, 216, 67, 33, 120, 181, 155, 219, 52, 10, 21, 216, 97, 227, 156, 198, 68, 216, 46, 34, 65, 25, 185, 160, 38, 97, 54, 142, 83, 34, 202, 157, 106, 207, 198, 155, 238, 161, 191, 36, 205, 149, 15, 149, 41, 53, 143, 157, 252, 138, 150, 149, 206, 193, 34, 201, 164, 235, 107, 99, 188, 121, 213, 190, 230, 153, 55, 177, 116, 237, 39, 6, 139, 67, 166, 137, 234, 197, 158, 145, 158, 28, 24, 171, 110, 179, 63, 75, 29, 101, 245, 114, 81, 68, 100, 94, 136, 124, 162, 141, 17, 142, 145, 27, 53, 172, 230, 228, 165, 234, 81, 156, 123, 172, 159, 106, 44, 216, 77, 204, 7, 219, 29, 205, 55, 128, 177, 84, 181, 63, 157, 106, 224, 18, 78, 10, 147, 129, 162, 185, 154, 225, 62, 249, 43, 51, 232, 207, 235, 107, 144, 4, 14, 60, 33, 131, 171, 247, 200, 187, 115, 20, 155, 164, 51, 244, 102, 199, 95, 6, 244, 237, 241, 206, 93, 222, 98, 94, 203, 57, 98, 135, 153, 209, 2, 245, 104, 233, 5, 175, 137, 158, 141, 225, 127, 111, 21, 191, 37, 204, 67, 209, 127, 166, 102, 240, 61, 194, 77, 200, 30, 247, 230, 16, 24, 10, 22, 140, 184, 116, 211, 49, 221, 22, 28, 179, 0, 244, 109, 112, 145, 174, 243, 105, 168, 59, 14, 181, 196, 60, 166, 74, 54, 16, 145, 171, 152, 144, 159] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "DqYQie2rzrD5wWHYqSYu92gL6xP1AMtGHSoJMHvYHfvQ", recipient: "DqYQie2rzrD5wWHYqSYu92gL6xP1AMtGHSoJMHvYHfvQ", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "DqYQie2rzrD5wWHYqSYu92gL6xP1AMtGHSoJMHvYHfvQ", recipient: "DqYQie2rzrD5wWHYqSYu92gL6xP1AMtGHSoJMHvYHfvQ", amount: 0, nonce: 1 }], programs: [], timestamp: 1729002837, batch_id: 108 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "DqYQie2rzrD5wWHYqSYu92gL6xP1AMtGHSoJMHvYHfvQ", recipient: "DqYQie2rzrD5wWHYqSYu92gL6xP1AMtGHSoJMHvYHfvQ", amount: 0, nonce: 1 }], programs: [], timestamp: 1729002837, batch_id: 108 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (12851870748023771453381636740900514760785834563267552042920705391231732748593, 13502147384566136649403834071275919750297914554336243962739314633901029277188), b: (QuadExtField(2412465510643591989188162615481660085172808585968499742827123555640050001774 + 36522179018527268667849899899615347042856642496441865169617381885206082097 * u), QuadExtField(5461902362966900724714382469389133614626918848001749108829731140879972953068 + 12533966349003600668340381376122910746173673002752274829182542776971480519097 * u)), c: (1568966848554546921037708669983541911794961667528079364844233476303290245126, 2067521776762620478735490078063903974509268486393343586795463967580431944000) }
Serialized proof bytes: [49, 17, 187, 120, 102, 106, 88, 234, 136, 233, 46, 34, 201, 20, 241, 70, 150, 16, 89, 212, 47, 240, 112, 70, 236, 190, 155, 67, 172, 230, 105, 28, 4, 62, 17, 79, 187, 68, 220, 26, 71, 253, 49, 198, 46, 127, 38, 91, 159, 240, 162, 34, 188, 15, 182, 167, 118, 152, 97, 67, 209, 241, 217, 157, 110, 39, 249, 137, 174, 59, 102, 41, 135, 91, 113, 17, 174, 53, 166, 6, 18, 254, 138, 190, 206, 95, 184, 53, 95, 15, 160, 26, 55, 104, 85, 5, 49, 50, 28, 203, 28, 166, 148, 99, 148, 130, 237, 220, 27, 118, 52, 244, 191, 173, 41, 185, 99, 167, 125, 169, 123, 219, 23, 233, 186, 171, 20, 0, 236, 235, 225, 158, 109, 29, 7, 25, 19, 120, 140, 121, 44, 180, 133, 68, 208, 220, 247, 2, 165, 218, 69, 4, 107, 25, 71, 100, 194, 83, 19, 12, 185, 209, 147, 224, 112, 115, 157, 201, 74, 73, 158, 187, 216, 117, 132, 161, 17, 15, 81, 76, 97, 153, 11, 198, 47, 140, 9, 190, 58, 249, 181, 155, 6, 32, 70, 81, 12, 161, 133, 73, 85, 141, 235, 242, 44, 5, 85, 101, 3, 161, 236, 111, 253, 215, 136, 98, 93, 11, 77, 217, 246, 0, 120, 3, 64, 137, 189, 47, 199, 225, 32, 174, 0, 219, 62, 162, 230, 102, 80, 249, 88, 238, 89, 92, 24, 151, 197, 229, 1, 72, 21, 233, 4, 45, 146, 4]
Proof generated: Proof { data: [49, 17, 187, 120, 102, 106, 88, 234, 136, 233, 46, 34, 201, 20, 241, 70, 150, 16, 89, 212, 47, 240, 112, 70, 236, 190, 155, 67, 172, 230, 105, 28, 4, 62, 17, 79, 187, 68, 220, 26, 71, 253, 49, 198, 46, 127, 38, 91, 159, 240, 162, 34, 188, 15, 182, 167, 118, 152, 97, 67, 209, 241, 217, 157, 110, 39, 249, 137, 174, 59, 102, 41, 135, 91, 113, 17, 174, 53, 166, 6, 18, 254, 138, 190, 206, 95, 184, 53, 95, 15, 160, 26, 55, 104, 85, 5, 49, 50, 28, 203, 28, 166, 148, 99, 148, 130, 237, 220, 27, 118, 52, 244, 191, 173, 41, 185, 99, 167, 125, 169, 123, 219, 23, 233, 186, 171, 20, 0, 236, 235, 225, 158, 109, 29, 7, 25, 19, 120, 140, 121, 44, 180, 133, 68, 208, 220, 247, 2, 165, 218, 69, 4, 107, 25, 71, 100, 194, 83, 19, 12, 185, 209, 147, 224, 112, 115, 157, 201, 74, 73, 158, 187, 216, 117, 132, 161, 17, 15, 81, 76, 97, 153, 11, 198, 47, 140, 9, 190, 58, 249, 181, 155, 6, 32, 70, 81, 12, 161, 133, 73, 85, 141, 235, 242, 44, 5, 85, 101, 3, 161, 236, 111, 253, 215, 136, 98, 93, 11, 77, 217, 246, 0, 120, 3, 64, 137, 189, 47, 199, 225, 32, 174, 0, 219, 62, 162, 230, 102, 80, 249, 88, 238, 89, 92, 24, 151, 197, 229, 1, 72, 21, 233, 4, 45, 146, 4] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [49, 17, 187, 120, 102, 106, 88, 234, 136, 233, 46, 34, 201, 20, 241, 70, 150, 16, 89, 212, 47, 240, 112, 70, 236, 190, 155, 67, 172, 230, 105, 28, 4, 62, 17, 79, 187, 68, 220, 26, 71, 253, 49, 198, 46, 127, 38, 91, 159, 240, 162, 34, 188, 15, 182, 167, 118, 152, 97, 67, 209, 241, 217, 157, 110, 39, 249, 137, 174, 59, 102, 41, 135, 91, 113, 17, 174, 53, 166, 6, 18, 254, 138, 190, 206, 95, 184, 53, 95, 15, 160, 26, 55, 104, 85, 5, 49, 50, 28, 203, 28, 166, 148, 99, 148, 130, 237, 220, 27, 118, 52, 244, 191, 173, 41, 185, 99, 167, 125, 169, 123, 219, 23, 233, 186, 171, 20, 0, 236, 235, 225, 158, 109, 29, 7, 25, 19, 120, 140, 121, 44, 180, 133, 68, 208, 220, 247, 2, 165, 218, 69, 4, 107, 25, 71, 100, 194, 83, 19, 12, 185, 209, 147, 224, 112, 115, 157, 201, 74, 73, 158, 187, 216, 117, 132, 161, 17, 15, 81, 76, 97, 153, 11, 198, 47, 140, 9, 190, 58, 249, 181, 155, 6, 32, 70, 81, 12, 161, 133, 73, 85, 141, 235, 242, 44, 5, 85, 101, 3, 161, 236, 111, 253, 215, 136, 98, 93, 11, 77, 217, 246, 0, 120, 3, 64, 137, 189, 47, 199, 225, 32, 174, 0, 219, 62, 162, 230, 102, 80, 249, 88, 238, 89, 92, 24, 151, 197, 229, 1, 72, 21, 233, 4, 45, 146, 4] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [49, 17, 187, 120, 102, 106, 88, 234, 136, 233, 46, 34, 201, 20, 241, 70, 150, 16, 89, 212, 47, 240, 112, 70, 236, 190, 155, 67, 172, 230, 105, 28, 4, 62, 17, 79, 187, 68, 220, 26, 71, 253, 49, 198, 46, 127, 38, 91, 159, 240, 162, 34, 188, 15, 182, 167, 118, 152, 97, 67, 209, 241, 217, 157, 110, 39, 249, 137, 174, 59, 102, 41, 135, 91, 113, 17, 174, 53, 166, 6, 18, 254, 138, 190, 206, 95, 184, 53, 95, 15, 160, 26, 55, 104, 85, 5, 49, 50, 28, 203, 28, 166, 148, 99, 148, 130, 237, 220, 27, 118, 52, 244, 191, 173, 41, 185, 99, 167, 125, 169, 123, 219, 23, 233, 186, 171, 20, 0, 236, 235, 225, 158, 109, 29, 7, 25, 19, 120, 140, 121, 44, 180, 133, 68, 208, 220, 247, 2, 165, 218, 69, 4, 107, 25, 71, 100, 194, 83, 19, 12, 185, 209, 147, 224, 112, 115, 157, 201, 74, 73, 158, 187, 216, 117, 132, 161, 17, 15, 81, 76, 97, 153, 11, 198, 47, 140, 9, 190, 58, 249, 181, 155, 6, 32, 70, 81, 12, 161, 133, 73, 85, 141, 235, 242, 44, 5, 85, 101, 3, 161, 236, 111, 253, 215, 136, 98, 93, 11, 77, 217, 246, 0, 120, 3, 64, 137, 189, 47, 199, 225, 32, 174, 0, 219, 62, 162, 230, 102, 80, 249, 88, 238, 89, 92, 24, 151, 197, 229, 1, 72, 21, 233, 4, 45, 146, 4] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "3xS43e2fSkkWGN8Enm195bHtviQDb5MSoxbvdYkECiKC", recipient: "3xS43e2fSkkWGN8Enm195bHtviQDb5MSoxbvdYkECiKC", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "3xS43e2fSkkWGN8Enm195bHtviQDb5MSoxbvdYkECiKC", recipient: "3xS43e2fSkkWGN8Enm195bHtviQDb5MSoxbvdYkECiKC", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003582, batch_id: 110 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "3xS43e2fSkkWGN8Enm195bHtviQDb5MSoxbvdYkECiKC", recipient: "3xS43e2fSkkWGN8Enm195bHtviQDb5MSoxbvdYkECiKC", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003582, batch_id: 110 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (20809326316753132513338613245132826029911331389987013369275471349941823042941, 20353776676510127111677669827797533356867014301177796757957968889188249042792), b: (QuadExtField(1868926918857835984622701188703384901551580661356732150413460767114505727733 + 852781124849887362993812301699977378788415947219100979899803910867658891813 * u), QuadExtField(19974263494182942831569472197797948455892925647038222941366465501155358413239 + 21159672367817661787131472623444657781202963225371826076219651277531486378159 * u)), c: (12605046341163045034388030750528260466332873971502763359576230340841898371617, 3648719240713640495538391309854831728428602321696227165697646712542134103371) }
Serialized proof bytes: [125, 117, 79, 241, 173, 91, 102, 30, 245, 9, 221, 189, 196, 126, 92, 103, 124, 104, 170, 16, 164, 206, 11, 128, 88, 2, 90, 168, 75, 169, 1, 46, 104, 255, 64, 168, 111, 108, 23, 181, 77, 204, 174, 50, 6, 127, 94, 25, 121, 217, 231, 103, 223, 216, 75, 208, 103, 29, 222, 97, 80, 212, 255, 172, 245, 174, 95, 146, 159, 147, 52, 27, 185, 4, 94, 109, 63, 82, 198, 157, 16, 2, 83, 49, 143, 206, 0, 53, 93, 130, 227, 57, 112, 198, 33, 4, 37, 98, 238, 15, 50, 255, 191, 37, 24, 97, 199, 50, 110, 155, 143, 175, 244, 14, 40, 86, 85, 186, 109, 231, 224, 61, 81, 239, 49, 168, 226, 1, 183, 17, 196, 16, 136, 38, 207, 187, 197, 12, 32, 185, 10, 133, 189, 155, 152, 206, 174, 26, 73, 157, 194, 23, 134, 196, 171, 20, 82, 8, 41, 44, 175, 88, 124, 22, 131, 91, 114, 44, 214, 201, 156, 44, 148, 204, 161, 235, 249, 109, 45, 150, 178, 192, 70, 59, 226, 186, 177, 238, 60, 243, 199, 174, 33, 234, 253, 216, 130, 132, 151, 115, 158, 47, 109, 55, 173, 187, 13, 134, 144, 129, 19, 182, 11, 221, 168, 162, 110, 147, 244, 46, 18, 52, 222, 27, 75, 109, 21, 113, 151, 144, 8, 131, 4, 248, 129, 160, 86, 42, 149, 174, 48, 204, 94, 253, 112, 190, 97, 63, 243, 32, 116, 127, 22, 26, 17, 8]
Proof generated: Proof { data: [125, 117, 79, 241, 173, 91, 102, 30, 245, 9, 221, 189, 196, 126, 92, 103, 124, 104, 170, 16, 164, 206, 11, 128, 88, 2, 90, 168, 75, 169, 1, 46, 104, 255, 64, 168, 111, 108, 23, 181, 77, 204, 174, 50, 6, 127, 94, 25, 121, 217, 231, 103, 223, 216, 75, 208, 103, 29, 222, 97, 80, 212, 255, 172, 245, 174, 95, 146, 159, 147, 52, 27, 185, 4, 94, 109, 63, 82, 198, 157, 16, 2, 83, 49, 143, 206, 0, 53, 93, 130, 227, 57, 112, 198, 33, 4, 37, 98, 238, 15, 50, 255, 191, 37, 24, 97, 199, 50, 110, 155, 143, 175, 244, 14, 40, 86, 85, 186, 109, 231, 224, 61, 81, 239, 49, 168, 226, 1, 183, 17, 196, 16, 136, 38, 207, 187, 197, 12, 32, 185, 10, 133, 189, 155, 152, 206, 174, 26, 73, 157, 194, 23, 134, 196, 171, 20, 82, 8, 41, 44, 175, 88, 124, 22, 131, 91, 114, 44, 214, 201, 156, 44, 148, 204, 161, 235, 249, 109, 45, 150, 178, 192, 70, 59, 226, 186, 177, 238, 60, 243, 199, 174, 33, 234, 253, 216, 130, 132, 151, 115, 158, 47, 109, 55, 173, 187, 13, 134, 144, 129, 19, 182, 11, 221, 168, 162, 110, 147, 244, 46, 18, 52, 222, 27, 75, 109, 21, 113, 151, 144, 8, 131, 4, 248, 129, 160, 86, 42, 149, 174, 48, 204, 94, 253, 112, 190, 97, 63, 243, 32, 116, 127, 22, 26, 17, 8] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [125, 117, 79, 241, 173, 91, 102, 30, 245, 9, 221, 189, 196, 126, 92, 103, 124, 104, 170, 16, 164, 206, 11, 128, 88, 2, 90, 168, 75, 169, 1, 46, 104, 255, 64, 168, 111, 108, 23, 181, 77, 204, 174, 50, 6, 127, 94, 25, 121, 217, 231, 103, 223, 216, 75, 208, 103, 29, 222, 97, 80, 212, 255, 172, 245, 174, 95, 146, 159, 147, 52, 27, 185, 4, 94, 109, 63, 82, 198, 157, 16, 2, 83, 49, 143, 206, 0, 53, 93, 130, 227, 57, 112, 198, 33, 4, 37, 98, 238, 15, 50, 255, 191, 37, 24, 97, 199, 50, 110, 155, 143, 175, 244, 14, 40, 86, 85, 186, 109, 231, 224, 61, 81, 239, 49, 168, 226, 1, 183, 17, 196, 16, 136, 38, 207, 187, 197, 12, 32, 185, 10, 133, 189, 155, 152, 206, 174, 26, 73, 157, 194, 23, 134, 196, 171, 20, 82, 8, 41, 44, 175, 88, 124, 22, 131, 91, 114, 44, 214, 201, 156, 44, 148, 204, 161, 235, 249, 109, 45, 150, 178, 192, 70, 59, 226, 186, 177, 238, 60, 243, 199, 174, 33, 234, 253, 216, 130, 132, 151, 115, 158, 47, 109, 55, 173, 187, 13, 134, 144, 129, 19, 182, 11, 221, 168, 162, 110, 147, 244, 46, 18, 52, 222, 27, 75, 109, 21, 113, 151, 144, 8, 131, 4, 248, 129, 160, 86, 42, 149, 174, 48, 204, 94, 253, 112, 190, 97, 63, 243, 32, 116, 127, 22, 26, 17, 8] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [125, 117, 79, 241, 173, 91, 102, 30, 245, 9, 221, 189, 196, 126, 92, 103, 124, 104, 170, 16, 164, 206, 11, 128, 88, 2, 90, 168, 75, 169, 1, 46, 104, 255, 64, 168, 111, 108, 23, 181, 77, 204, 174, 50, 6, 127, 94, 25, 121, 217, 231, 103, 223, 216, 75, 208, 103, 29, 222, 97, 80, 212, 255, 172, 245, 174, 95, 146, 159, 147, 52, 27, 185, 4, 94, 109, 63, 82, 198, 157, 16, 2, 83, 49, 143, 206, 0, 53, 93, 130, 227, 57, 112, 198, 33, 4, 37, 98, 238, 15, 50, 255, 191, 37, 24, 97, 199, 50, 110, 155, 143, 175, 244, 14, 40, 86, 85, 186, 109, 231, 224, 61, 81, 239, 49, 168, 226, 1, 183, 17, 196, 16, 136, 38, 207, 187, 197, 12, 32, 185, 10, 133, 189, 155, 152, 206, 174, 26, 73, 157, 194, 23, 134, 196, 171, 20, 82, 8, 41, 44, 175, 88, 124, 22, 131, 91, 114, 44, 214, 201, 156, 44, 148, 204, 161, 235, 249, 109, 45, 150, 178, 192, 70, 59, 226, 186, 177, 238, 60, 243, 199, 174, 33, 234, 253, 216, 130, 132, 151, 115, 158, 47, 109, 55, 173, 187, 13, 134, 144, 129, 19, 182, 11, 221, 168, 162, 110, 147, 244, 46, 18, 52, 222, 27, 75, 109, 21, 113, 151, 144, 8, 131, 4, 248, 129, 160, 86, 42, 149, 174, 48, 204, 94, 253, 112, 190, 97, 63, 243, 32, 116, 127, 22, 26, 17, 8] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "5PfqgMdJ7m9fdz1qccnAPQZFDmM4ta64KgymbnoWbyTq", recipient: "5PfqgMdJ7m9fdz1qccnAPQZFDmM4ta64KgymbnoWbyTq", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "5PfqgMdJ7m9fdz1qccnAPQZFDmM4ta64KgymbnoWbyTq", recipient: "5PfqgMdJ7m9fdz1qccnAPQZFDmM4ta64KgymbnoWbyTq", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003583, batch_id: 112 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "5PfqgMdJ7m9fdz1qccnAPQZFDmM4ta64KgymbnoWbyTq", recipient: "5PfqgMdJ7m9fdz1qccnAPQZFDmM4ta64KgymbnoWbyTq", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003583, batch_id: 112 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (328463494326330866490662876919378047387236164903035742264789593250358020188, 17252204311241010387392916991401837807714101151156497166499418245777445307729), b: (QuadExtField(18995198140857504428858013591589415128552153594134050750578311001774192929545 + 11126320859530587517342590786219565543131563239053405227896758440159374457521 * u), QuadExtField(2172598566632580375358129243316853294638090602622397384402116355823912112489 + 17975304128278148584612972210854761049470420897653649527293344609572139951073 * u)), c: (13743858100623434588973148900732452191826141663325090133550650138923028492613, 4915505384261915681720344187527924977603280451634423439799516767899890403262) }
Serialized proof bytes: [92, 200, 130, 242, 244, 88, 241, 174, 80, 60, 216, 132, 58, 210, 53, 200, 28, 124, 160, 65, 202, 127, 200, 139, 87, 121, 98, 34, 92, 231, 185, 0, 81, 69, 27, 230, 127, 89, 35, 39, 80, 164, 170, 115, 21, 133, 190, 117, 90, 158, 82, 35, 76, 103, 255, 112, 80, 10, 20, 113, 207, 102, 36, 166, 9, 43, 209, 205, 22, 17, 227, 187, 134, 234, 35, 246, 89, 89, 51, 4, 16, 226, 87, 141, 251, 246, 43, 144, 135, 156, 164, 198, 177, 230, 254, 41, 177, 186, 199, 61, 120, 24, 127, 239, 80, 24, 62, 113, 56, 146, 239, 68, 18, 73, 125, 119, 59, 133, 31, 96, 156, 171, 187, 170, 65, 70, 153, 24, 105, 81, 220, 7, 169, 191, 242, 162, 131, 255, 77, 206, 17, 91, 69, 105, 127, 248, 15, 150, 146, 183, 222, 57, 137, 224, 204, 169, 175, 165, 205, 4, 225, 227, 109, 143, 99, 220, 215, 172, 142, 47, 122, 232, 235, 36, 200, 250, 58, 66, 127, 226, 165, 169, 43, 7, 11, 113, 179, 84, 94, 169, 189, 167, 69, 177, 188, 21, 217, 137, 134, 131, 79, 124, 156, 232, 217, 176, 90, 28, 238, 181, 102, 44, 86, 155, 203, 33, 156, 84, 148, 2, 126, 191, 98, 30, 190, 199, 198, 76, 253, 41, 192, 126, 82, 135, 156, 90, 245, 8, 57, 245, 203, 101, 40, 11, 88, 161, 110, 225, 85, 244, 231, 12, 212, 19, 222, 10]
Proof generated: Proof { data: [92, 200, 130, 242, 244, 88, 241, 174, 80, 60, 216, 132, 58, 210, 53, 200, 28, 124, 160, 65, 202, 127, 200, 139, 87, 121, 98, 34, 92, 231, 185, 0, 81, 69, 27, 230, 127, 89, 35, 39, 80, 164, 170, 115, 21, 133, 190, 117, 90, 158, 82, 35, 76, 103, 255, 112, 80, 10, 20, 113, 207, 102, 36, 166, 9, 43, 209, 205, 22, 17, 227, 187, 134, 234, 35, 246, 89, 89, 51, 4, 16, 226, 87, 141, 251, 246, 43, 144, 135, 156, 164, 198, 177, 230, 254, 41, 177, 186, 199, 61, 120, 24, 127, 239, 80, 24, 62, 113, 56, 146, 239, 68, 18, 73, 125, 119, 59, 133, 31, 96, 156, 171, 187, 170, 65, 70, 153, 24, 105, 81, 220, 7, 169, 191, 242, 162, 131, 255, 77, 206, 17, 91, 69, 105, 127, 248, 15, 150, 146, 183, 222, 57, 137, 224, 204, 169, 175, 165, 205, 4, 225, 227, 109, 143, 99, 220, 215, 172, 142, 47, 122, 232, 235, 36, 200, 250, 58, 66, 127, 226, 165, 169, 43, 7, 11, 113, 179, 84, 94, 169, 189, 167, 69, 177, 188, 21, 217, 137, 134, 131, 79, 124, 156, 232, 217, 176, 90, 28, 238, 181, 102, 44, 86, 155, 203, 33, 156, 84, 148, 2, 126, 191, 98, 30, 190, 199, 198, 76, 253, 41, 192, 126, 82, 135, 156, 90, 245, 8, 57, 245, 203, 101, 40, 11, 88, 161, 110, 225, 85, 244, 231, 12, 212, 19, 222, 10] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [92, 200, 130, 242, 244, 88, 241, 174, 80, 60, 216, 132, 58, 210, 53, 200, 28, 124, 160, 65, 202, 127, 200, 139, 87, 121, 98, 34, 92, 231, 185, 0, 81, 69, 27, 230, 127, 89, 35, 39, 80, 164, 170, 115, 21, 133, 190, 117, 90, 158, 82, 35, 76, 103, 255, 112, 80, 10, 20, 113, 207, 102, 36, 166, 9, 43, 209, 205, 22, 17, 227, 187, 134, 234, 35, 246, 89, 89, 51, 4, 16, 226, 87, 141, 251, 246, 43, 144, 135, 156, 164, 198, 177, 230, 254, 41, 177, 186, 199, 61, 120, 24, 127, 239, 80, 24, 62, 113, 56, 146, 239, 68, 18, 73, 125, 119, 59, 133, 31, 96, 156, 171, 187, 170, 65, 70, 153, 24, 105, 81, 220, 7, 169, 191, 242, 162, 131, 255, 77, 206, 17, 91, 69, 105, 127, 248, 15, 150, 146, 183, 222, 57, 137, 224, 204, 169, 175, 165, 205, 4, 225, 227, 109, 143, 99, 220, 215, 172, 142, 47, 122, 232, 235, 36, 200, 250, 58, 66, 127, 226, 165, 169, 43, 7, 11, 113, 179, 84, 94, 169, 189, 167, 69, 177, 188, 21, 217, 137, 134, 131, 79, 124, 156, 232, 217, 176, 90, 28, 238, 181, 102, 44, 86, 155, 203, 33, 156, 84, 148, 2, 126, 191, 98, 30, 190, 199, 198, 76, 253, 41, 192, 126, 82, 135, 156, 90, 245, 8, 57, 245, 203, 101, 40, 11, 88, 161, 110, 225, 85, 244, 231, 12, 212, 19, 222, 10] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [92, 200, 130, 242, 244, 88, 241, 174, 80, 60, 216, 132, 58, 210, 53, 200, 28, 124, 160, 65, 202, 127, 200, 139, 87, 121, 98, 34, 92, 231, 185, 0, 81, 69, 27, 230, 127, 89, 35, 39, 80, 164, 170, 115, 21, 133, 190, 117, 90, 158, 82, 35, 76, 103, 255, 112, 80, 10, 20, 113, 207, 102, 36, 166, 9, 43, 209, 205, 22, 17, 227, 187, 134, 234, 35, 246, 89, 89, 51, 4, 16, 226, 87, 141, 251, 246, 43, 144, 135, 156, 164, 198, 177, 230, 254, 41, 177, 186, 199, 61, 120, 24, 127, 239, 80, 24, 62, 113, 56, 146, 239, 68, 18, 73, 125, 119, 59, 133, 31, 96, 156, 171, 187, 170, 65, 70, 153, 24, 105, 81, 220, 7, 169, 191, 242, 162, 131, 255, 77, 206, 17, 91, 69, 105, 127, 248, 15, 150, 146, 183, 222, 57, 137, 224, 204, 169, 175, 165, 205, 4, 225, 227, 109, 143, 99, 220, 215, 172, 142, 47, 122, 232, 235, 36, 200, 250, 58, 66, 127, 226, 165, 169, 43, 7, 11, 113, 179, 84, 94, 169, 189, 167, 69, 177, 188, 21, 217, 137, 134, 131, 79, 124, 156, 232, 217, 176, 90, 28, 238, 181, 102, 44, 86, 155, 203, 33, 156, 84, 148, 2, 126, 191, 98, 30, 190, 199, 198, 76, 253, 41, 192, 126, 82, 135, 156, 90, 245, 8, 57, 245, 203, 101, 40, 11, 88, 161, 110, 225, 85, 244, 231, 12, 212, 19, 222, 10] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "8DiGhN7jFr5QgtoPYtzXGV11r7fignvkYy6P1YHjbxBi", recipient: "8DiGhN7jFr5QgtoPYtzXGV11r7fignvkYy6P1YHjbxBi", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "8DiGhN7jFr5QgtoPYtzXGV11r7fignvkYy6P1YHjbxBi", recipient: "8DiGhN7jFr5QgtoPYtzXGV11r7fignvkYy6P1YHjbxBi", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003583, batch_id: 114 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "8DiGhN7jFr5QgtoPYtzXGV11r7fignvkYy6P1YHjbxBi", recipient: "8DiGhN7jFr5QgtoPYtzXGV11r7fignvkYy6P1YHjbxBi", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003583, batch_id: 114 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (365952719078117752124780077064534841456654760937452866920891962442755789824, 16498359900150286136936612442667220482089087338940172008421146311545894672932), b: (QuadExtField(21104973661417825851605600029820672165318427968714756251008975174879148093059 + 5902127603483688638725927864990577673329725981872837309328175689667262684279 * u), QuadExtField(835530702007968911301206176063949936249899175761884331174064795868255467922 + 10557282936594850275585227942800679485711704924571551610389004654289656117957 * u)), c: (9482907672185778595716196523881292769543523973038025090465176050238128901404, 19080204030156263709469784184019364766837909283602418303631515286956961326353) }
Serialized proof bytes: [0, 212, 18, 190, 145, 124, 194, 244, 126, 150, 112, 39, 237, 173, 129, 112, 179, 168, 74, 216, 255, 60, 236, 228, 83, 83, 192, 195, 52, 31, 207, 0, 36, 26, 11, 48, 191, 73, 234, 22, 131, 92, 198, 118, 37, 122, 107, 106, 198, 210, 99, 217, 149, 229, 182, 130, 26, 205, 205, 45, 164, 189, 121, 164, 131, 174, 129, 207, 111, 64, 169, 148, 162, 45, 33, 70, 0, 28, 226, 239, 205, 187, 31, 30, 196, 228, 80, 89, 225, 28, 120, 38, 229, 253, 168, 46, 119, 28, 38, 100, 69, 211, 29, 55, 22, 58, 4, 108, 93, 246, 134, 175, 182, 168, 103, 207, 11, 106, 140, 30, 27, 144, 255, 22, 96, 124, 12, 13, 146, 185, 31, 177, 223, 207, 49, 73, 217, 212, 83, 18, 130, 120, 4, 62, 233, 165, 173, 148, 197, 128, 8, 106, 139, 51, 148, 48, 196, 228, 216, 1, 197, 122, 214, 20, 197, 203, 77, 136, 49, 251, 133, 106, 76, 104, 218, 62, 116, 93, 104, 211, 89, 2, 132, 63, 58, 33, 151, 7, 220, 53, 87, 23, 28, 205, 47, 252, 23, 159, 5, 74, 1, 44, 0, 246, 223, 74, 227, 254, 36, 49, 101, 58, 173, 145, 42, 105, 140, 129, 6, 164, 178, 34, 247, 20, 17, 101, 238, 35, 199, 14, 219, 218, 250, 243, 198, 106, 67, 89, 94, 53, 233, 180, 190, 175, 168, 72, 161, 38, 185, 151, 68, 115, 69, 3, 47, 170]
Proof generated: Proof { data: [0, 212, 18, 190, 145, 124, 194, 244, 126, 150, 112, 39, 237, 173, 129, 112, 179, 168, 74, 216, 255, 60, 236, 228, 83, 83, 192, 195, 52, 31, 207, 0, 36, 26, 11, 48, 191, 73, 234, 22, 131, 92, 198, 118, 37, 122, 107, 106, 198, 210, 99, 217, 149, 229, 182, 130, 26, 205, 205, 45, 164, 189, 121, 164, 131, 174, 129, 207, 111, 64, 169, 148, 162, 45, 33, 70, 0, 28, 226, 239, 205, 187, 31, 30, 196, 228, 80, 89, 225, 28, 120, 38, 229, 253, 168, 46, 119, 28, 38, 100, 69, 211, 29, 55, 22, 58, 4, 108, 93, 246, 134, 175, 182, 168, 103, 207, 11, 106, 140, 30, 27, 144, 255, 22, 96, 124, 12, 13, 146, 185, 31, 177, 223, 207, 49, 73, 217, 212, 83, 18, 130, 120, 4, 62, 233, 165, 173, 148, 197, 128, 8, 106, 139, 51, 148, 48, 196, 228, 216, 1, 197, 122, 214, 20, 197, 203, 77, 136, 49, 251, 133, 106, 76, 104, 218, 62, 116, 93, 104, 211, 89, 2, 132, 63, 58, 33, 151, 7, 220, 53, 87, 23, 28, 205, 47, 252, 23, 159, 5, 74, 1, 44, 0, 246, 223, 74, 227, 254, 36, 49, 101, 58, 173, 145, 42, 105, 140, 129, 6, 164, 178, 34, 247, 20, 17, 101, 238, 35, 199, 14, 219, 218, 250, 243, 198, 106, 67, 89, 94, 53, 233, 180, 190, 175, 168, 72, 161, 38, 185, 151, 68, 115, 69, 3, 47, 170] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [0, 212, 18, 190, 145, 124, 194, 244, 126, 150, 112, 39, 237, 173, 129, 112, 179, 168, 74, 216, 255, 60, 236, 228, 83, 83, 192, 195, 52, 31, 207, 0, 36, 26, 11, 48, 191, 73, 234, 22, 131, 92, 198, 118, 37, 122, 107, 106, 198, 210, 99, 217, 149, 229, 182, 130, 26, 205, 205, 45, 164, 189, 121, 164, 131, 174, 129, 207, 111, 64, 169, 148, 162, 45, 33, 70, 0, 28, 226, 239, 205, 187, 31, 30, 196, 228, 80, 89, 225, 28, 120, 38, 229, 253, 168, 46, 119, 28, 38, 100, 69, 211, 29, 55, 22, 58, 4, 108, 93, 246, 134, 175, 182, 168, 103, 207, 11, 106, 140, 30, 27, 144, 255, 22, 96, 124, 12, 13, 146, 185, 31, 177, 223, 207, 49, 73, 217, 212, 83, 18, 130, 120, 4, 62, 233, 165, 173, 148, 197, 128, 8, 106, 139, 51, 148, 48, 196, 228, 216, 1, 197, 122, 214, 20, 197, 203, 77, 136, 49, 251, 133, 106, 76, 104, 218, 62, 116, 93, 104, 211, 89, 2, 132, 63, 58, 33, 151, 7, 220, 53, 87, 23, 28, 205, 47, 252, 23, 159, 5, 74, 1, 44, 0, 246, 223, 74, 227, 254, 36, 49, 101, 58, 173, 145, 42, 105, 140, 129, 6, 164, 178, 34, 247, 20, 17, 101, 238, 35, 199, 14, 219, 218, 250, 243, 198, 106, 67, 89, 94, 53, 233, 180, 190, 175, 168, 72, 161, 38, 185, 151, 68, 115, 69, 3, 47, 170] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [0, 212, 18, 190, 145, 124, 194, 244, 126, 150, 112, 39, 237, 173, 129, 112, 179, 168, 74, 216, 255, 60, 236, 228, 83, 83, 192, 195, 52, 31, 207, 0, 36, 26, 11, 48, 191, 73, 234, 22, 131, 92, 198, 118, 37, 122, 107, 106, 198, 210, 99, 217, 149, 229, 182, 130, 26, 205, 205, 45, 164, 189, 121, 164, 131, 174, 129, 207, 111, 64, 169, 148, 162, 45, 33, 70, 0, 28, 226, 239, 205, 187, 31, 30, 196, 228, 80, 89, 225, 28, 120, 38, 229, 253, 168, 46, 119, 28, 38, 100, 69, 211, 29, 55, 22, 58, 4, 108, 93, 246, 134, 175, 182, 168, 103, 207, 11, 106, 140, 30, 27, 144, 255, 22, 96, 124, 12, 13, 146, 185, 31, 177, 223, 207, 49, 73, 217, 212, 83, 18, 130, 120, 4, 62, 233, 165, 173, 148, 197, 128, 8, 106, 139, 51, 148, 48, 196, 228, 216, 1, 197, 122, 214, 20, 197, 203, 77, 136, 49, 251, 133, 106, 76, 104, 218, 62, 116, 93, 104, 211, 89, 2, 132, 63, 58, 33, 151, 7, 220, 53, 87, 23, 28, 205, 47, 252, 23, 159, 5, 74, 1, 44, 0, 246, 223, 74, 227, 254, 36, 49, 101, 58, 173, 145, 42, 105, 140, 129, 6, 164, 178, 34, 247, 20, 17, 101, 238, 35, 199, 14, 219, 218, 250, 243, 198, 106, 67, 89, 94, 53, 233, 180, 190, 175, 168, 72, 161, 38, 185, 151, 68, 115, 69, 3, 47, 170] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "CQXnTiez6XEKwz5GWDNVAc5sVBkh9iQZxceJbEPCkXvk", recipient: "CQXnTiez6XEKwz5GWDNVAc5sVBkh9iQZxceJbEPCkXvk", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "CQXnTiez6XEKwz5GWDNVAc5sVBkh9iQZxceJbEPCkXvk", recipient: "CQXnTiez6XEKwz5GWDNVAc5sVBkh9iQZxceJbEPCkXvk", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003584, batch_id: 118 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "CQXnTiez6XEKwz5GWDNVAc5sVBkh9iQZxceJbEPCkXvk", recipient: "CQXnTiez6XEKwz5GWDNVAc5sVBkh9iQZxceJbEPCkXvk", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003584, batch_id: 118 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Processing transaction: Transaction { sender: "E9bscP4RSrtrqCqnSy1w44CNDjSdiki21uhCqCMTsDxu", recipient: "E9bscP4RSrtrqCqnSy1w44CNDjSdiki21uhCqCMTsDxu", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "E9bscP4RSrtrqCqnSy1w44CNDjSdiki21uhCqCMTsDxu", recipient: "E9bscP4RSrtrqCqnSy1w44CNDjSdiki21uhCqCMTsDxu", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003584, batch_id: 119 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "E9bscP4RSrtrqCqnSy1w44CNDjSdiki21uhCqCMTsDxu", recipient: "E9bscP4RSrtrqCqnSy1w44CNDjSdiki21uhCqCMTsDxu", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003584, batch_id: 119 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (1782188233551786798021056806926195944670404776549944766642614196081720064690, 21791573640818887453973227556366791473650372242612783724911474180314135174475), b: (QuadExtField(19547018370273574283112248622782030141593319756189749962573628633847469043791 + 15373537632527303734934724926116767978484096383597845742310320287840460110386 * u), QuadExtField(5483894549527898297629020003358840066635610866167096242442399987996295971820 + 9829924919630827804678758081198655289123960542157543953473524882500860579171 * u)), c: (8790512679518260297828748842762513952133056864486968687648461657757284672811, 8001833088543032857589615821599681155901643974510618554968956632215885867286) }
Serialized proof bytes: [178, 122, 228, 44, 72, 109, 72, 8, 234, 29, 47, 49, 214, 68, 57, 44, 144, 56, 105, 83, 196, 2, 23, 183, 251, 16, 99, 147, 203, 174, 240, 3, 75, 157, 222, 151, 232, 184, 57, 118, 240, 166, 85, 181, 223, 225, 170, 170, 127, 27, 248, 234, 247, 187, 116, 197, 8, 248, 27, 209, 245, 151, 45, 176, 79, 240, 65, 233, 213, 38, 196, 2, 152, 59, 214, 190, 244, 92, 201, 21, 75, 222, 114, 222, 94, 163, 165, 249, 209, 68, 139, 170, 103, 56, 55, 43, 50, 122, 88, 56, 3, 40, 194, 185, 178, 88, 119, 249, 108, 211, 252, 214, 189, 26, 185, 169, 251, 26, 220, 55, 197, 149, 166, 113, 43, 29, 253, 33, 236, 67, 140, 79, 250, 188, 61, 166, 183, 3, 206, 229, 21, 52, 252, 49, 71, 145, 99, 231, 20, 244, 122, 175, 116, 35, 165, 237, 57, 198, 31, 12, 99, 13, 1, 213, 106, 213, 109, 34, 79, 45, 120, 7, 221, 178, 87, 144, 99, 123, 233, 87, 168, 82, 176, 12, 178, 67, 22, 186, 83, 138, 187, 21, 43, 165, 65, 35, 74, 154, 168, 82, 192, 157, 188, 185, 3, 30, 26, 121, 244, 114, 226, 144, 26, 254, 171, 202, 151, 125, 83, 252, 252, 64, 111, 19, 22, 105, 242, 162, 157, 170, 193, 57, 168, 3, 128, 247, 54, 125, 157, 56, 94, 37, 161, 233, 75, 50, 175, 97, 239, 209, 133, 22, 133, 224, 176, 17]
Proof generated: Proof { data: [178, 122, 228, 44, 72, 109, 72, 8, 234, 29, 47, 49, 214, 68, 57, 44, 144, 56, 105, 83, 196, 2, 23, 183, 251, 16, 99, 147, 203, 174, 240, 3, 75, 157, 222, 151, 232, 184, 57, 118, 240, 166, 85, 181, 223, 225, 170, 170, 127, 27, 248, 234, 247, 187, 116, 197, 8, 248, 27, 209, 245, 151, 45, 176, 79, 240, 65, 233, 213, 38, 196, 2, 152, 59, 214, 190, 244, 92, 201, 21, 75, 222, 114, 222, 94, 163, 165, 249, 209, 68, 139, 170, 103, 56, 55, 43, 50, 122, 88, 56, 3, 40, 194, 185, 178, 88, 119, 249, 108, 211, 252, 214, 189, 26, 185, 169, 251, 26, 220, 55, 197, 149, 166, 113, 43, 29, 253, 33, 236, 67, 140, 79, 250, 188, 61, 166, 183, 3, 206, 229, 21, 52, 252, 49, 71, 145, 99, 231, 20, 244, 122, 175, 116, 35, 165, 237, 57, 198, 31, 12, 99, 13, 1, 213, 106, 213, 109, 34, 79, 45, 120, 7, 221, 178, 87, 144, 99, 123, 233, 87, 168, 82, 176, 12, 178, 67, 22, 186, 83, 138, 187, 21, 43, 165, 65, 35, 74, 154, 168, 82, 192, 157, 188, 185, 3, 30, 26, 121, 244, 114, 226, 144, 26, 254, 171, 202, 151, 125, 83, 252, 252, 64, 111, 19, 22, 105, 242, 162, 157, 170, 193, 57, 168, 3, 128, 247, 54, 125, 157, 56, 94, 37, 161, 233, 75, 50, 175, 97, 239, 209, 133, 22, 133, 224, 176, 17] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [178, 122, 228, 44, 72, 109, 72, 8, 234, 29, 47, 49, 214, 68, 57, 44, 144, 56, 105, 83, 196, 2, 23, 183, 251, 16, 99, 147, 203, 174, 240, 3, 75, 157, 222, 151, 232, 184, 57, 118, 240, 166, 85, 181, 223, 225, 170, 170, 127, 27, 248, 234, 247, 187, 116, 197, 8, 248, 27, 209, 245, 151, 45, 176, 79, 240, 65, 233, 213, 38, 196, 2, 152, 59, 214, 190, 244, 92, 201, 21, 75, 222, 114, 222, 94, 163, 165, 249, 209, 68, 139, 170, 103, 56, 55, 43, 50, 122, 88, 56, 3, 40, 194, 185, 178, 88, 119, 249, 108, 211, 252, 214, 189, 26, 185, 169, 251, 26, 220, 55, 197, 149, 166, 113, 43, 29, 253, 33, 236, 67, 140, 79, 250, 188, 61, 166, 183, 3, 206, 229, 21, 52, 252, 49, 71, 145, 99, 231, 20, 244, 122, 175, 116, 35, 165, 237, 57, 198, 31, 12, 99, 13, 1, 213, 106, 213, 109, 34, 79, 45, 120, 7, 221, 178, 87, 144, 99, 123, 233, 87, 168, 82, 176, 12, 178, 67, 22, 186, 83, 138, 187, 21, 43, 165, 65, 35, 74, 154, 168, 82, 192, 157, 188, 185, 3, 30, 26, 121, 244, 114, 226, 144, 26, 254, 171, 202, 151, 125, 83, 252, 252, 64, 111, 19, 22, 105, 242, 162, 157, 170, 193, 57, 168, 3, 128, 247, 54, 125, 157, 56, 94, 37, 161, 233, 75, 50, 175, 97, 239, 209, 133, 22, 133, 224, 176, 17] }
Generated Groth16 proof: Proof { a: (2988554978401893589391355265631632277685312218973244683940373662769528587310, 7656377571494086238793708416030687367210834304375464723783959565036051225400), b: (QuadExtField(4373356627442666231838925583746543801643693740411686323299226597721450852975 + 17853041653257521313609133472607643319021414751212468392653584378874624784087 * u), QuadExtField(17903780499648831074059158827615705013195356012893998407249072646143922814702 + 17308479360266508060585966415800846126835989979124576862055429472784300859421 * u)), c: (20895291006882985354401873412882760607053707323318886751871178252893523001477, 5616410089830468438408666802031089350792400773760991621906989335342280005076) }
Serialized proof bytes: [46, 68, 154, 119, 216, 188, 48, 142, 166, 213, 1, 127, 155, 192, 76, 81, 113, 148, 127, 150, 81, 212, 48, 160, 209, 199, 87, 19, 81, 118, 155, 6, 56, 219, 115, 89, 237, 33, 211, 231, 8, 210, 20, 28, 76, 64, 44, 151, 31, 186, 206, 161, 139, 105, 24, 115, 113, 236, 60, 205, 43, 91, 237, 16, 111, 178, 169, 161, 90, 231, 70, 100, 125, 162, 147, 186, 119, 110, 51, 105, 205, 22, 192, 91, 188, 200, 193, 96, 235, 218, 63, 4, 109, 59, 171, 9, 215, 182, 84, 151, 196, 35, 12, 113, 123, 114, 220, 174, 235, 134, 217, 158, 222, 108, 71, 83, 67, 59, 63, 89, 18, 217, 96, 22, 167, 118, 120, 39, 238, 62, 118, 33, 5, 223, 252, 43, 126, 32, 122, 166, 119, 116, 200, 126, 75, 150, 176, 23, 251, 144, 229, 237, 25, 242, 160, 127, 63, 46, 149, 39, 29, 96, 47, 194, 228, 200, 160, 22, 176, 202, 176, 92, 140, 197, 94, 49, 218, 83, 170, 246, 240, 254, 252, 222, 253, 239, 126, 5, 141, 64, 68, 166, 133, 192, 59, 177, 214, 249, 6, 2, 32, 73, 89, 223, 213, 44, 80, 186, 110, 147, 202, 64, 19, 80, 153, 119, 168, 13, 57, 59, 203, 80, 50, 46, 212, 213, 94, 57, 50, 153, 152, 50, 192, 240, 37, 36, 75, 31, 148, 173, 56, 227, 54, 215, 175, 41, 207, 145, 61, 63, 244, 127, 132, 198, 106, 12]
Proof generated: Proof { data: [46, 68, 154, 119, 216, 188, 48, 142, 166, 213, 1, 127, 155, 192, 76, 81, 113, 148, 127, 150, 81, 212, 48, 160, 209, 199, 87, 19, 81, 118, 155, 6, 56, 219, 115, 89, 237, 33, 211, 231, 8, 210, 20, 28, 76, 64, 44, 151, 31, 186, 206, 161, 139, 105, 24, 115, 113, 236, 60, 205, 43, 91, 237, 16, 111, 178, 169, 161, 90, 231, 70, 100, 125, 162, 147, 186, 119, 110, 51, 105, 205, 22, 192, 91, 188, 200, 193, 96, 235, 218, 63, 4, 109, 59, 171, 9, 215, 182, 84, 151, 196, 35, 12, 113, 123, 114, 220, 174, 235, 134, 217, 158, 222, 108, 71, 83, 67, 59, 63, 89, 18, 217, 96, 22, 167, 118, 120, 39, 238, 62, 118, 33, 5, 223, 252, 43, 126, 32, 122, 166, 119, 116, 200, 126, 75, 150, 176, 23, 251, 144, 229, 237, 25, 242, 160, 127, 63, 46, 149, 39, 29, 96, 47, 194, 228, 200, 160, 22, 176, 202, 176, 92, 140, 197, 94, 49, 218, 83, 170, 246, 240, 254, 252, 222, 253, 239, 126, 5, 141, 64, 68, 166, 133, 192, 59, 177, 214, 249, 6, 2, 32, 73, 89, 223, 213, 44, 80, 186, 110, 147, 202, 64, 19, 80, 153, 119, 168, 13, 57, 59, 203, 80, 50, 46, 212, 213, 94, 57, 50, 153, 152, 50, 192, 240, 37, 36, 75, 31, 148, 173, 56, 227, 54, 215, 175, 41, 207, 145, 61, 63, 244, 127, 132, 198, 106, 12] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [46, 68, 154, 119, 216, 188, 48, 142, 166, 213, 1, 127, 155, 192, 76, 81, 113, 148, 127, 150, 81, 212, 48, 160, 209, 199, 87, 19, 81, 118, 155, 6, 56, 219, 115, 89, 237, 33, 211, 231, 8, 210, 20, 28, 76, 64, 44, 151, 31, 186, 206, 161, 139, 105, 24, 115, 113, 236, 60, 205, 43, 91, 237, 16, 111, 178, 169, 161, 90, 231, 70, 100, 125, 162, 147, 186, 119, 110, 51, 105, 205, 22, 192, 91, 188, 200, 193, 96, 235, 218, 63, 4, 109, 59, 171, 9, 215, 182, 84, 151, 196, 35, 12, 113, 123, 114, 220, 174, 235, 134, 217, 158, 222, 108, 71, 83, 67, 59, 63, 89, 18, 217, 96, 22, 167, 118, 120, 39, 238, 62, 118, 33, 5, 223, 252, 43, 126, 32, 122, 166, 119, 116, 200, 126, 75, 150, 176, 23, 251, 144, 229, 237, 25, 242, 160, 127, 63, 46, 149, 39, 29, 96, 47, 194, 228, 200, 160, 22, 176, 202, 176, 92, 140, 197, 94, 49, 218, 83, 170, 246, 240, 254, 252, 222, 253, 239, 126, 5, 141, 64, 68, 166, 133, 192, 59, 177, 214, 249, 6, 2, 32, 73, 89, 223, 213, 44, 80, 186, 110, 147, 202, 64, 19, 80, 153, 119, 168, 13, 57, 59, 203, 80, 50, 46, 212, 213, 94, 57, 50, 153, 152, 50, 192, 240, 37, 36, 75, 31, 148, 173, 56, 227, 54, 215, 175, 41, 207, 145, 61, 63, 244, 127, 132, 198, 106, 12] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [178, 122, 228, 44, 72, 109, 72, 8, 234, 29, 47, 49, 214, 68, 57, 44, 144, 56, 105, 83, 196, 2, 23, 183, 251, 16, 99, 147, 203, 174, 240, 3, 75, 157, 222, 151, 232, 184, 57, 118, 240, 166, 85, 181, 223, 225, 170, 170, 127, 27, 248, 234, 247, 187, 116, 197, 8, 248, 27, 209, 245, 151, 45, 176, 79, 240, 65, 233, 213, 38, 196, 2, 152, 59, 214, 190, 244, 92, 201, 21, 75, 222, 114, 222, 94, 163, 165, 249, 209, 68, 139, 170, 103, 56, 55, 43, 50, 122, 88, 56, 3, 40, 194, 185, 178, 88, 119, 249, 108, 211, 252, 214, 189, 26, 185, 169, 251, 26, 220, 55, 197, 149, 166, 113, 43, 29, 253, 33, 236, 67, 140, 79, 250, 188, 61, 166, 183, 3, 206, 229, 21, 52, 252, 49, 71, 145, 99, 231, 20, 244, 122, 175, 116, 35, 165, 237, 57, 198, 31, 12, 99, 13, 1, 213, 106, 213, 109, 34, 79, 45, 120, 7, 221, 178, 87, 144, 99, 123, 233, 87, 168, 82, 176, 12, 178, 67, 22, 186, 83, 138, 187, 21, 43, 165, 65, 35, 74, 154, 168, 82, 192, 157, 188, 185, 3, 30, 26, 121, 244, 114, 226, 144, 26, 254, 171, 202, 151, 125, 83, 252, 252, 64, 111, 19, 22, 105, 242, 162, 157, 170, 193, 57, 168, 3, 128, 247, 54, 125, 157, 56, 94, 37, 161, 233, 75, 50, 175, 97, 239, 209, 133, 22, 133, 224, 176, 17] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "AS66aHQpM49HNUd1TGfapZBXUWTZaubmKjdc4oe7G4t2", recipient: "AS66aHQpM49HNUd1TGfapZBXUWTZaubmKjdc4oe7G4t2", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "AS66aHQpM49HNUd1TGfapZBXUWTZaubmKjdc4oe7G4t2", recipient: "AS66aHQpM49HNUd1TGfapZBXUWTZaubmKjdc4oe7G4t2", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003584, batch_id: 120 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "AS66aHQpM49HNUd1TGfapZBXUWTZaubmKjdc4oe7G4t2", recipient: "AS66aHQpM49HNUd1TGfapZBXUWTZaubmKjdc4oe7G4t2", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003584, batch_id: 120 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [46, 68, 154, 119, 216, 188, 48, 142, 166, 213, 1, 127, 155, 192, 76, 81, 113, 148, 127, 150, 81, 212, 48, 160, 209, 199, 87, 19, 81, 118, 155, 6, 56, 219, 115, 89, 237, 33, 211, 231, 8, 210, 20, 28, 76, 64, 44, 151, 31, 186, 206, 161, 139, 105, 24, 115, 113, 236, 60, 205, 43, 91, 237, 16, 111, 178, 169, 161, 90, 231, 70, 100, 125, 162, 147, 186, 119, 110, 51, 105, 205, 22, 192, 91, 188, 200, 193, 96, 235, 218, 63, 4, 109, 59, 171, 9, 215, 182, 84, 151, 196, 35, 12, 113, 123, 114, 220, 174, 235, 134, 217, 158, 222, 108, 71, 83, 67, 59, 63, 89, 18, 217, 96, 22, 167, 118, 120, 39, 238, 62, 118, 33, 5, 223, 252, 43, 126, 32, 122, 166, 119, 116, 200, 126, 75, 150, 176, 23, 251, 144, 229, 237, 25, 242, 160, 127, 63, 46, 149, 39, 29, 96, 47, 194, 228, 200, 160, 22, 176, 202, 176, 92, 140, 197, 94, 49, 218, 83, 170, 246, 240, 254, 252, 222, 253, 239, 126, 5, 141, 64, 68, 166, 133, 192, 59, 177, 214, 249, 6, 2, 32, 73, 89, 223, 213, 44, 80, 186, 110, 147, 202, 64, 19, 80, 153, 119, 168, 13, 57, 59, 203, 80, 50, 46, 212, 213, 94, 57, 50, 153, 152, 50, 192, 240, 37, 36, 75, 31, 148, 173, 56, 227, 54, 215, 175, 41, 207, 145, 61, 63, 244, 127, 132, 198, 106, 12] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Generated Groth16 proof: Proof { a: (2117422888071165157354411563341105061047878427276415318244782015125815039623, 8949326896040951621768489497965827169061440206645550783080128538666148302706), b: (QuadExtField(298087681179377594761807909583232631402318345371689429212400333637912090647 + 14213193991417956644499836076195446425803726696997961481435814504449736574262 * u), QuadExtField(12727083030223563181002620406490816617515998692126475711591984832919593803510 + 3245201776933010560444337665045050210377399957064933848905083251358792538562 * u)), c: (2752341541264515749628380790096843956336009898088086119501612768939441901512, 10966327853788073956217968833634441369972163594196252505280101810204101386107) }
Serialized proof bytes: [135, 22, 64, 12, 250, 66, 54, 200, 166, 103, 148, 237, 170, 233, 234, 107, 221, 245, 197, 77, 22, 22, 154, 191, 76, 36, 26, 0, 60, 107, 174, 4, 114, 15, 76, 136, 144, 58, 148, 21, 254, 14, 226, 247, 114, 142, 226, 149, 92, 45, 108, 200, 174, 231, 34, 221, 35, 159, 78, 172, 183, 35, 201, 19, 23, 216, 83, 17, 62, 222, 94, 130, 92, 174, 229, 87, 221, 241, 193, 160, 80, 175, 124, 65, 252, 203, 234, 213, 201, 178, 208, 154, 46, 182, 168, 0, 54, 5, 18, 237, 174, 1, 189, 126, 85, 23, 5, 145, 210, 208, 109, 168, 141, 221, 165, 43, 129, 234, 14, 218, 133, 164, 34, 189, 249, 97, 108, 31, 246, 222, 187, 56, 100, 22, 101, 170, 185, 105, 76, 112, 80, 30, 212, 107, 156, 156, 11, 70, 117, 144, 15, 65, 215, 210, 101, 143, 18, 70, 35, 28, 194, 217, 105, 171, 84, 87, 76, 176, 182, 220, 71, 129, 26, 41, 1, 66, 173, 210, 50, 119, 161, 71, 219, 191, 243, 8, 135, 233, 23, 184, 44, 7, 200, 207, 231, 253, 125, 153, 69, 153, 30, 138, 136, 158, 118, 214, 9, 220, 174, 38, 152, 78, 213, 13, 253, 162, 89, 208, 139, 188, 37, 197, 21, 6, 123, 31, 249, 52, 93, 224, 246, 133, 114, 72, 174, 130, 33, 93, 125, 201, 139, 59, 195, 133, 42, 154, 174, 71, 226, 120, 219, 65, 187, 184, 62, 152]
Proof generated: Proof { data: [135, 22, 64, 12, 250, 66, 54, 200, 166, 103, 148, 237, 170, 233, 234, 107, 221, 245, 197, 77, 22, 22, 154, 191, 76, 36, 26, 0, 60, 107, 174, 4, 114, 15, 76, 136, 144, 58, 148, 21, 254, 14, 226, 247, 114, 142, 226, 149, 92, 45, 108, 200, 174, 231, 34, 221, 35, 159, 78, 172, 183, 35, 201, 19, 23, 216, 83, 17, 62, 222, 94, 130, 92, 174, 229, 87, 221, 241, 193, 160, 80, 175, 124, 65, 252, 203, 234, 213, 201, 178, 208, 154, 46, 182, 168, 0, 54, 5, 18, 237, 174, 1, 189, 126, 85, 23, 5, 145, 210, 208, 109, 168, 141, 221, 165, 43, 129, 234, 14, 218, 133, 164, 34, 189, 249, 97, 108, 31, 246, 222, 187, 56, 100, 22, 101, 170, 185, 105, 76, 112, 80, 30, 212, 107, 156, 156, 11, 70, 117, 144, 15, 65, 215, 210, 101, 143, 18, 70, 35, 28, 194, 217, 105, 171, 84, 87, 76, 176, 182, 220, 71, 129, 26, 41, 1, 66, 173, 210, 50, 119, 161, 71, 219, 191, 243, 8, 135, 233, 23, 184, 44, 7, 200, 207, 231, 253, 125, 153, 69, 153, 30, 138, 136, 158, 118, 214, 9, 220, 174, 38, 152, 78, 213, 13, 253, 162, 89, 208, 139, 188, 37, 197, 21, 6, 123, 31, 249, 52, 93, 224, 246, 133, 114, 72, 174, 130, 33, 93, 125, 201, 139, 59, 195, 133, 42, 154, 174, 71, 226, 120, 219, 65, 187, 184, 62, 152] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [135, 22, 64, 12, 250, 66, 54, 200, 166, 103, 148, 237, 170, 233, 234, 107, 221, 245, 197, 77, 22, 22, 154, 191, 76, 36, 26, 0, 60, 107, 174, 4, 114, 15, 76, 136, 144, 58, 148, 21, 254, 14, 226, 247, 114, 142, 226, 149, 92, 45, 108, 200, 174, 231, 34, 221, 35, 159, 78, 172, 183, 35, 201, 19, 23, 216, 83, 17, 62, 222, 94, 130, 92, 174, 229, 87, 221, 241, 193, 160, 80, 175, 124, 65, 252, 203, 234, 213, 201, 178, 208, 154, 46, 182, 168, 0, 54, 5, 18, 237, 174, 1, 189, 126, 85, 23, 5, 145, 210, 208, 109, 168, 141, 221, 165, 43, 129, 234, 14, 218, 133, 164, 34, 189, 249, 97, 108, 31, 246, 222, 187, 56, 100, 22, 101, 170, 185, 105, 76, 112, 80, 30, 212, 107, 156, 156, 11, 70, 117, 144, 15, 65, 215, 210, 101, 143, 18, 70, 35, 28, 194, 217, 105, 171, 84, 87, 76, 176, 182, 220, 71, 129, 26, 41, 1, 66, 173, 210, 50, 119, 161, 71, 219, 191, 243, 8, 135, 233, 23, 184, 44, 7, 200, 207, 231, 253, 125, 153, 69, 153, 30, 138, 136, 158, 118, 214, 9, 220, 174, 38, 152, 78, 213, 13, 253, 162, 89, 208, 139, 188, 37, 197, 21, 6, 123, 31, 249, 52, 93, 224, 246, 133, 114, 72, 174, 130, 33, 93, 125, 201, 139, 59, 195, 133, 42, 154, 174, 71, 226, 120, 219, 65, 187, 184, 62, 152] }
Processing transaction: Transaction { sender: "CyEDdNXfcFTW1HHbKJ1GrvK9XEfgdJT3Q7CWxV7vsJpG", recipient: "CyEDdNXfcFTW1HHbKJ1GrvK9XEfgdJT3Q7CWxV7vsJpG", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "CyEDdNXfcFTW1HHbKJ1GrvK9XEfgdJT3Q7CWxV7vsJpG", recipient: "CyEDdNXfcFTW1HHbKJ1GrvK9XEfgdJT3Q7CWxV7vsJpG", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003584, batch_id: 122 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "CyEDdNXfcFTW1HHbKJ1GrvK9XEfgdJT3Q7CWxV7vsJpG", recipient: "CyEDdNXfcFTW1HHbKJ1GrvK9XEfgdJT3Q7CWxV7vsJpG", amount: 0, nonce: 1 }], programs: [], timestamp: 1729003584, batch_id: 122 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (15006028186478737799358852278369228005730469182469486430305770756976823585847, 18833532900480657316589122051038269828784464267343426881710480449880498271427), b: (QuadExtField(9465523083608849502167497700595275653268815232595134339480253776596997995811 + 13266582694264988858164522219990383884025833819024918203738284554810151542254 * u), QuadExtField(10762354315420425035323291349700590187385778631646239931260645424535696251529 + 2209689663486815872838362817823535210085637225698869170561806129919164076143 * u)), c: (2119287203025613293176422823724366945088597309516623196165947993074731822677, 4658032184857995421163920017524672811702009996544779720162200872094636858182) }
Serialized proof bytes: [55, 76, 157, 144, 121, 178, 234, 82, 12, 156, 183, 23, 184, 91, 59, 71, 152, 196, 141, 52, 225, 238, 36, 105, 176, 106, 125, 119, 104, 28, 45, 33, 195, 116, 114, 209, 77, 216, 16, 134, 23, 101, 74, 1, 95, 133, 71, 78, 150, 122, 93, 216, 19, 177, 208, 4, 46, 151, 130, 188, 224, 102, 163, 169, 35, 125, 191, 147, 169, 254, 100, 202, 6, 49, 53, 158, 39, 42, 133, 172, 120, 1, 249, 160, 109, 77, 176, 143, 139, 5, 118, 105, 212, 75, 237, 20, 238, 29, 94, 135, 65, 199, 234, 144, 126, 117, 179, 222, 29, 9, 7, 97, 178, 218, 20, 106, 43, 46, 96, 171, 92, 37, 30, 72, 165, 158, 84, 29, 137, 26, 239, 51, 35, 234, 89, 31, 232, 242, 75, 212, 195, 63, 74, 166, 201, 177, 64, 119, 169, 205, 139, 82, 98, 233, 241, 57, 212, 70, 203, 23, 111, 208, 250, 239, 195, 68, 215, 77, 141, 64, 208, 44, 232, 215, 60, 225, 78, 145, 140, 28, 65, 143, 77, 246, 4, 134, 190, 232, 216, 163, 226, 4, 85, 174, 223, 201, 22, 223, 228, 42, 236, 105, 41, 105, 213, 34, 141, 152, 24, 186, 19, 144, 111, 215, 164, 227, 223, 47, 13, 73, 91, 121, 175, 4, 70, 91, 102, 16, 238, 34, 88, 221, 112, 92, 35, 251, 197, 205, 53, 126, 222, 112, 190, 201, 61, 254, 84, 217, 239, 165, 63, 77, 80, 90, 76, 10]
Proof generated: Proof { data: [55, 76, 157, 144, 121, 178, 234, 82, 12, 156, 183, 23, 184, 91, 59, 71, 152, 196, 141, 52, 225, 238, 36, 105, 176, 106, 125, 119, 104, 28, 45, 33, 195, 116, 114, 209, 77, 216, 16, 134, 23, 101, 74, 1, 95, 133, 71, 78, 150, 122, 93, 216, 19, 177, 208, 4, 46, 151, 130, 188, 224, 102, 163, 169, 35, 125, 191, 147, 169, 254, 100, 202, 6, 49, 53, 158, 39, 42, 133, 172, 120, 1, 249, 160, 109, 77, 176, 143, 139, 5, 118, 105, 212, 75, 237, 20, 238, 29, 94, 135, 65, 199, 234, 144, 126, 117, 179, 222, 29, 9, 7, 97, 178, 218, 20, 106, 43, 46, 96, 171, 92, 37, 30, 72, 165, 158, 84, 29, 137, 26, 239, 51, 35, 234, 89, 31, 232, 242, 75, 212, 195, 63, 74, 166, 201, 177, 64, 119, 169, 205, 139, 82, 98, 233, 241, 57, 212, 70, 203, 23, 111, 208, 250, 239, 195, 68, 215, 77, 141, 64, 208, 44, 232, 215, 60, 225, 78, 145, 140, 28, 65, 143, 77, 246, 4, 134, 190, 232, 216, 163, 226, 4, 85, 174, 223, 201, 22, 223, 228, 42, 236, 105, 41, 105, 213, 34, 141, 152, 24, 186, 19, 144, 111, 215, 164, 227, 223, 47, 13, 73, 91, 121, 175, 4, 70, 91, 102, 16, 238, 34, 88, 221, 112, 92, 35, 251, 197, 205, 53, 126, 222, 112, 190, 201, 61, 254, 84, 217, 239, 165, 63, 77, 80, 90, 76, 10] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [55, 76, 157, 144, 121, 178, 234, 82, 12, 156, 183, 23, 184, 91, 59, 71, 152, 196, 141, 52, 225, 238, 36, 105, 176, 106, 125, 119, 104, 28, 45, 33, 195, 116, 114, 209, 77, 216, 16, 134, 23, 101, 74, 1, 95, 133, 71, 78, 150, 122, 93, 216, 19, 177, 208, 4, 46, 151, 130, 188, 224, 102, 163, 169, 35, 125, 191, 147, 169, 254, 100, 202, 6, 49, 53, 158, 39, 42, 133, 172, 120, 1, 249, 160, 109, 77, 176, 143, 139, 5, 118, 105, 212, 75, 237, 20, 238, 29, 94, 135, 65, 199, 234, 144, 126, 117, 179, 222, 29, 9, 7, 97, 178, 218, 20, 106, 43, 46, 96, 171, 92, 37, 30, 72, 165, 158, 84, 29, 137, 26, 239, 51, 35, 234, 89, 31, 232, 242, 75, 212, 195, 63, 74, 166, 201, 177, 64, 119, 169, 205, 139, 82, 98, 233, 241, 57, 212, 70, 203, 23, 111, 208, 250, 239, 195, 68, 215, 77, 141, 64, 208, 44, 232, 215, 60, 225, 78, 145, 140, 28, 65, 143, 77, 246, 4, 134, 190, 232, 216, 163, 226, 4, 85, 174, 223, 201, 22, 223, 228, 42, 236, 105, 41, 105, 213, 34, 141, 152, 24, 186, 19, 144, 111, 215, 164, 227, 223, 47, 13, 73, 91, 121, 175, 4, 70, 91, 102, 16, 238, 34, 88, 221, 112, 92, 35, 251, 197, 205, 53, 126, 222, 112, 190, 201, 61, 254, 84, 217, 239, 165, 63, 77, 80, 90, 76, 10] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [135, 22, 64, 12, 250, 66, 54, 200, 166, 103, 148, 237, 170, 233, 234, 107, 221, 245, 197, 77, 22, 22, 154, 191, 76, 36, 26, 0, 60, 107, 174, 4, 114, 15, 76, 136, 144, 58, 148, 21, 254, 14, 226, 247, 114, 142, 226, 149, 92, 45, 108, 200, 174, 231, 34, 221, 35, 159, 78, 172, 183, 35, 201, 19, 23, 216, 83, 17, 62, 222, 94, 130, 92, 174, 229, 87, 221, 241, 193, 160, 80, 175, 124, 65, 252, 203, 234, 213, 201, 178, 208, 154, 46, 182, 168, 0, 54, 5, 18, 237, 174, 1, 189, 126, 85, 23, 5, 145, 210, 208, 109, 168, 141, 221, 165, 43, 129, 234, 14, 218, 133, 164, 34, 189, 249, 97, 108, 31, 246, 222, 187, 56, 100, 22, 101, 170, 185, 105, 76, 112, 80, 30, 212, 107, 156, 156, 11, 70, 117, 144, 15, 65, 215, 210, 101, 143, 18, 70, 35, 28, 194, 217, 105, 171, 84, 87, 76, 176, 182, 220, 71, 129, 26, 41, 1, 66, 173, 210, 50, 119, 161, 71, 219, 191, 243, 8, 135, 233, 23, 184, 44, 7, 200, 207, 231, 253, 125, 153, 69, 153, 30, 138, 136, 158, 118, 214, 9, 220, 174, 38, 152, 78, 213, 13, 253, 162, 89, 208, 139, 188, 37, 197, 21, 6, 123, 31, 249, 52, 93, 224, 246, 133, 114, 72, 174, 130, 33, 93, 125, 201, 139, 59, 195, 133, 42, 154, 174, 71, 226, 120, 219, 65, 187, 184, 62, 152] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [55, 76, 157, 144, 121, 178, 234, 82, 12, 156, 183, 23, 184, 91, 59, 71, 152, 196, 141, 52, 225, 238, 36, 105, 176, 106, 125, 119, 104, 28, 45, 33, 195, 116, 114, 209, 77, 216, 16, 134, 23, 101, 74, 1, 95, 133, 71, 78, 150, 122, 93, 216, 19, 177, 208, 4, 46, 151, 130, 188, 224, 102, 163, 169, 35, 125, 191, 147, 169, 254, 100, 202, 6, 49, 53, 158, 39, 42, 133, 172, 120, 1, 249, 160, 109, 77, 176, 143, 139, 5, 118, 105, 212, 75, 237, 20, 238, 29, 94, 135, 65, 199, 234, 144, 126, 117, 179, 222, 29, 9, 7, 97, 178, 218, 20, 106, 43, 46, 96, 171, 92, 37, 30, 72, 165, 158, 84, 29, 137, 26, 239, 51, 35, 234, 89, 31, 232, 242, 75, 212, 195, 63, 74, 166, 201, 177, 64, 119, 169, 205, 139, 82, 98, 233, 241, 57, 212, 70, 203, 23, 111, 208, 250, 239, 195, 68, 215, 77, 141, 64, 208, 44, 232, 215, 60, 225, 78, 145, 140, 28, 65, 143, 77, 246, 4, 134, 190, 232, 216, 163, 226, 4, 85, 174, 223, 201, 22, 223, 228, 42, 236, 105, 41, 105, 213, 34, 141, 152, 24, 186, 19, 144, 111, 215, 164, 227, 223, 47, 13, 73, 91, 121, 175, 4, 70, 91, 102, 16, 238, 34, 88, 221, 112, 92, 35, 251, 197, 205, 53, 126, 222, 112, 190, 201, 61, 254, 84, 217, 239, 165, 63, 77, 80, 90, 76, 10] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "Bpz9gVR2LPqkXvmKB8MGJqF4p88XzWPi1w77YvomW5yk", recipient: "Bpz9gVR2LPqkXvmKB8MGJqF4p88XzWPi1w77YvomW5yk", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "Bpz9gVR2LPqkXvmKB8MGJqF4p88XzWPi1w77YvomW5yk", recipient: "Bpz9gVR2LPqkXvmKB8MGJqF4p88XzWPi1w77YvomW5yk", amount: 0, nonce: 1 }], programs: [], timestamp: 1729005184, batch_id: 124 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "Bpz9gVR2LPqkXvmKB8MGJqF4p88XzWPi1w77YvomW5yk", recipient: "Bpz9gVR2LPqkXvmKB8MGJqF4p88XzWPi1w77YvomW5yk", amount: 0, nonce: 1 }], programs: [], timestamp: 1729005184, batch_id: 124 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (8261923647410169232632218952888203141150184024077628178417083523763058934492, 4076687029063293634584016780246984138771300392448638540182616870590746455215), b: (QuadExtField(11744818054453446584333088291904395183981574403444963880559285934306880510484 + 15214898504846622088320535432066140587343236607795388480260734238848507124404 * u), QuadExtField(10084337134968242728755183228109601479273662197281972766893805140512874865326 + 20676697235297661615988505615844981267716186451151252225931294155651984233845 * u)), c: (13376111330081757432198453642804595178923800241691059638544110209410086114438, 3131924381478397153402829383746640390041159791615775207323653315042695526616) }
Serialized proof bytes: [220, 130, 146, 180, 234, 212, 172, 103, 54, 65, 173, 245, 114, 43, 74, 20, 237, 32, 31, 34, 145, 125, 172, 86, 42, 53, 71, 24, 68, 21, 68, 18, 175, 236, 107, 138, 10, 241, 88, 116, 150, 126, 90, 232, 222, 228, 87, 96, 161, 33, 179, 145, 231, 69, 200, 153, 115, 18, 187, 6, 182, 82, 3, 9, 20, 218, 17, 67, 186, 63, 168, 44, 23, 202, 109, 183, 188, 227, 200, 56, 169, 81, 88, 130, 49, 251, 217, 106, 221, 124, 175, 169, 217, 84, 247, 25, 180, 26, 31, 91, 177, 50, 74, 231, 122, 13, 172, 198, 237, 120, 161, 3, 45, 40, 56, 54, 207, 150, 121, 161, 37, 109, 161, 41, 207, 83, 163, 33, 174, 162, 194, 22, 144, 237, 142, 94, 227, 155, 29, 162, 68, 65, 159, 224, 101, 60, 219, 111, 103, 71, 76, 228, 222, 22, 44, 68, 85, 136, 75, 22, 117, 149, 125, 72, 78, 42, 183, 65, 109, 118, 139, 45, 246, 190, 25, 93, 56, 43, 162, 242, 120, 1, 51, 202, 210, 81, 85, 156, 141, 152, 182, 173, 134, 148, 86, 253, 100, 195, 192, 72, 102, 67, 29, 97, 178, 151, 17, 85, 222, 4, 213, 35, 231, 146, 110, 188, 89, 213, 157, 45, 88, 156, 146, 29, 216, 56, 213, 155, 130, 178, 37, 62, 159, 193, 216, 147, 203, 95, 63, 12, 208, 97, 46, 188, 163, 87, 204, 54, 52, 203, 236, 202, 59, 155, 236, 6]
Proof generated: Proof { data: [220, 130, 146, 180, 234, 212, 172, 103, 54, 65, 173, 245, 114, 43, 74, 20, 237, 32, 31, 34, 145, 125, 172, 86, 42, 53, 71, 24, 68, 21, 68, 18, 175, 236, 107, 138, 10, 241, 88, 116, 150, 126, 90, 232, 222, 228, 87, 96, 161, 33, 179, 145, 231, 69, 200, 153, 115, 18, 187, 6, 182, 82, 3, 9, 20, 218, 17, 67, 186, 63, 168, 44, 23, 202, 109, 183, 188, 227, 200, 56, 169, 81, 88, 130, 49, 251, 217, 106, 221, 124, 175, 169, 217, 84, 247, 25, 180, 26, 31, 91, 177, 50, 74, 231, 122, 13, 172, 198, 237, 120, 161, 3, 45, 40, 56, 54, 207, 150, 121, 161, 37, 109, 161, 41, 207, 83, 163, 33, 174, 162, 194, 22, 144, 237, 142, 94, 227, 155, 29, 162, 68, 65, 159, 224, 101, 60, 219, 111, 103, 71, 76, 228, 222, 22, 44, 68, 85, 136, 75, 22, 117, 149, 125, 72, 78, 42, 183, 65, 109, 118, 139, 45, 246, 190, 25, 93, 56, 43, 162, 242, 120, 1, 51, 202, 210, 81, 85, 156, 141, 152, 182, 173, 134, 148, 86, 253, 100, 195, 192, 72, 102, 67, 29, 97, 178, 151, 17, 85, 222, 4, 213, 35, 231, 146, 110, 188, 89, 213, 157, 45, 88, 156, 146, 29, 216, 56, 213, 155, 130, 178, 37, 62, 159, 193, 216, 147, 203, 95, 63, 12, 208, 97, 46, 188, 163, 87, 204, 54, 52, 203, 236, 202, 59, 155, 236, 6] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [220, 130, 146, 180, 234, 212, 172, 103, 54, 65, 173, 245, 114, 43, 74, 20, 237, 32, 31, 34, 145, 125, 172, 86, 42, 53, 71, 24, 68, 21, 68, 18, 175, 236, 107, 138, 10, 241, 88, 116, 150, 126, 90, 232, 222, 228, 87, 96, 161, 33, 179, 145, 231, 69, 200, 153, 115, 18, 187, 6, 182, 82, 3, 9, 20, 218, 17, 67, 186, 63, 168, 44, 23, 202, 109, 183, 188, 227, 200, 56, 169, 81, 88, 130, 49, 251, 217, 106, 221, 124, 175, 169, 217, 84, 247, 25, 180, 26, 31, 91, 177, 50, 74, 231, 122, 13, 172, 198, 237, 120, 161, 3, 45, 40, 56, 54, 207, 150, 121, 161, 37, 109, 161, 41, 207, 83, 163, 33, 174, 162, 194, 22, 144, 237, 142, 94, 227, 155, 29, 162, 68, 65, 159, 224, 101, 60, 219, 111, 103, 71, 76, 228, 222, 22, 44, 68, 85, 136, 75, 22, 117, 149, 125, 72, 78, 42, 183, 65, 109, 118, 139, 45, 246, 190, 25, 93, 56, 43, 162, 242, 120, 1, 51, 202, 210, 81, 85, 156, 141, 152, 182, 173, 134, 148, 86, 253, 100, 195, 192, 72, 102, 67, 29, 97, 178, 151, 17, 85, 222, 4, 213, 35, 231, 146, 110, 188, 89, 213, 157, 45, 88, 156, 146, 29, 216, 56, 213, 155, 130, 178, 37, 62, 159, 193, 216, 147, 203, 95, 63, 12, 208, 97, 46, 188, 163, 87, 204, 54, 52, 203, 236, 202, 59, 155, 236, 6] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [220, 130, 146, 180, 234, 212, 172, 103, 54, 65, 173, 245, 114, 43, 74, 20, 237, 32, 31, 34, 145, 125, 172, 86, 42, 53, 71, 24, 68, 21, 68, 18, 175, 236, 107, 138, 10, 241, 88, 116, 150, 126, 90, 232, 222, 228, 87, 96, 161, 33, 179, 145, 231, 69, 200, 153, 115, 18, 187, 6, 182, 82, 3, 9, 20, 218, 17, 67, 186, 63, 168, 44, 23, 202, 109, 183, 188, 227, 200, 56, 169, 81, 88, 130, 49, 251, 217, 106, 221, 124, 175, 169, 217, 84, 247, 25, 180, 26, 31, 91, 177, 50, 74, 231, 122, 13, 172, 198, 237, 120, 161, 3, 45, 40, 56, 54, 207, 150, 121, 161, 37, 109, 161, 41, 207, 83, 163, 33, 174, 162, 194, 22, 144, 237, 142, 94, 227, 155, 29, 162, 68, 65, 159, 224, 101, 60, 219, 111, 103, 71, 76, 228, 222, 22, 44, 68, 85, 136, 75, 22, 117, 149, 125, 72, 78, 42, 183, 65, 109, 118, 139, 45, 246, 190, 25, 93, 56, 43, 162, 242, 120, 1, 51, 202, 210, 81, 85, 156, 141, 152, 182, 173, 134, 148, 86, 253, 100, 195, 192, 72, 102, 67, 29, 97, 178, 151, 17, 85, 222, 4, 213, 35, 231, 146, 110, 188, 89, 213, 157, 45, 88, 156, 146, 29, 216, 56, 213, 155, 130, 178, 37, 62, 159, 193, 216, 147, 203, 95, 63, 12, 208, 97, 46, 188, 163, 87, 204, 54, 52, 203, 236, 202, 59, 155, 236, 6] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
Processing transaction: Transaction { sender: "76de2VASqScdBarEJ74mZnjyGbyma7btxiJp2fNm4jQi", recipient: "76de2VASqScdBarEJ74mZnjyGbyma7btxiJp2fNm4jQi", amount: 0, nonce: 1 }
Batch created: Batch { transactions: [Transaction { sender: "76de2VASqScdBarEJ74mZnjyGbyma7btxiJp2fNm4jQi", recipient: "76de2VASqScdBarEJ74mZnjyGbyma7btxiJp2fNm4jQi", amount: 0, nonce: 1 }], programs: [], timestamp: 1729011316, batch_id: 126 }
Generating proof for batch: Batch { transactions: [Transaction { sender: "76de2VASqScdBarEJ74mZnjyGbyma7btxiJp2fNm4jQi", recipient: "76de2VASqScdBarEJ74mZnjyGbyma7btxiJp2fNm4jQi", amount: 0, nonce: 1 }], programs: [], timestamp: 1729011316, batch_id: 126 }
Proving key: ProvingKey { vk: VerifyingKey { alpha_g1: (761275118664180500024545038212163406293949062381521455949942787613519667489, 3554362294036464691621308650032597776762396650156472896214181874411407342111), beta_g2: (QuadExtField(9850689882329096300985671355486503943146518987470180269914308855831504181661 + 13485497992133451074363538375792671897903266698589279045511066185463704617153 * u), QuadExtField(3025615824620968996699737482943929965709714596107365934596203814788905352885 + 2489962748894682543639128873109735516769818082096406217604557682429112412391 * u)), gamma_g2: (QuadExtField(729101455779692294700072969581302299075293162016974031250236206826126685244 + 5931141892421087664051413147576216055928222221300640019130992788593938653195 * u), QuadExtField(8625056688523248365831709810223500646402740693178727380630866744233917733521 + 14656561176546435296591560957455430230894293782689090358216514909449811033336 * u)), delta_g2: (QuadExtField(16692900697515426251358189635127617523125295524332751565868291804594652879254 + 12858103976168784510566099721124736640484418896943654808983376297801763098904 * u), QuadExtField(6315208329592962814163602627028802185185466694472061510076283513214909926330 + 13603269695315995841418046860903904539038811538785625352392480551777920068034 * u)), gamma_abc_g1: [(10815329040150270353597505016355009053758696069003324415358927900538689357556, 12965361280891780206103533730496357170754139064616709320821433945933043240261)] }, beta_g1: (16308971125901055744214114879767593566449327321148006001642860658733465596363, 18115161782458013740508655927828764726275713027826502263706802902006138369964), delta_g1: (13900558407267192920498031623023966751162844599111383849036452244096094559177, 16316822055885688777808132974815609110213342098703594706039464064289398739065), a_query: [(21672486433253155762262641047653243282781960714440567116021423710000796660035, 18180930954624202466457418632511987976885332040558175703727439674101564686399), infinity, infinity, (2124828323357704995556751823734260171061102408616094443760673940841711143170, 662093621534048835035412804345240650731993706373996643351770999837073751456), infinity, (13695185013523559860930170450987263750810341195721735417251079460895318724806, 17114462332442180627690957481135629233812632703770264303749046098058293655551)], b_g1_query: [infinity, infinity, infinity, infinity, infinity, infinity], b_g2_query: [infinity, infinity, infinity, infinity, infinity, infinity], h_query: [(9421118091638361669992478396038026799766457784025330767489072859083875055448, 3486286372898289920062259644339532981999449281359904990664054809085025397757), (14864046134049187491933654156170752571221179806237291959777123036174827145527, 13365491084424520002007217457423379054336747068979794717681504936636314379770), (19520149790671202909087950300098089046384858738384388138497956725916169970003, 6526916217960290700215272575960190634312888773293740931685031883141969966099)], l_query: [infinity, (5082129753753494418089244801463374360169954916241712250809007501065356983595, 17369837961991460847306909209389241141830853436582792101931336640147869863163), (6603672200814151989299308215603169578423785986639516378575830784603233498377, 14769124507221540026604252870812250331328787768084485878634554312432691287574), (837745438131131952184842949925807719704770311885452172442499669693482624347, 11088218103278013587940305960844052094189346240788694390926587222846595268523), (869902262360865143287797492321529859397202113070134818589813762823465548410, 14099325341906051712005921752209143423416092047454366016761131996992309532143)] }
Generated Groth16 proof: Proof { a: (3586047762228727672746271232195865908136418997287738015365757374684417987396, 17962245895940098983859323426452333664536598143142528951870685127876574316989), b: (QuadExtField(13613528759838552757308143418617016819596692391899898004054539271126570663635 + 17004771572793481930382548789855181494596901473842700863332679730537246514076 * u), QuadExtField(13612314822945152382280150803239449438014861596029279578195688424544244390676 + 13492351814638059302399727583331328375709603880629770039549122438918098859481 * u)), c: (8543758132496804625216291224075014610567048043314797621336215322368334407564, 18711903362095178601871139471106167858614636611402265031007626128082792357952) }
Serialized proof bytes: [68, 147, 143, 113, 114, 188, 242, 124, 119, 183, 167, 90, 52, 131, 204, 165, 154, 16, 67, 239, 246, 84, 60, 228, 29, 241, 197, 41, 144, 161, 237, 7, 189, 9, 38, 223, 95, 85, 236, 251, 33, 162, 149, 168, 102, 176, 211, 109, 65, 61, 185, 201, 10, 16, 155, 30, 188, 38, 229, 146, 89, 69, 182, 167, 211, 126, 118, 132, 57, 181, 245, 148, 19, 248, 250, 64, 121, 21, 196, 79, 185, 36, 126, 24, 202, 107, 20, 160, 134, 119, 229, 21, 246, 251, 24, 30, 156, 91, 160, 158, 178, 148, 78, 58, 5, 249, 146, 155, 209, 174, 24, 254, 88, 54, 213, 110, 209, 226, 238, 50, 93, 131, 161, 22, 17, 92, 152, 37, 20, 219, 196, 163, 210, 51, 112, 141, 8, 180, 34, 148, 53, 236, 189, 83, 177, 219, 58, 87, 251, 230, 161, 20, 139, 208, 226, 169, 18, 76, 24, 30, 217, 53, 203, 73, 245, 64, 120, 186, 108, 96, 33, 164, 39, 159, 248, 151, 39, 239, 28, 29, 202, 37, 128, 197, 54, 86, 133, 97, 135, 102, 212, 157, 140, 167, 36, 231, 129, 99, 58, 251, 241, 37, 102, 246, 107, 83, 90, 251, 18, 211, 105, 90, 97, 245, 205, 20, 46, 119, 130, 38, 130, 152, 227, 18, 64, 32, 216, 200, 250, 103, 251, 12, 197, 193, 188, 116, 165, 210, 229, 36, 224, 238, 213, 35, 62, 219, 59, 15, 245, 163, 226, 106, 222, 143, 94, 169]
Proof generated: Proof { data: [68, 147, 143, 113, 114, 188, 242, 124, 119, 183, 167, 90, 52, 131, 204, 165, 154, 16, 67, 239, 246, 84, 60, 228, 29, 241, 197, 41, 144, 161, 237, 7, 189, 9, 38, 223, 95, 85, 236, 251, 33, 162, 149, 168, 102, 176, 211, 109, 65, 61, 185, 201, 10, 16, 155, 30, 188, 38, 229, 146, 89, 69, 182, 167, 211, 126, 118, 132, 57, 181, 245, 148, 19, 248, 250, 64, 121, 21, 196, 79, 185, 36, 126, 24, 202, 107, 20, 160, 134, 119, 229, 21, 246, 251, 24, 30, 156, 91, 160, 158, 178, 148, 78, 58, 5, 249, 146, 155, 209, 174, 24, 254, 88, 54, 213, 110, 209, 226, 238, 50, 93, 131, 161, 22, 17, 92, 152, 37, 20, 219, 196, 163, 210, 51, 112, 141, 8, 180, 34, 148, 53, 236, 189, 83, 177, 219, 58, 87, 251, 230, 161, 20, 139, 208, 226, 169, 18, 76, 24, 30, 217, 53, 203, 73, 245, 64, 120, 186, 108, 96, 33, 164, 39, 159, 248, 151, 39, 239, 28, 29, 202, 37, 128, 197, 54, 86, 133, 97, 135, 102, 212, 157, 140, 167, 36, 231, 129, 99, 58, 251, 241, 37, 102, 246, 107, 83, 90, 251, 18, 211, 105, 90, 97, 245, 205, 20, 46, 119, 130, 38, 130, 152, 227, 18, 64, 32, 216, 200, 250, 103, 251, 12, 197, 193, 188, 116, 165, 210, 229, 36, 224, 238, 213, 35, 62, 219, 59, 15, 245, 163, 226, 106, 222, 143, 94, 169] }
Public input length: 0
Verifying with processed key length: 1
Verifying proof: Proof { data: [68, 147, 143, 113, 114, 188, 242, 124, 119, 183, 167, 90, 52, 131, 204, 165, 154, 16, 67, 239, 246, 84, 60, 228, 29, 241, 197, 41, 144, 161, 237, 7, 189, 9, 38, 223, 95, 85, 236, 251, 33, 162, 149, 168, 102, 176, 211, 109, 65, 61, 185, 201, 10, 16, 155, 30, 188, 38, 229, 146, 89, 69, 182, 167, 211, 126, 118, 132, 57, 181, 245, 148, 19, 248, 250, 64, 121, 21, 196, 79, 185, 36, 126, 24, 202, 107, 20, 160, 134, 119, 229, 21, 246, 251, 24, 30, 156, 91, 160, 158, 178, 148, 78, 58, 5, 249, 146, 155, 209, 174, 24, 254, 88, 54, 213, 110, 209, 226, 238, 50, 93, 131, 161, 22, 17, 92, 152, 37, 20, 219, 196, 163, 210, 51, 112, 141, 8, 180, 34, 148, 53, 236, 189, 83, 177, 219, 58, 87, 251, 230, 161, 20, 139, 208, 226, 169, 18, 76, 24, 30, 217, 53, 203, 73, 245, 64, 120, 186, 108, 96, 33, 164, 39, 159, 248, 151, 39, 239, 28, 29, 202, 37, 128, 197, 54, 86, 133, 97, 135, 102, 212, 157, 140, 167, 36, 231, 129, 99, 58, 251, 241, 37, 102, 246, 107, 83, 90, 251, 18, 211, 105, 90, 97, 245, 205, 20, 46, 119, 130, 38, 130, 152, 227, 18, 64, 32, 216, 200, 250, 103, 251, 12, 197, 193, 188, 116, 165, 210, 229, 36, 224, 238, 213, 35, 62, 219, 59, 15, 245, 163, 226, 106, 222, 143, 94, 169] }
Verification result: Ok(true)
Proof verification result: true
Applying proof in sequencer: Proof { data: [68, 147, 143, 113, 114, 188, 242, 124, 119, 183, 167, 90, 52, 131, 204, 165, 154, 16, 67, 239, 246, 84, 60, 228, 29, 241, 197, 41, 144, 161, 237, 7, 189, 9, 38, 223, 95, 85, 236, 251, 33, 162, 149, 168, 102, 176, 211, 109, 65, 61, 185, 201, 10, 16, 155, 30, 188, 38, 229, 146, 89, 69, 182, 167, 211, 126, 118, 132, 57, 181, 245, 148, 19, 248, 250, 64, 121, 21, 196, 79, 185, 36, 126, 24, 202, 107, 20, 160, 134, 119, 229, 21, 246, 251, 24, 30, 156, 91, 160, 158, 178, 148, 78, 58, 5, 249, 146, 155, 209, 174, 24, 254, 88, 54, 213, 110, 209, 226, 238, 50, 93, 131, 161, 22, 17, 92, 152, 37, 20, 219, 196, 163, 210, 51, 112, 141, 8, 180, 34, 148, 53, 236, 189, 83, 177, 219, 58, 87, 251, 230, 161, 20, 139, 208, 226, 169, 18, 76, 24, 30, 217, 53, 203, 73, 245, 64, 120, 186, 108, 96, 33, 164, 39, 159, 248, 151, 39, 239, 28, 29, 202, 37, 128, 197, 54, 86, 133, 97, 135, 102, 212, 157, 140, 167, 36, 231, 129, 99, 58, 251, 241, 37, 102, 246, 107, 83, 90, 251, 18, 211, 105, 90, 97, 245, 205, 20, 46, 119, 130, 38, 130, 152, 227, 18, 64, 32, 216, 200, 250, 103, 251, 12, 197, 193, 188, 116, 165, 210, 229, 36, 224, 238, 213, 35, 62, 219, 59, 15, 245, 163, 226, 106, 222, 143, 94, 169] }
State updated: balance = 256, nonce = 1
State after applying proof: State { balance: 256, nonce: 1 }
Proof applied
